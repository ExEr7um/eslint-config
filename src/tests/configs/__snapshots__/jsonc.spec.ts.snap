// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Конфиг jsonc > Имеет все параметры 1`] = `
[
  {
    "plugins": {
      "jsonc": {
        "configs": {
          "all": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/array-bracket-newline": "error",
              "jsonc/array-bracket-spacing": "error",
              "jsonc/array-element-newline": "error",
              "jsonc/auto": "error",
              "jsonc/comma-dangle": "error",
              "jsonc/comma-style": "error",
              "jsonc/indent": "error",
              "jsonc/key-name-casing": "error",
              "jsonc/key-spacing": "error",
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-comments": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-irregular-whitespace": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-escape": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/object-curly-newline": "error",
              "jsonc/object-curly-spacing": "error",
              "jsonc/object-property-newline": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/sort-keys": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "auto-config": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/auto": "error",
            },
          },
          "base": {
            "overrides": [
              {
                "files": [
                  "*.json",
                  "*.json5",
                  "*.jsonc",
                ],
                "parser": "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/jsonc-eslint-parser/lib/index.js",
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
            ],
            "plugins": [
              "jsonc",
            ],
          },
          "flat/all": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/array-bracket-newline": "error",
                "jsonc/array-bracket-spacing": "error",
                "jsonc/array-element-newline": "error",
                "jsonc/auto": "error",
                "jsonc/comma-dangle": "error",
                "jsonc/comma-style": "error",
                "jsonc/indent": "error",
                "jsonc/key-name-casing": "error",
                "jsonc/key-spacing": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-irregular-whitespace": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-escape": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/object-curly-newline": "error",
                "jsonc/object-curly-spacing": "error",
                "jsonc/object-property-newline": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/sort-keys": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/base": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
          ],
          "flat/prettier": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/array-bracket-newline": "off",
                "jsonc/array-bracket-spacing": "off",
                "jsonc/array-element-newline": "off",
                "jsonc/comma-dangle": "off",
                "jsonc/comma-style": "off",
                "jsonc/indent": "off",
                "jsonc/key-spacing": "off",
                "jsonc/no-floating-decimal": "off",
                "jsonc/object-curly-newline": "off",
                "jsonc/object-curly-spacing": "off",
                "jsonc/object-property-newline": "off",
                "jsonc/quote-props": "off",
                "jsonc/quotes": "off",
                "jsonc/space-unary-ops": "off",
              },
            },
          ],
          "flat/recommended-with-json": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/comma-dangle": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/recommended-with-json5": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/recommended-with-jsonc": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "prettier": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/array-bracket-newline": "off",
              "jsonc/array-bracket-spacing": "off",
              "jsonc/array-element-newline": "off",
              "jsonc/comma-dangle": "off",
              "jsonc/comma-style": "off",
              "jsonc/indent": "off",
              "jsonc/key-spacing": "off",
              "jsonc/no-floating-decimal": "off",
              "jsonc/object-curly-newline": "off",
              "jsonc/object-curly-spacing": "off",
              "jsonc/object-property-newline": "off",
              "jsonc/quote-props": "off",
              "jsonc/quotes": "off",
              "jsonc/space-unary-ops": "off",
            },
          },
          "recommended-with-json": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/comma-dangle": "error",
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-comments": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "recommended-with-json5": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "recommended-with-jsonc": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
        },
        "default": {
          "configs": {
            "all": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/array-bracket-newline": "error",
                "jsonc/array-bracket-spacing": "error",
                "jsonc/array-element-newline": "error",
                "jsonc/auto": "error",
                "jsonc/comma-dangle": "error",
                "jsonc/comma-style": "error",
                "jsonc/indent": "error",
                "jsonc/key-name-casing": "error",
                "jsonc/key-spacing": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-irregular-whitespace": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-escape": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/object-curly-newline": "error",
                "jsonc/object-curly-spacing": "error",
                "jsonc/object-property-newline": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/sort-keys": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "auto-config": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/auto": "error",
              },
            },
            "base": {
              "overrides": [
                {
                  "files": [
                    "*.json",
                    "*.json5",
                    "*.jsonc",
                  ],
                  "parser": "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/jsonc-eslint-parser/lib/index.js",
                  "rules": {
                    "no-unused-expressions": "off",
                    "no-unused-vars": "off",
                    "strict": "off",
                  },
                },
              ],
              "plugins": [
                "jsonc",
              ],
            },
            "flat/all": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/array-bracket-newline": "error",
                  "jsonc/array-bracket-spacing": "error",
                  "jsonc/array-element-newline": "error",
                  "jsonc/auto": "error",
                  "jsonc/comma-dangle": "error",
                  "jsonc/comma-style": "error",
                  "jsonc/indent": "error",
                  "jsonc/key-name-casing": "error",
                  "jsonc/key-spacing": "error",
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-comments": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-floating-decimal": "error",
                  "jsonc/no-hexadecimal-numeric-literals": "error",
                  "jsonc/no-infinity": "error",
                  "jsonc/no-irregular-whitespace": "error",
                  "jsonc/no-multi-str": "error",
                  "jsonc/no-nan": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-escape": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-plus-sign": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/object-curly-newline": "error",
                  "jsonc/object-curly-spacing": "error",
                  "jsonc/object-property-newline": "error",
                  "jsonc/quote-props": "error",
                  "jsonc/quotes": "error",
                  "jsonc/sort-keys": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/valid-json-number": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "flat/base": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
            ],
            "flat/prettier": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/array-bracket-newline": "off",
                  "jsonc/array-bracket-spacing": "off",
                  "jsonc/array-element-newline": "off",
                  "jsonc/comma-dangle": "off",
                  "jsonc/comma-style": "off",
                  "jsonc/indent": "off",
                  "jsonc/key-spacing": "off",
                  "jsonc/no-floating-decimal": "off",
                  "jsonc/object-curly-newline": "off",
                  "jsonc/object-curly-spacing": "off",
                  "jsonc/object-property-newline": "off",
                  "jsonc/quote-props": "off",
                  "jsonc/quotes": "off",
                  "jsonc/space-unary-ops": "off",
                },
              },
            ],
            "flat/recommended-with-json": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/comma-dangle": "error",
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-comments": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-floating-decimal": "error",
                  "jsonc/no-hexadecimal-numeric-literals": "error",
                  "jsonc/no-infinity": "error",
                  "jsonc/no-multi-str": "error",
                  "jsonc/no-nan": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-plus-sign": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/quote-props": "error",
                  "jsonc/quotes": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/valid-json-number": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "flat/recommended-with-json5": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "flat/recommended-with-jsonc": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-floating-decimal": "error",
                  "jsonc/no-hexadecimal-numeric-literals": "error",
                  "jsonc/no-infinity": "error",
                  "jsonc/no-multi-str": "error",
                  "jsonc/no-nan": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-plus-sign": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/quote-props": "error",
                  "jsonc/quotes": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/valid-json-number": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "prettier": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/array-bracket-newline": "off",
                "jsonc/array-bracket-spacing": "off",
                "jsonc/array-element-newline": "off",
                "jsonc/comma-dangle": "off",
                "jsonc/comma-style": "off",
                "jsonc/indent": "off",
                "jsonc/key-spacing": "off",
                "jsonc/no-floating-decimal": "off",
                "jsonc/object-curly-newline": "off",
                "jsonc/object-curly-spacing": "off",
                "jsonc/object-property-newline": "off",
                "jsonc/quote-props": "off",
                "jsonc/quotes": "off",
                "jsonc/space-unary-ops": "off",
              },
            },
            "recommended-with-json": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/comma-dangle": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "recommended-with-json5": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "recommended-with-jsonc": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          },
          "getStaticJSONValue": [Function],
          "meta": {
            "name": "eslint-plugin-jsonc",
            "version": "2.20.1",
          },
          "parseForESLint": [Function],
          "parseJSON": [Function],
          "rules": {
            "array-bracket-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce line breaks after opening and before closing array brackets",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingClosingLinebreak": "A linebreak is required before ']'.",
                    "missingOpeningLinebreak": "A linebreak is required after '['.",
                    "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                    "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce line breaks after opening and before closing array brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-bracket-newline",
                  "ruleName": "array-bracket-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingClosingLinebreak": "A linebreak is required before ']'.",
                  "missingOpeningLinebreak": "A linebreak is required after '['.",
                  "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                  "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "array-bracket-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow or enforce spaces inside of brackets",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                    "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arraysInArrays": {
                          "type": "boolean",
                        },
                        "objectsInArrays": {
                          "type": "boolean",
                        },
                        "singleValue": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow or enforce spaces inside of brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-bracket-spacing",
                  "ruleName": "array-bracket-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                  "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInArrays": {
                        "type": "boolean",
                      },
                      "objectsInArrays": {
                        "type": "boolean",
                      },
                      "singleValue": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "array-element-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce line breaks between array elements",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingLineBreak": "There should be a linebreak after this element.",
                    "unexpectedLineBreak": "There should be no linebreak here.",
                  },
                  "schema": {
                    "definitions": {
                      "basicConfig": {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                              "consistent",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "minItems": {
                                "minimum": 0,
                                "type": [
                                  "integer",
                                  "null",
                                ],
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "items": [
                      {
                        "oneOf": [
                          {
                            "$ref": "#/definitions/basicConfig",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "ArrayExpression": {
                                "$ref": "#/definitions/basicConfig",
                              },
                              "ArrayPattern": {
                                "$ref": "#/definitions/basicConfig",
                              },
                              "JSONArrayExpression": {
                                "$ref": "#/definitions/basicConfig",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce line breaks between array elements",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-element-newline",
                  "ruleName": "array-element-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingLineBreak": "There should be a linebreak after this element.",
                  "unexpectedLineBreak": "There should be no linebreak here.",
                },
                "schema": {
                  "definitions": {
                    "basicConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/basicConfig",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "ArrayPattern": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "JSONArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "auto": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "apply jsonc rules similar to your configured ESLint core rules",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {},
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "apply jsonc rules similar to your configured ESLint core rules",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/auto",
                  "ruleName": "auto",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/auto.html",
                },
                "fixable": "code",
                "messages": {},
                "schema": [],
                "type": "suggestion",
              },
            },
            "comma-dangle": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require or disallow trailing commas",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "missing": "Missing trailing comma.",
                    "unexpected": "Unexpected trailing comma.",
                  },
                  "schema": {
                    "additionalItems": false,
                    "definitions": {
                      "value": {
                        "enum": [
                          "always-multiline",
                          "always",
                          "never",
                          "only-multiline",
                        ],
                        "type": "string",
                      },
                      "valueWithIgnore": {
                        "enum": [
                          "always-multiline",
                          "always",
                          "ignore",
                          "never",
                          "only-multiline",
                        ],
                        "type": "string",
                      },
                    },
                    "items": [
                      {
                        "oneOf": [
                          {
                            "$ref": "#/definitions/value",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "arrays": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "exports": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "functions": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "imports": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "objects": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "require or disallow trailing commas",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                  ],
                  "ruleId": "jsonc/comma-dangle",
                  "ruleName": "comma-dangle",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html",
                },
                "fixable": "code",
                "messages": {
                  "missing": "Missing trailing comma.",
                  "unexpected": "Unexpected trailing comma.",
                },
                "schema": {
                  "additionalItems": false,
                  "definitions": {
                    "value": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                    "valueWithIgnore": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "ignore",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/value",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arrays": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "exports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "functions": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "imports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "objects": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "comma-style": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent comma style",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "expectedCommaFirst": "',' should be placed first.",
                    "expectedCommaLast": "',' should be placed last.",
                    "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "first",
                        "last",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "exceptions": {
                          "additionalProperties": {
                            "type": "boolean",
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent comma style",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/comma-style",
                  "ruleName": "comma-style",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedCommaFirst": "',' should be placed first.",
                  "expectedCommaLast": "',' should be placed last.",
                  "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                },
                "schema": [
                  {
                    "enum": [
                      "first",
                      "last",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "indent": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent indentation",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "tab",
                          ],
                          "type": "string",
                        },
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "ArrayExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "CallExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "arguments": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "FunctionDeclaration": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "parameters": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "FunctionExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "parameters": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "ImportDeclaration": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "MemberExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "ObjectExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "StaticBlock": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                          },
                          "type": "object",
                        },
                        "SwitchCase": {
                          "default": 0,
                          "minimum": 0,
                          "type": "integer",
                        },
                        "VariableDeclarator": {
                          "oneOf": [
                            {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "const": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                                "let": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                                "var": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "flatTernaryExpressions": {
                          "default": false,
                          "type": "boolean",
                        },
                        "ignoreComments": {
                          "default": false,
                          "type": "boolean",
                        },
                        "ignoredNodes": {
                          "items": {
                            "not": {
                              "pattern": ":exit$",
                            },
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "offsetTernaryExpressions": {
                          "default": false,
                          "type": "boolean",
                        },
                        "outerIIFEBody": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent indentation",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/indent",
                  "ruleName": "indent",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "tab",
                        ],
                        "type": "string",
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ArrayExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "CallExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "arguments": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionDeclaration": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "ImportDeclaration": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "MemberExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "ObjectExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "StaticBlock": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      "SwitchCase": {
                        "default": 0,
                        "minimum": 0,
                        "type": "integer",
                      },
                      "VariableDeclarator": {
                        "oneOf": [
                          {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "const": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "let": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "var": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "flatTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoredNodes": {
                        "items": {
                          "not": {
                            "pattern": ":exit$",
                          },
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "offsetTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "outerIIFEBody": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "key-name-casing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce naming convention to property key names",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "messages": {
                    "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "PascalCase": {
                          "default": false,
                          "type": "boolean",
                        },
                        "SCREAMING_SNAKE_CASE": {
                          "default": false,
                          "type": "boolean",
                        },
                        "camelCase": {
                          "default": true,
                          "type": "boolean",
                        },
                        "ignores": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "kebab-case": {
                          "default": false,
                          "type": "boolean",
                        },
                        "snake_case": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce naming convention to property key names",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/key-name-casing",
                  "ruleName": "key-name-casing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html",
                },
                "messages": {
                  "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "PascalCase": {
                        "default": false,
                        "type": "boolean",
                      },
                      "SCREAMING_SNAKE_CASE": {
                        "default": false,
                        "type": "boolean",
                      },
                      "camelCase": {
                        "default": true,
                        "type": "boolean",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "kebab-case": {
                        "default": false,
                        "type": "boolean",
                      },
                      "snake_case": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "key-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent spacing between keys and values in object literal properties",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                    "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                    "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                    "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                  },
                  "schema": [
                    {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                      "type": "string",
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "multiLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "align": {
                                  "anyOf": [
                                    {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "afterColon": {
                                          "type": "boolean",
                                        },
                                        "beforeColon": {
                                          "type": "boolean",
                                        },
                                        "mode": {
                                          "enum": [
                                            "strict",
                                            "minimum",
                                          ],
                                          "type": "string",
                                        },
                                        "on": {
                                          "enum": [
                                            "colon",
                                            "value",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "singleLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "align": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "multiLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "singleLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing between keys and values in object literal properties",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/key-spacing",
                  "ruleName": "key-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "afterColon": {
                            "type": "boolean",
                          },
                          "align": {
                            "anyOf": [
                              {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "afterColon": {
                                    "type": "boolean",
                                  },
                                  "beforeColon": {
                                    "type": "boolean",
                                  },
                                  "mode": {
                                    "enum": [
                                      "strict",
                                      "minimum",
                                    ],
                                    "type": "string",
                                  },
                                  "on": {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "beforeColon": {
                            "type": "boolean",
                          },
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "align": {
                                "anyOf": [
                                  {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "afterColon": {
                                        "type": "boolean",
                                      },
                                      "beforeColon": {
                                        "type": "boolean",
                                      },
                                      "mode": {
                                        "enum": [
                                          "strict",
                                          "minimum",
                                        ],
                                        "type": "string",
                                      },
                                      "on": {
                                        "enum": [
                                          "colon",
                                          "value",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "align": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "no-bigint-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow BigInt literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "BigInt literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow BigInt literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-bigint-literals",
                  "ruleName": "no-bigint-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-bigint-literals.html",
                },
                "messages": {
                  "unexpected": "BigInt literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-binary-expression": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow binary expression",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": false,
                  "messages": {
                    "disallow": "The binary expressions are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow binary expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-binary-expression",
                  "ruleName": "no-binary-expression",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-expression.html",
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "The binary expressions are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-binary-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow binary numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Binary numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow binary numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-binary-numeric-literals",
                  "ruleName": "no-binary-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Binary numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-comments": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow comments",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                    ],
                  },
                  "messages": {
                    "unexpected": "Unexpected comment.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow comments",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                  ],
                  "ruleId": "jsonc/no-comments",
                  "ruleName": "no-comments",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-comments.html",
                },
                "messages": {
                  "unexpected": "Unexpected comment.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-dupe-keys": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow duplicate keys in object literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "unexpected": "Duplicate key '{{name}}'.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow duplicate keys in object literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-dupe-keys",
                  "ruleName": "no-dupe-keys",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-dupe-keys.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Duplicate key '{{name}}'.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "problem",
              },
            },
            "no-escape-sequence-in-identifier": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow escape sequences in identifiers.",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Escape sequence in identifiers should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow escape sequences in identifiers.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-escape-sequence-in-identifier",
                  "ruleName": "no-escape-sequence-in-identifier",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-escape-sequence-in-identifier.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Escape sequence in identifiers should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-floating-decimal": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow leading or trailing decimal points in numeric literals",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": undefined,
                  "messages": {
                    "leading": "A leading decimal point can be confused with a dot.",
                    "trailing": "A trailing decimal point can be confused with a dot.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow leading or trailing decimal points in numeric literals",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-floating-decimal",
                  "ruleName": "no-floating-decimal",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-floating-decimal.html",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "leading": "A leading decimal point can be confused with a dot.",
                  "trailing": "A trailing decimal point can be confused with a dot.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-hexadecimal-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow hexadecimal numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Hexadecimal numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow hexadecimal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-hexadecimal-numeric-literals",
                  "ruleName": "no-hexadecimal-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-hexadecimal-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Hexadecimal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-infinity": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow Infinity",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "messages": {
                    "disallow": "Infinity should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow Infinity",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-infinity",
                  "ruleName": "no-infinity",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-infinity.html",
                },
                "messages": {
                  "disallow": "Infinity should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-irregular-whitespace": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "defaultOptions": [
                    {
                      "skipComments": false,
                      "skipJSXText": false,
                      "skipRegExps": false,
                      "skipStrings": true,
                      "skipTemplates": false,
                    },
                  ],
                  "deprecated": false,
                  "docs": {
                    "description": "disallow irregular whitespace",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "noIrregularWhitespace": "Irregular whitespace not allowed.",
                  },
                  "replacedBy": [],
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "skipComments": {
                          "type": "boolean",
                        },
                        "skipJSXText": {
                          "type": "boolean",
                        },
                        "skipRegExps": {
                          "type": "boolean",
                        },
                        "skipStrings": {
                          "type": "boolean",
                        },
                        "skipTemplates": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "problem",
                },
              },
              "meta": {
                "defaultOptions": [
                  {
                    "skipComments": false,
                    "skipJSXText": false,
                    "skipRegExps": false,
                    "skipStrings": true,
                    "skipTemplates": false,
                  },
                ],
                "deprecated": false,
                "docs": {
                  "description": "disallow irregular whitespace",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/no-irregular-whitespace",
                  "ruleName": "no-irregular-whitespace",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noIrregularWhitespace": "Irregular whitespace not allowed.",
                },
                "replacedBy": [],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "skipComments": {
                        "type": "boolean",
                      },
                      "skipJSXText": {
                        "type": "boolean",
                      },
                      "skipRegExps": {
                        "type": "boolean",
                      },
                      "skipStrings": {
                        "type": "boolean",
                      },
                      "skipTemplates": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-multi-str": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow multiline strings",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "multilineString": "Multiline support is limited to JSON5 only.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow multiline strings",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-multi-str",
                  "ruleName": "no-multi-str",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-multi-str.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "multilineString": "Multiline support is limited to JSON5 only.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-nan": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow NaN",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "messages": {
                    "disallow": "NaN should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow NaN",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-nan",
                  "ruleName": "no-nan",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-nan.html",
                },
                "messages": {
                  "disallow": "NaN should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-number-props": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow number property keys",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "The number property keys are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow number property keys",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-number-props",
                  "ruleName": "no-number-props",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-number-props.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The number property keys are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-numeric-separators": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow numeric separators",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "Numeric separators are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow numeric separators",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-numeric-separators",
                  "ruleName": "no-numeric-separators",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-numeric-separators.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Numeric separators are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-octal": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow legacy octal literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "noOctal": "Octal literals should not be used.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow legacy octal literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-octal",
                  "ruleName": "no-octal",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noOctal": "Octal literals should not be used.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-octal-escape": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow octal escape sequences in string literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow octal escape sequences in string literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/no-octal-escape",
                  "ruleName": "no-octal-escape",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-escape.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-octal-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow octal numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Octal numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow octal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-octal-numeric-literals",
                  "ruleName": "no-octal-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Octal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-parenthesized": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow parentheses around the expression",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": false,
                  "messages": {
                    "disallow": "Parentheses around expression should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow parentheses around the expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-parenthesized",
                  "ruleName": "no-parenthesized",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-parenthesized.html",
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "Parentheses around expression should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-plus-sign": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow plus sign",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Plus sign should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow plus sign",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-plus-sign",
                  "ruleName": "no-plus-sign",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-plus-sign.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Plus sign should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-regexp-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow RegExp literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "RegExp literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow RegExp literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-regexp-literals",
                  "ruleName": "no-regexp-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-regexp-literals.html",
                },
                "messages": {
                  "unexpected": "RegExp literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-sparse-arrays": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow sparse arrays",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "unexpectedSparseArray": "Unexpected comma in middle of array.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow sparse arrays",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-sparse-arrays",
                  "ruleName": "no-sparse-arrays",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-sparse-arrays.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpectedSparseArray": "Unexpected comma in middle of array.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "problem",
              },
            },
            "no-template-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow template literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "The template literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow template literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-template-literals",
                  "ruleName": "no-template-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-template-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The template literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-undefined-value": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow \`undefined\`",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "\`undefined\` is not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow \`undefined\`",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-undefined-value",
                  "ruleName": "no-undefined-value",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-undefined-value.html",
                },
                "messages": {
                  "unexpected": "\`undefined\` is not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unicode-codepoint-escapes": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow Unicode code point escape sequences.",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Unicode code point escape sequence should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow Unicode code point escape sequences.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-unicode-codepoint-escapes",
                  "ruleName": "no-unicode-codepoint-escapes",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-unicode-codepoint-escapes.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Unicode code point escape sequence should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-useless-escape": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "defaultOptions": [
                    {
                      "allowRegexCharacters": [],
                    },
                  ],
                  "deprecated": false,
                  "docs": {
                    "description": "disallow unnecessary escape usage",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": true,
                  "messages": {
                    "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                    "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                    "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                    "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                  },
                  "replacedBy": [],
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowRegexCharacters": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "suggestion",
                },
              },
              "meta": {
                "defaultOptions": [
                  {
                    "allowRegexCharacters": [],
                  },
                ],
                "deprecated": false,
                "docs": {
                  "description": "disallow unnecessary escape usage",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-useless-escape",
                  "ruleName": "no-useless-escape",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-useless-escape.html",
                },
                "fixable": undefined,
                "hasSuggestions": true,
                "messages": {
                  "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                  "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                  "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                  "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                },
                "replacedBy": [],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowRegexCharacters": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "object-curly-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent line breaks inside braces",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                    "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                    "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                    "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ExportDeclaration": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ImportDeclaration": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ObjectExpression": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ObjectPattern": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent line breaks inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-curly-newline",
                  "ruleName": "object-curly-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                  "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                  "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                  "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "consistent": {
                                "type": "boolean",
                              },
                              "minProperties": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ExportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ImportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectExpression": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectPattern": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "object-curly-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent spacing inside braces",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "requireSpaceAfter": "A space is required after '{{token}}'.",
                    "requireSpaceBefore": "A space is required before '{{token}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arraysInObjects": {
                          "type": "boolean",
                        },
                        "objectsInObjects": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-curly-spacing",
                  "ruleName": "object-curly-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInObjects": {
                        "type": "boolean",
                      },
                      "objectsInObjects": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "object-property-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce placing object properties on separate lines",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "propertiesOnNewline": "Object properties must go on a new line.",
                    "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowAllPropertiesOnSameLine": {
                          "default": false,
                          "type": "boolean",
                        },
                        "allowMultiplePropertiesPerLine": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce placing object properties on separate lines",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-property-newline",
                  "ruleName": "object-property-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "propertiesOnNewline": "Object properties must go on a new line.",
                  "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAllPropertiesOnSameLine": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowMultiplePropertiesPerLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "quote-props": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require quotes around object literal property names",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                    "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                    "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                    "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                    "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                    "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                    "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                  },
                  "schema": {
                    "anyOf": [
                      {
                        "items": [
                          {
                            "enum": [
                              "always",
                              "as-needed",
                              "consistent",
                              "consistent-as-needed",
                            ],
                            "type": "string",
                          },
                        ],
                        "maxItems": 1,
                        "minItems": 0,
                        "type": "array",
                      },
                      {
                        "items": [
                          {
                            "enum": [
                              "always",
                              "as-needed",
                              "consistent",
                              "consistent-as-needed",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "keywords": {
                                "type": "boolean",
                              },
                              "numbers": {
                                "type": "boolean",
                              },
                              "unnecessary": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "maxItems": 2,
                        "minItems": 0,
                        "type": "array",
                      },
                    ],
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "require quotes around object literal property names",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/quote-props",
                  "ruleName": "quote-props",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html",
                },
                "fixable": "code",
                "messages": {
                  "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                  "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                  "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                  "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                  "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                  "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                  "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "keywords": {
                              "type": "boolean",
                            },
                            "numbers": {
                              "type": "boolean",
                            },
                            "unnecessary": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "quotes": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce use of double or single quotes",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "wrongQuotes": "Strings must use {{description}}.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "single",
                        "double",
                        "backtick",
                      ],
                      "type": "string",
                    },
                    {
                      "anyOf": [
                        {
                          "enum": [
                            "avoid-escape",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowTemplateLiterals": {
                              "type": "boolean",
                            },
                            "avoidEscape": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce use of double or single quotes",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/quotes",
                  "ruleName": "quotes",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html",
                },
                "fixable": "code",
                "messages": {
                  "wrongQuotes": "Strings must use {{description}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "single",
                      "double",
                      "backtick",
                    ],
                    "type": "string",
                  },
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "avoid-escape",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowTemplateLiterals": {
                            "type": "boolean",
                          },
                          "avoidEscape": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "sort-array-values": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require array values to be sorted",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                  },
                  "schema": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "minValues": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                      "valuePattern": {
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "require array values to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/sort-array-values",
                  "ruleName": "sort-array-values",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html",
                },
                "fixable": "code",
                "messages": {
                  "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                },
                "schema": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "minValues": {
                        "minimum": 2,
                        "type": "integer",
                      },
                      "order": {
                        "oneOf": [
                          {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "order": {
                                      "additionalProperties": false,
                                      "properties": {
                                        "caseSensitive": {
                                          "type": "boolean",
                                        },
                                        "natural": {
                                          "type": "boolean",
                                        },
                                        "type": {
                                          "enum": [
                                            "asc",
                                            "desc",
                                          ],
                                        },
                                      },
                                      "type": "object",
                                    },
                                    "valuePattern": {
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                              "type": {
                                "enum": [
                                  "asc",
                                  "desc",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "pathPattern": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "pathPattern",
                      "order",
                    ],
                    "type": "object",
                  },
                  "minItems": 1,
                  "type": "array",
                },
                "type": "suggestion",
              },
            },
            "sort-keys": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require object keys to be sorted",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                  },
                  "schema": {
                    "oneOf": [
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "hasProperties": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "order": {
                              "oneOf": [
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "properties": {
                                          "keyPattern": {
                                            "type": "string",
                                          },
                                          "order": {
                                            "additionalProperties": false,
                                            "properties": {
                                              "caseSensitive": {
                                                "type": "boolean",
                                              },
                                              "natural": {
                                                "type": "boolean",
                                              },
                                              "type": {
                                                "enum": [
                                                  "asc",
                                                  "desc",
                                                ],
                                              },
                                            },
                                            "type": "object",
                                          },
                                        },
                                        "type": "object",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "caseSensitive": {
                                      "type": "boolean",
                                    },
                                    "natural": {
                                      "type": "boolean",
                                    },
                                    "type": {
                                      "enum": [
                                        "asc",
                                        "desc",
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "pathPattern": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "pathPattern",
                            "order",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                      {
                        "additionalItems": false,
                        "items": [
                          {
                            "enum": [
                              "asc",
                              "desc",
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowLineSeparatedGroups": {
                                "type": "boolean",
                              },
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "minKeys": {
                                "minimum": 2,
                                "type": "integer",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                    ],
                  },
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "require object keys to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/sort-keys",
                  "ruleName": "sort-keys",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html",
                },
                "fixable": "code",
                "messages": {
                  "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "hasProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "order": {
                            "oneOf": [
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "keyPattern": {
                                          "type": "string",
                                        },
                                        "order": {
                                          "additionalProperties": false,
                                          "properties": {
                                            "caseSensitive": {
                                              "type": "boolean",
                                            },
                                            "natural": {
                                              "type": "boolean",
                                            },
                                            "type": {
                                              "enum": [
                                                "asc",
                                                "desc",
                                              ],
                                            },
                                          },
                                          "type": "object",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "caseSensitive": {
                                    "type": "boolean",
                                  },
                                  "natural": {
                                    "type": "boolean",
                                  },
                                  "type": {
                                    "enum": [
                                      "asc",
                                      "desc",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "pathPattern": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "pathPattern",
                          "order",
                        ],
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "asc",
                            "desc",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "space-unary-ops": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow spaces after unary operators",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                    "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                    "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                    "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "nonwords": {
                          "default": false,
                          "type": "boolean",
                        },
                        "overrides": {
                          "additionalProperties": {
                            "type": "boolean",
                          },
                          "type": "object",
                        },
                        "words": {
                          "default": true,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow spaces after unary operators",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/space-unary-ops",
                  "ruleName": "space-unary-ops",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                  "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                  "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                  "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "nonwords": {
                        "default": false,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                      "words": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "valid-json-number": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow invalid number for JSON",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "invalid": "Invalid number for JSON.",
                    "invalidBinary": "Binary literals are not allowed in JSON.",
                    "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                    "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                    "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                    "invalidOctal": "Octal literals are not allowed in JSON.",
                    "invalidPlus": "Plus signs are not allowed in JSON.",
                    "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                    "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow invalid number for JSON",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/valid-json-number",
                  "ruleName": "valid-json-number",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/valid-json-number.html",
                },
                "fixable": "code",
                "messages": {
                  "invalid": "Invalid number for JSON.",
                  "invalidBinary": "Binary literals are not allowed in JSON.",
                  "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                  "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                  "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                  "invalidOctal": "Octal literals are not allowed in JSON.",
                  "invalidPlus": "Plus signs are not allowed in JSON.",
                  "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                  "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "vue-custom-block/no-parsing-error": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow parsing errors in Vue custom blocks",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "json5",
                      "jsonc",
                    ],
                  },
                  "messages": {},
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow parsing errors in Vue custom blocks",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "json5",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/vue-custom-block/no-parsing-error",
                  "ruleName": "vue-custom-block/no-parsing-error",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/vue-custom-block/no-parsing-error.html",
                },
                "messages": {},
                "schema": [],
                "type": "problem",
              },
            },
          },
          "traverseNodes": [Function],
        },
        "getStaticJSONValue": [Function],
        "meta": {
          "name": "eslint-plugin-jsonc",
          "version": "2.20.1",
        },
        "parseForESLint": [Function],
        "parseJSON": [Function],
        "rules": {
          "array-bracket-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce line breaks after opening and before closing array brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingClosingLinebreak": "A linebreak is required before ']'.",
                  "missingOpeningLinebreak": "A linebreak is required after '['.",
                  "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                  "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce line breaks after opening and before closing array brackets",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-bracket-newline",
                "ruleName": "array-bracket-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingClosingLinebreak": "A linebreak is required before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "minItems": {
                          "minimum": 0,
                          "type": [
                            "integer",
                            "null",
                          ],
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "array-bracket-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow or enforce spaces inside of brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                  "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInArrays": {
                        "type": "boolean",
                      },
                      "objectsInArrays": {
                        "type": "boolean",
                      },
                      "singleValue": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow or enforce spaces inside of brackets",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-bracket-spacing",
                "ruleName": "array-bracket-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInArrays": {
                      "type": "boolean",
                    },
                    "objectsInArrays": {
                      "type": "boolean",
                    },
                    "singleValue": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "array-element-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce line breaks between array elements",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingLineBreak": "There should be a linebreak after this element.",
                  "unexpectedLineBreak": "There should be no linebreak here.",
                },
                "schema": {
                  "definitions": {
                    "basicConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/basicConfig",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "ArrayPattern": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "JSONArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce line breaks between array elements",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-element-newline",
                "ruleName": "array-element-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingLineBreak": "There should be a linebreak after this element.",
                "unexpectedLineBreak": "There should be no linebreak here.",
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ArrayExpression": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "ArrayPattern": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "JSONArrayExpression": {
                            "$ref": "#/definitions/basicConfig",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "auto": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "apply jsonc rules similar to your configured ESLint core rules",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {},
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "apply jsonc rules similar to your configured ESLint core rules",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/auto",
                "ruleName": "auto",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/auto.html",
              },
              "fixable": "code",
              "messages": {},
              "schema": [],
              "type": "suggestion",
            },
          },
          "comma-dangle": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require or disallow trailing commas",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "missing": "Missing trailing comma.",
                  "unexpected": "Unexpected trailing comma.",
                },
                "schema": {
                  "additionalItems": false,
                  "definitions": {
                    "value": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                    "valueWithIgnore": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "ignore",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/value",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arrays": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "exports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "functions": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "imports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "objects": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "require or disallow trailing commas",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                ],
                "ruleId": "jsonc/comma-dangle",
                "ruleName": "comma-dangle",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html",
              },
              "fixable": "code",
              "messages": {
                "missing": "Missing trailing comma.",
                "unexpected": "Unexpected trailing comma.",
              },
              "schema": {
                "additionalItems": false,
                "definitions": {
                  "value": {
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline",
                    ],
                    "type": "string",
                  },
                  "valueWithIgnore": {
                    "enum": [
                      "always-multiline",
                      "always",
                      "ignore",
                      "never",
                      "only-multiline",
                    ],
                    "type": "string",
                  },
                },
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/value",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "arrays": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "exports": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "functions": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "imports": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "objects": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "comma-style": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent comma style",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "expectedCommaFirst": "',' should be placed first.",
                  "expectedCommaLast": "',' should be placed last.",
                  "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                },
                "schema": [
                  {
                    "enum": [
                      "first",
                      "last",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent comma style",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/comma-style",
                "ruleName": "comma-style",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html",
              },
              "fixable": "code",
              "messages": {
                "expectedCommaFirst": "',' should be placed first.",
                "expectedCommaLast": "',' should be placed last.",
                "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
              },
              "schema": [
                {
                  "enum": [
                    "first",
                    "last",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "indent": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent indentation",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "tab",
                        ],
                        "type": "string",
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ArrayExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "CallExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "arguments": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionDeclaration": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "ImportDeclaration": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "MemberExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "ObjectExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "StaticBlock": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      "SwitchCase": {
                        "default": 0,
                        "minimum": 0,
                        "type": "integer",
                      },
                      "VariableDeclarator": {
                        "oneOf": [
                          {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "const": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "let": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "var": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "flatTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoredNodes": {
                        "items": {
                          "not": {
                            "pattern": ":exit$",
                          },
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "offsetTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "outerIIFEBody": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent indentation",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/indent",
                "ruleName": "indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "tab",
                      ],
                      "type": "string",
                    },
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "ArrayExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "CallExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "arguments": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "FunctionDeclaration": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "parameters": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "FunctionExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "parameters": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "ImportDeclaration": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "MemberExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "ObjectExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "StaticBlock": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                      },
                      "type": "object",
                    },
                    "SwitchCase": {
                      "default": 0,
                      "minimum": 0,
                      "type": "integer",
                    },
                    "VariableDeclarator": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "const": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "let": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "var": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "flatTernaryExpressions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoredNodes": {
                      "items": {
                        "not": {
                          "pattern": ":exit$",
                        },
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "offsetTernaryExpressions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "outerIIFEBody": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "key-name-casing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce naming convention to property key names",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "messages": {
                  "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "PascalCase": {
                        "default": false,
                        "type": "boolean",
                      },
                      "SCREAMING_SNAKE_CASE": {
                        "default": false,
                        "type": "boolean",
                      },
                      "camelCase": {
                        "default": true,
                        "type": "boolean",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "kebab-case": {
                        "default": false,
                        "type": "boolean",
                      },
                      "snake_case": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce naming convention to property key names",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/key-name-casing",
                "ruleName": "key-name-casing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html",
              },
              "messages": {
                "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "PascalCase": {
                      "default": false,
                      "type": "boolean",
                    },
                    "SCREAMING_SNAKE_CASE": {
                      "default": false,
                      "type": "boolean",
                    },
                    "camelCase": {
                      "default": true,
                      "type": "boolean",
                    },
                    "ignores": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "kebab-case": {
                      "default": false,
                      "type": "boolean",
                    },
                    "snake_case": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "key-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing between keys and values in object literal properties",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "afterColon": {
                            "type": "boolean",
                          },
                          "align": {
                            "anyOf": [
                              {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "afterColon": {
                                    "type": "boolean",
                                  },
                                  "beforeColon": {
                                    "type": "boolean",
                                  },
                                  "mode": {
                                    "enum": [
                                      "strict",
                                      "minimum",
                                    ],
                                    "type": "string",
                                  },
                                  "on": {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "beforeColon": {
                            "type": "boolean",
                          },
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "align": {
                                "anyOf": [
                                  {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "afterColon": {
                                        "type": "boolean",
                                      },
                                      "beforeColon": {
                                        "type": "boolean",
                                      },
                                      "mode": {
                                        "enum": [
                                          "strict",
                                          "minimum",
                                        ],
                                        "type": "string",
                                      },
                                      "on": {
                                        "enum": [
                                          "colon",
                                          "value",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "align": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent spacing between keys and values in object literal properties",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/key-spacing",
                "ruleName": "key-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "align": {
                          "anyOf": [
                            {
                              "enum": [
                                "colon",
                                "value",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                      "type": "string",
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "align": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                            "on": {
                              "enum": [
                                "colon",
                                "value",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "no-bigint-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow BigInt literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "BigInt literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow BigInt literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-bigint-literals",
                "ruleName": "no-bigint-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-bigint-literals.html",
              },
              "messages": {
                "unexpected": "BigInt literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-binary-expression": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow binary expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "The binary expressions are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow binary expression",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-binary-expression",
                "ruleName": "no-binary-expression",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-expression.html",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "disallow": "The binary expressions are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-binary-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow binary numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Binary numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow binary numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-binary-numeric-literals",
                "ruleName": "no-binary-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Binary numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-comments": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow comments",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                  ],
                },
                "messages": {
                  "unexpected": "Unexpected comment.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow comments",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                ],
                "ruleId": "jsonc/no-comments",
                "ruleName": "no-comments",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-comments.html",
              },
              "messages": {
                "unexpected": "Unexpected comment.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-dupe-keys": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow duplicate keys in object literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Duplicate key '{{name}}'.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow duplicate keys in object literals",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-dupe-keys",
                "ruleName": "no-dupe-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-dupe-keys.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Duplicate key '{{name}}'.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "problem",
            },
          },
          "no-escape-sequence-in-identifier": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow escape sequences in identifiers.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Escape sequence in identifiers should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow escape sequences in identifiers.",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-escape-sequence-in-identifier",
                "ruleName": "no-escape-sequence-in-identifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-escape-sequence-in-identifier.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Escape sequence in identifiers should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-floating-decimal": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow leading or trailing decimal points in numeric literals",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "leading": "A leading decimal point can be confused with a dot.",
                  "trailing": "A trailing decimal point can be confused with a dot.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow leading or trailing decimal points in numeric literals",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-floating-decimal",
                "ruleName": "no-floating-decimal",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-floating-decimal.html",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "leading": "A leading decimal point can be confused with a dot.",
                "trailing": "A trailing decimal point can be confused with a dot.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-hexadecimal-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow hexadecimal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Hexadecimal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow hexadecimal numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-hexadecimal-numeric-literals",
                "ruleName": "no-hexadecimal-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-hexadecimal-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Hexadecimal numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-infinity": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow Infinity",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "messages": {
                  "disallow": "Infinity should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow Infinity",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-infinity",
                "ruleName": "no-infinity",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-infinity.html",
              },
              "messages": {
                "disallow": "Infinity should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-irregular-whitespace": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "defaultOptions": [
                  {
                    "skipComments": false,
                    "skipJSXText": false,
                    "skipRegExps": false,
                    "skipStrings": true,
                    "skipTemplates": false,
                  },
                ],
                "deprecated": false,
                "docs": {
                  "description": "disallow irregular whitespace",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noIrregularWhitespace": "Irregular whitespace not allowed.",
                },
                "replacedBy": [],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "skipComments": {
                        "type": "boolean",
                      },
                      "skipJSXText": {
                        "type": "boolean",
                      },
                      "skipRegExps": {
                        "type": "boolean",
                      },
                      "skipStrings": {
                        "type": "boolean",
                      },
                      "skipTemplates": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "meta": {
              "defaultOptions": [
                {
                  "skipComments": false,
                  "skipJSXText": false,
                  "skipRegExps": false,
                  "skipStrings": true,
                  "skipTemplates": false,
                },
              ],
              "deprecated": false,
              "docs": {
                "description": "disallow irregular whitespace",
                "extensionRule": true,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/no-irregular-whitespace",
                "ruleName": "no-irregular-whitespace",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "noIrregularWhitespace": "Irregular whitespace not allowed.",
              },
              "replacedBy": [],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "skipComments": {
                      "type": "boolean",
                    },
                    "skipJSXText": {
                      "type": "boolean",
                    },
                    "skipRegExps": {
                      "type": "boolean",
                    },
                    "skipStrings": {
                      "type": "boolean",
                    },
                    "skipTemplates": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-multi-str": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow multiline strings",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "multilineString": "Multiline support is limited to JSON5 only.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow multiline strings",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-multi-str",
                "ruleName": "no-multi-str",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-multi-str.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "multilineString": "Multiline support is limited to JSON5 only.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-nan": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow NaN",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "messages": {
                  "disallow": "NaN should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow NaN",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-nan",
                "ruleName": "no-nan",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-nan.html",
              },
              "messages": {
                "disallow": "NaN should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-number-props": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow number property keys",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The number property keys are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow number property keys",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-number-props",
                "ruleName": "no-number-props",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-number-props.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "The number property keys are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-numeric-separators": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow numeric separators",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Numeric separators are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow numeric separators",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-numeric-separators",
                "ruleName": "no-numeric-separators",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-numeric-separators.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Numeric separators are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-octal": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow legacy octal literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noOctal": "Octal literals should not be used.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow legacy octal literals",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-octal",
                "ruleName": "no-octal",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "noOctal": "Octal literals should not be used.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-octal-escape": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow octal escape sequences in string literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow octal escape sequences in string literals",
                "extensionRule": true,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/no-octal-escape",
                "ruleName": "no-octal-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-escape.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-octal-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow octal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Octal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow octal numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-octal-numeric-literals",
                "ruleName": "no-octal-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Octal numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-parenthesized": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow parentheses around the expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "Parentheses around expression should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow parentheses around the expression",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-parenthesized",
                "ruleName": "no-parenthesized",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-parenthesized.html",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "disallow": "Parentheses around expression should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-plus-sign": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow plus sign",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Plus sign should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow plus sign",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-plus-sign",
                "ruleName": "no-plus-sign",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-plus-sign.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Plus sign should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-regexp-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow RegExp literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "RegExp literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow RegExp literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-regexp-literals",
                "ruleName": "no-regexp-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-regexp-literals.html",
              },
              "messages": {
                "unexpected": "RegExp literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-sparse-arrays": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow sparse arrays",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpectedSparseArray": "Unexpected comma in middle of array.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow sparse arrays",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-sparse-arrays",
                "ruleName": "no-sparse-arrays",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-sparse-arrays.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "unexpectedSparseArray": "Unexpected comma in middle of array.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "problem",
            },
          },
          "no-template-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow template literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The template literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow template literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-template-literals",
                "ruleName": "no-template-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-template-literals.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "The template literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-undefined-value": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow \`undefined\`",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "\`undefined\` is not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow \`undefined\`",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-undefined-value",
                "ruleName": "no-undefined-value",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-undefined-value.html",
              },
              "messages": {
                "unexpected": "\`undefined\` is not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unicode-codepoint-escapes": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow Unicode code point escape sequences.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Unicode code point escape sequence should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow Unicode code point escape sequences.",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-unicode-codepoint-escapes",
                "ruleName": "no-unicode-codepoint-escapes",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-unicode-codepoint-escapes.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Unicode code point escape sequence should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-useless-escape": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "defaultOptions": [
                  {
                    "allowRegexCharacters": [],
                  },
                ],
                "deprecated": false,
                "docs": {
                  "description": "disallow unnecessary escape usage",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": true,
                "messages": {
                  "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                  "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                  "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                  "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                },
                "replacedBy": [],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowRegexCharacters": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "meta": {
              "defaultOptions": [
                {
                  "allowRegexCharacters": [],
                },
              ],
              "deprecated": false,
              "docs": {
                "description": "disallow unnecessary escape usage",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-useless-escape",
                "ruleName": "no-useless-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-useless-escape.html",
              },
              "fixable": undefined,
              "hasSuggestions": true,
              "messages": {
                "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
              },
              "replacedBy": [],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowRegexCharacters": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "object-curly-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent line breaks inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                  "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                  "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                  "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "consistent": {
                                "type": "boolean",
                              },
                              "minProperties": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ExportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ImportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectExpression": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectPattern": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent line breaks inside braces",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-curly-newline",
                "ruleName": "object-curly-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "consistent": {
                              "type": "boolean",
                            },
                            "minProperties": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": {
                        "ExportDeclaration": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ImportDeclaration": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ObjectExpression": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ObjectPattern": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "object-curly-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInObjects": {
                        "type": "boolean",
                      },
                      "objectsInObjects": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent spacing inside braces",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-curly-spacing",
                "ruleName": "object-curly-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean",
                    },
                    "objectsInObjects": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "object-property-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce placing object properties on separate lines",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "propertiesOnNewline": "Object properties must go on a new line.",
                  "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAllPropertiesOnSameLine": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowMultiplePropertiesPerLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce placing object properties on separate lines",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-property-newline",
                "ruleName": "object-property-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "propertiesOnNewline": "Object properties must go on a new line.",
                "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAllPropertiesOnSameLine": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowMultiplePropertiesPerLine": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "quote-props": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require quotes around object literal property names",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                  "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                  "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                  "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                  "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                  "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                  "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "keywords": {
                              "type": "boolean",
                            },
                            "numbers": {
                              "type": "boolean",
                            },
                            "unnecessary": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "require quotes around object literal property names",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/quote-props",
                "ruleName": "quote-props",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html",
              },
              "fixable": "code",
              "messages": {
                "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed",
                        ],
                        "type": "string",
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "keywords": {
                            "type": "boolean",
                          },
                          "numbers": {
                            "type": "boolean",
                          },
                          "unnecessary": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "layout",
            },
          },
          "quotes": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce use of double or single quotes",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "wrongQuotes": "Strings must use {{description}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "single",
                      "double",
                      "backtick",
                    ],
                    "type": "string",
                  },
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "avoid-escape",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowTemplateLiterals": {
                            "type": "boolean",
                          },
                          "avoidEscape": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce use of double or single quotes",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/quotes",
                "ruleName": "quotes",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html",
              },
              "fixable": "code",
              "messages": {
                "wrongQuotes": "Strings must use {{description}}.",
              },
              "schema": [
                {
                  "enum": [
                    "single",
                    "double",
                    "backtick",
                  ],
                  "type": "string",
                },
                {
                  "anyOf": [
                    {
                      "enum": [
                        "avoid-escape",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowTemplateLiterals": {
                          "type": "boolean",
                        },
                        "avoidEscape": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "sort-array-values": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require array values to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                },
                "schema": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "minValues": {
                        "minimum": 2,
                        "type": "integer",
                      },
                      "order": {
                        "oneOf": [
                          {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "order": {
                                      "additionalProperties": false,
                                      "properties": {
                                        "caseSensitive": {
                                          "type": "boolean",
                                        },
                                        "natural": {
                                          "type": "boolean",
                                        },
                                        "type": {
                                          "enum": [
                                            "asc",
                                            "desc",
                                          ],
                                        },
                                      },
                                      "type": "object",
                                    },
                                    "valuePattern": {
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                              "type": {
                                "enum": [
                                  "asc",
                                  "desc",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "pathPattern": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "pathPattern",
                      "order",
                    ],
                    "type": "object",
                  },
                  "minItems": 1,
                  "type": "array",
                },
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "require array values to be sorted",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/sort-array-values",
                "ruleName": "sort-array-values",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html",
              },
              "fixable": "code",
              "messages": {
                "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
              },
              "schema": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "minValues": {
                      "minimum": 2,
                      "type": "integer",
                    },
                    "order": {
                      "oneOf": [
                        {
                          "items": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "order": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "caseSensitive": {
                                        "type": "boolean",
                                      },
                                      "natural": {
                                        "type": "boolean",
                                      },
                                      "type": {
                                        "enum": [
                                          "asc",
                                          "desc",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                  "valuePattern": {
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                            "type": {
                              "enum": [
                                "asc",
                                "desc",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "pathPattern": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "pathPattern",
                    "order",
                  ],
                  "type": "object",
                },
                "minItems": 1,
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "sort-keys": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require object keys to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "hasProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "order": {
                            "oneOf": [
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "keyPattern": {
                                          "type": "string",
                                        },
                                        "order": {
                                          "additionalProperties": false,
                                          "properties": {
                                            "caseSensitive": {
                                              "type": "boolean",
                                            },
                                            "natural": {
                                              "type": "boolean",
                                            },
                                            "type": {
                                              "enum": [
                                                "asc",
                                                "desc",
                                              ],
                                            },
                                          },
                                          "type": "object",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "caseSensitive": {
                                    "type": "boolean",
                                  },
                                  "natural": {
                                    "type": "boolean",
                                  },
                                  "type": {
                                    "enum": [
                                      "asc",
                                      "desc",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "pathPattern": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "pathPattern",
                          "order",
                        ],
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "asc",
                            "desc",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "require object keys to be sorted",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/sort-keys",
                "ruleName": "sort-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html",
              },
              "fixable": "code",
              "messages": {
                "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
              },
              "schema": {
                "oneOf": [
                  {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "allowLineSeparatedGroups": {
                          "type": "boolean",
                        },
                        "hasProperties": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "minKeys": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "keyPattern": {
                                        "type": "string",
                                      },
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "asc",
                          "desc",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "caseSensitive": {
                            "type": "boolean",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "natural": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "space-unary-ops": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow spaces after unary operators",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "whitespace",
                "messages": {
                  "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                  "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                  "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                  "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "nonwords": {
                        "default": false,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                      "words": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow spaces after unary operators",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/space-unary-ops",
                "ruleName": "space-unary-ops",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html",
              },
              "fixable": "whitespace",
              "messages": {
                "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "nonwords": {
                      "default": false,
                      "type": "boolean",
                    },
                    "overrides": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                    "words": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "valid-json-number": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow invalid number for JSON",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "invalid": "Invalid number for JSON.",
                  "invalidBinary": "Binary literals are not allowed in JSON.",
                  "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                  "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                  "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                  "invalidOctal": "Octal literals are not allowed in JSON.",
                  "invalidPlus": "Plus signs are not allowed in JSON.",
                  "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                  "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow invalid number for JSON",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/valid-json-number",
                "ruleName": "valid-json-number",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/valid-json-number.html",
              },
              "fixable": "code",
              "messages": {
                "invalid": "Invalid number for JSON.",
                "invalidBinary": "Binary literals are not allowed in JSON.",
                "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                "invalidOctal": "Octal literals are not allowed in JSON.",
                "invalidPlus": "Plus signs are not allowed in JSON.",
                "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "vue-custom-block/no-parsing-error": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow parsing errors in Vue custom blocks",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "json5",
                    "jsonc",
                  ],
                },
                "messages": {},
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow parsing errors in Vue custom blocks",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "json5",
                  "jsonc",
                ],
                "ruleId": "jsonc/vue-custom-block/no-parsing-error",
                "ruleName": "vue-custom-block/no-parsing-error",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/vue-custom-block/no-parsing-error.html",
              },
              "messages": {},
              "schema": [],
              "type": "problem",
            },
          },
        },
        "traverseNodes": [Function],
      },
    },
  },
  {
    "files": [
      "*.json",
      "**/*.json",
      "*.json5",
      "**/*.json5",
      "*.jsonc",
      "**/*.jsonc",
    ],
    "languageOptions": {
      "parser": {
        "VisitorKeys": {
          "ArrayExpression": [
            "elements",
          ],
          "ArrayPattern": [
            "elements",
          ],
          "ArrowFunctionExpression": [
            "params",
            "body",
          ],
          "AssignmentExpression": [
            "left",
            "right",
          ],
          "AssignmentPattern": [
            "left",
            "right",
          ],
          "AwaitExpression": [
            "argument",
          ],
          "BinaryExpression": [
            "left",
            "right",
          ],
          "BlockStatement": [
            "body",
          ],
          "BreakStatement": [
            "label",
          ],
          "CallExpression": [
            "callee",
            "arguments",
          ],
          "CatchClause": [
            "param",
            "body",
          ],
          "ChainExpression": [
            "expression",
          ],
          "ClassBody": [
            "body",
          ],
          "ClassDeclaration": [
            "id",
            "superClass",
            "body",
          ],
          "ClassExpression": [
            "id",
            "superClass",
            "body",
          ],
          "ConditionalExpression": [
            "test",
            "consequent",
            "alternate",
          ],
          "ContinueStatement": [
            "label",
          ],
          "DebuggerStatement": [],
          "DoWhileStatement": [
            "body",
            "test",
          ],
          "EmptyStatement": [],
          "ExperimentalRestProperty": [
            "argument",
          ],
          "ExperimentalSpreadProperty": [
            "argument",
          ],
          "ExportAllDeclaration": [
            "exported",
            "source",
            "attributes",
          ],
          "ExportDefaultDeclaration": [
            "declaration",
          ],
          "ExportNamedDeclaration": [
            "declaration",
            "specifiers",
            "source",
            "attributes",
          ],
          "ExportSpecifier": [
            "local",
            "exported",
          ],
          "ExpressionStatement": [
            "expression",
          ],
          "ForInStatement": [
            "left",
            "right",
            "body",
          ],
          "ForOfStatement": [
            "left",
            "right",
            "body",
          ],
          "ForStatement": [
            "init",
            "test",
            "update",
            "body",
          ],
          "FunctionDeclaration": [
            "id",
            "params",
            "body",
          ],
          "FunctionExpression": [
            "id",
            "params",
            "body",
          ],
          "Identifier": [],
          "IfStatement": [
            "test",
            "consequent",
            "alternate",
          ],
          "ImportAttribute": [
            "key",
            "value",
          ],
          "ImportDeclaration": [
            "specifiers",
            "source",
            "attributes",
          ],
          "ImportDefaultSpecifier": [
            "local",
          ],
          "ImportExpression": [
            "source",
            "options",
          ],
          "ImportNamespaceSpecifier": [
            "local",
          ],
          "ImportSpecifier": [
            "imported",
            "local",
          ],
          "JSONArrayExpression": [
            "elements",
          ],
          "JSONBinaryExpression": [
            "left",
            "right",
          ],
          "JSONExpressionStatement": [
            "expression",
          ],
          "JSONIdentifier": [],
          "JSONLiteral": [],
          "JSONObjectExpression": [
            "properties",
          ],
          "JSONProperty": [
            "key",
            "value",
          ],
          "JSONTemplateElement": [],
          "JSONTemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "JSONUnaryExpression": [
            "argument",
          ],
          "JSXAttribute": [
            "name",
            "value",
          ],
          "JSXClosingElement": [
            "name",
          ],
          "JSXClosingFragment": [],
          "JSXElement": [
            "openingElement",
            "children",
            "closingElement",
          ],
          "JSXEmptyExpression": [],
          "JSXExpressionContainer": [
            "expression",
          ],
          "JSXFragment": [
            "openingFragment",
            "children",
            "closingFragment",
          ],
          "JSXIdentifier": [],
          "JSXMemberExpression": [
            "object",
            "property",
          ],
          "JSXNamespacedName": [
            "namespace",
            "name",
          ],
          "JSXOpeningElement": [
            "name",
            "attributes",
          ],
          "JSXOpeningFragment": [],
          "JSXSpreadAttribute": [
            "argument",
          ],
          "JSXSpreadChild": [
            "expression",
          ],
          "JSXText": [],
          "LabeledStatement": [
            "label",
            "body",
          ],
          "Literal": [],
          "LogicalExpression": [
            "left",
            "right",
          ],
          "MemberExpression": [
            "object",
            "property",
          ],
          "MetaProperty": [
            "meta",
            "property",
          ],
          "MethodDefinition": [
            "key",
            "value",
          ],
          "NewExpression": [
            "callee",
            "arguments",
          ],
          "ObjectExpression": [
            "properties",
          ],
          "ObjectPattern": [
            "properties",
          ],
          "PrivateIdentifier": [],
          "Program": [
            "body",
          ],
          "Property": [
            "key",
            "value",
          ],
          "PropertyDefinition": [
            "key",
            "value",
          ],
          "RestElement": [
            "argument",
          ],
          "ReturnStatement": [
            "argument",
          ],
          "SequenceExpression": [
            "expressions",
          ],
          "SpreadElement": [
            "argument",
          ],
          "StaticBlock": [
            "body",
          ],
          "Super": [],
          "SwitchCase": [
            "test",
            "consequent",
          ],
          "SwitchStatement": [
            "discriminant",
            "cases",
          ],
          "TaggedTemplateExpression": [
            "tag",
            "quasi",
          ],
          "TemplateElement": [],
          "TemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "ThisExpression": [],
          "ThrowStatement": [
            "argument",
          ],
          "TryStatement": [
            "block",
            "handler",
            "finalizer",
          ],
          "UnaryExpression": [
            "argument",
          ],
          "UpdateExpression": [
            "argument",
          ],
          "VariableDeclaration": [
            "declarations",
          ],
          "VariableDeclarator": [
            "id",
            "init",
          ],
          "WhileStatement": [
            "test",
            "body",
          ],
          "WithStatement": [
            "object",
            "body",
          ],
          "YieldExpression": [
            "argument",
          ],
        },
        "getStaticJSONValue": [Function],
        "isExpression": [Function],
        "isNumberIdentifier": [Function],
        "isUndefinedIdentifier": [Function],
        "meta": {
          "name": "jsonc-eslint-parser",
          "version": "2.4.0",
        },
        "name": "jsonc-eslint-parser",
        "parseForESLint": [Function],
        "parseJSON": [Function],
        "traverseNodes": [Function],
      },
    },
    "rules": {
      "no-unused-expressions": "off",
      "no-unused-vars": "off",
      "strict": "off",
    },
  },
  {
    "rules": {
      "jsonc/comma-dangle": "error",
      "jsonc/no-bigint-literals": "error",
      "jsonc/no-binary-expression": "error",
      "jsonc/no-binary-numeric-literals": "error",
      "jsonc/no-comments": "error",
      "jsonc/no-dupe-keys": "error",
      "jsonc/no-escape-sequence-in-identifier": "error",
      "jsonc/no-floating-decimal": "error",
      "jsonc/no-hexadecimal-numeric-literals": "error",
      "jsonc/no-infinity": "error",
      "jsonc/no-multi-str": "error",
      "jsonc/no-nan": "error",
      "jsonc/no-number-props": "error",
      "jsonc/no-numeric-separators": "error",
      "jsonc/no-octal": "error",
      "jsonc/no-octal-numeric-literals": "error",
      "jsonc/no-parenthesized": "error",
      "jsonc/no-plus-sign": "error",
      "jsonc/no-regexp-literals": "error",
      "jsonc/no-sparse-arrays": "error",
      "jsonc/no-template-literals": "error",
      "jsonc/no-undefined-value": "error",
      "jsonc/no-unicode-codepoint-escapes": "error",
      "jsonc/no-useless-escape": "error",
      "jsonc/quote-props": "error",
      "jsonc/quotes": "error",
      "jsonc/space-unary-ops": "error",
      "jsonc/valid-json-number": "error",
      "jsonc/vue-custom-block/no-parsing-error": "error",
    },
  },
  {
    "plugins": {
      "jsonc": {
        "configs": {
          "all": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/array-bracket-newline": "error",
              "jsonc/array-bracket-spacing": "error",
              "jsonc/array-element-newline": "error",
              "jsonc/auto": "error",
              "jsonc/comma-dangle": "error",
              "jsonc/comma-style": "error",
              "jsonc/indent": "error",
              "jsonc/key-name-casing": "error",
              "jsonc/key-spacing": "error",
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-comments": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-irregular-whitespace": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-escape": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/object-curly-newline": "error",
              "jsonc/object-curly-spacing": "error",
              "jsonc/object-property-newline": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/sort-keys": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "auto-config": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/auto": "error",
            },
          },
          "base": {
            "overrides": [
              {
                "files": [
                  "*.json",
                  "*.json5",
                  "*.jsonc",
                ],
                "parser": "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/jsonc-eslint-parser/lib/index.js",
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
            ],
            "plugins": [
              "jsonc",
            ],
          },
          "flat/all": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/array-bracket-newline": "error",
                "jsonc/array-bracket-spacing": "error",
                "jsonc/array-element-newline": "error",
                "jsonc/auto": "error",
                "jsonc/comma-dangle": "error",
                "jsonc/comma-style": "error",
                "jsonc/indent": "error",
                "jsonc/key-name-casing": "error",
                "jsonc/key-spacing": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-irregular-whitespace": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-escape": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/object-curly-newline": "error",
                "jsonc/object-curly-spacing": "error",
                "jsonc/object-property-newline": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/sort-keys": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/base": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
          ],
          "flat/prettier": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/array-bracket-newline": "off",
                "jsonc/array-bracket-spacing": "off",
                "jsonc/array-element-newline": "off",
                "jsonc/comma-dangle": "off",
                "jsonc/comma-style": "off",
                "jsonc/indent": "off",
                "jsonc/key-spacing": "off",
                "jsonc/no-floating-decimal": "off",
                "jsonc/object-curly-newline": "off",
                "jsonc/object-curly-spacing": "off",
                "jsonc/object-property-newline": "off",
                "jsonc/quote-props": "off",
                "jsonc/quotes": "off",
                "jsonc/space-unary-ops": "off",
              },
            },
          ],
          "flat/recommended-with-json": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/comma-dangle": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/recommended-with-json5": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/recommended-with-jsonc": [
            [Circular],
            {
              "files": [
                "*.json",
                "**/*.json",
                "*.json5",
                "**/*.json5",
                "*.jsonc",
                "**/*.jsonc",
              ],
              "languageOptions": {
                "parser": {
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                      "attributes",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ExportSpecifier": [
                      "local",
                      "exported",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportAttribute": [
                      "key",
                      "value",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                      "attributes",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                      "options",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSONArrayExpression": [
                      "elements",
                    ],
                    "JSONBinaryExpression": [
                      "left",
                      "right",
                    ],
                    "JSONExpressionStatement": [
                      "expression",
                    ],
                    "JSONIdentifier": [],
                    "JSONLiteral": [],
                    "JSONObjectExpression": [
                      "properties",
                    ],
                    "JSONProperty": [
                      "key",
                      "value",
                    ],
                    "JSONTemplateElement": [],
                    "JSONTemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "JSONUnaryExpression": [
                      "argument",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticJSONValue": [Function],
                  "isExpression": [Function],
                  "isNumberIdentifier": [Function],
                  "isUndefinedIdentifier": [Function],
                  "meta": {
                    "name": "jsonc-eslint-parser",
                    "version": "2.4.0",
                  },
                  "name": "jsonc-eslint-parser",
                  "parseForESLint": [Function],
                  "parseJSON": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-unused-expressions": "off",
                "no-unused-vars": "off",
                "strict": "off",
              },
            },
            {
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "prettier": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/array-bracket-newline": "off",
              "jsonc/array-bracket-spacing": "off",
              "jsonc/array-element-newline": "off",
              "jsonc/comma-dangle": "off",
              "jsonc/comma-style": "off",
              "jsonc/indent": "off",
              "jsonc/key-spacing": "off",
              "jsonc/no-floating-decimal": "off",
              "jsonc/object-curly-newline": "off",
              "jsonc/object-curly-spacing": "off",
              "jsonc/object-property-newline": "off",
              "jsonc/quote-props": "off",
              "jsonc/quotes": "off",
              "jsonc/space-unary-ops": "off",
            },
          },
          "recommended-with-json": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/comma-dangle": "error",
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-comments": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "recommended-with-json5": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
          "recommended-with-jsonc": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
            ],
            "rules": {
              "jsonc/no-bigint-literals": "error",
              "jsonc/no-binary-expression": "error",
              "jsonc/no-binary-numeric-literals": "error",
              "jsonc/no-dupe-keys": "error",
              "jsonc/no-escape-sequence-in-identifier": "error",
              "jsonc/no-floating-decimal": "error",
              "jsonc/no-hexadecimal-numeric-literals": "error",
              "jsonc/no-infinity": "error",
              "jsonc/no-multi-str": "error",
              "jsonc/no-nan": "error",
              "jsonc/no-number-props": "error",
              "jsonc/no-numeric-separators": "error",
              "jsonc/no-octal": "error",
              "jsonc/no-octal-numeric-literals": "error",
              "jsonc/no-parenthesized": "error",
              "jsonc/no-plus-sign": "error",
              "jsonc/no-regexp-literals": "error",
              "jsonc/no-sparse-arrays": "error",
              "jsonc/no-template-literals": "error",
              "jsonc/no-undefined-value": "error",
              "jsonc/no-unicode-codepoint-escapes": "error",
              "jsonc/no-useless-escape": "error",
              "jsonc/quote-props": "error",
              "jsonc/quotes": "error",
              "jsonc/space-unary-ops": "error",
              "jsonc/valid-json-number": "error",
              "jsonc/vue-custom-block/no-parsing-error": "error",
            },
          },
        },
        "default": {
          "configs": {
            "all": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/array-bracket-newline": "error",
                "jsonc/array-bracket-spacing": "error",
                "jsonc/array-element-newline": "error",
                "jsonc/auto": "error",
                "jsonc/comma-dangle": "error",
                "jsonc/comma-style": "error",
                "jsonc/indent": "error",
                "jsonc/key-name-casing": "error",
                "jsonc/key-spacing": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-irregular-whitespace": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-escape": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/object-curly-newline": "error",
                "jsonc/object-curly-spacing": "error",
                "jsonc/object-property-newline": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/sort-keys": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "auto-config": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/auto": "error",
              },
            },
            "base": {
              "overrides": [
                {
                  "files": [
                    "*.json",
                    "*.json5",
                    "*.jsonc",
                  ],
                  "parser": "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/jsonc-eslint-parser/lib/index.js",
                  "rules": {
                    "no-unused-expressions": "off",
                    "no-unused-vars": "off",
                    "strict": "off",
                  },
                },
              ],
              "plugins": [
                "jsonc",
              ],
            },
            "flat/all": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/array-bracket-newline": "error",
                  "jsonc/array-bracket-spacing": "error",
                  "jsonc/array-element-newline": "error",
                  "jsonc/auto": "error",
                  "jsonc/comma-dangle": "error",
                  "jsonc/comma-style": "error",
                  "jsonc/indent": "error",
                  "jsonc/key-name-casing": "error",
                  "jsonc/key-spacing": "error",
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-comments": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-floating-decimal": "error",
                  "jsonc/no-hexadecimal-numeric-literals": "error",
                  "jsonc/no-infinity": "error",
                  "jsonc/no-irregular-whitespace": "error",
                  "jsonc/no-multi-str": "error",
                  "jsonc/no-nan": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-escape": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-plus-sign": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/object-curly-newline": "error",
                  "jsonc/object-curly-spacing": "error",
                  "jsonc/object-property-newline": "error",
                  "jsonc/quote-props": "error",
                  "jsonc/quotes": "error",
                  "jsonc/sort-keys": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/valid-json-number": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "flat/base": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
            ],
            "flat/prettier": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/array-bracket-newline": "off",
                  "jsonc/array-bracket-spacing": "off",
                  "jsonc/array-element-newline": "off",
                  "jsonc/comma-dangle": "off",
                  "jsonc/comma-style": "off",
                  "jsonc/indent": "off",
                  "jsonc/key-spacing": "off",
                  "jsonc/no-floating-decimal": "off",
                  "jsonc/object-curly-newline": "off",
                  "jsonc/object-curly-spacing": "off",
                  "jsonc/object-property-newline": "off",
                  "jsonc/quote-props": "off",
                  "jsonc/quotes": "off",
                  "jsonc/space-unary-ops": "off",
                },
              },
            ],
            "flat/recommended-with-json": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/comma-dangle": "error",
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-comments": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-floating-decimal": "error",
                  "jsonc/no-hexadecimal-numeric-literals": "error",
                  "jsonc/no-infinity": "error",
                  "jsonc/no-multi-str": "error",
                  "jsonc/no-nan": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-plus-sign": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/quote-props": "error",
                  "jsonc/quotes": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/valid-json-number": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "flat/recommended-with-json5": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "flat/recommended-with-jsonc": [
              [Circular],
              {
                "files": [
                  "*.json",
                  "**/*.json",
                  "*.json5",
                  "**/*.json5",
                  "*.jsonc",
                  "**/*.jsonc",
                ],
                "languageOptions": {
                  "parser": {
                    "VisitorKeys": {
                      "ArrayExpression": [
                        "elements",
                      ],
                      "ArrayPattern": [
                        "elements",
                      ],
                      "ArrowFunctionExpression": [
                        "params",
                        "body",
                      ],
                      "AssignmentExpression": [
                        "left",
                        "right",
                      ],
                      "AssignmentPattern": [
                        "left",
                        "right",
                      ],
                      "AwaitExpression": [
                        "argument",
                      ],
                      "BinaryExpression": [
                        "left",
                        "right",
                      ],
                      "BlockStatement": [
                        "body",
                      ],
                      "BreakStatement": [
                        "label",
                      ],
                      "CallExpression": [
                        "callee",
                        "arguments",
                      ],
                      "CatchClause": [
                        "param",
                        "body",
                      ],
                      "ChainExpression": [
                        "expression",
                      ],
                      "ClassBody": [
                        "body",
                      ],
                      "ClassDeclaration": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ClassExpression": [
                        "id",
                        "superClass",
                        "body",
                      ],
                      "ConditionalExpression": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ContinueStatement": [
                        "label",
                      ],
                      "DebuggerStatement": [],
                      "DoWhileStatement": [
                        "body",
                        "test",
                      ],
                      "EmptyStatement": [],
                      "ExperimentalRestProperty": [
                        "argument",
                      ],
                      "ExperimentalSpreadProperty": [
                        "argument",
                      ],
                      "ExportAllDeclaration": [
                        "exported",
                        "source",
                        "attributes",
                      ],
                      "ExportDefaultDeclaration": [
                        "declaration",
                      ],
                      "ExportNamedDeclaration": [
                        "declaration",
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ExportSpecifier": [
                        "local",
                        "exported",
                      ],
                      "ExpressionStatement": [
                        "expression",
                      ],
                      "ForInStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForOfStatement": [
                        "left",
                        "right",
                        "body",
                      ],
                      "ForStatement": [
                        "init",
                        "test",
                        "update",
                        "body",
                      ],
                      "FunctionDeclaration": [
                        "id",
                        "params",
                        "body",
                      ],
                      "FunctionExpression": [
                        "id",
                        "params",
                        "body",
                      ],
                      "Identifier": [],
                      "IfStatement": [
                        "test",
                        "consequent",
                        "alternate",
                      ],
                      "ImportAttribute": [
                        "key",
                        "value",
                      ],
                      "ImportDeclaration": [
                        "specifiers",
                        "source",
                        "attributes",
                      ],
                      "ImportDefaultSpecifier": [
                        "local",
                      ],
                      "ImportExpression": [
                        "source",
                        "options",
                      ],
                      "ImportNamespaceSpecifier": [
                        "local",
                      ],
                      "ImportSpecifier": [
                        "imported",
                        "local",
                      ],
                      "JSONArrayExpression": [
                        "elements",
                      ],
                      "JSONBinaryExpression": [
                        "left",
                        "right",
                      ],
                      "JSONExpressionStatement": [
                        "expression",
                      ],
                      "JSONIdentifier": [],
                      "JSONLiteral": [],
                      "JSONObjectExpression": [
                        "properties",
                      ],
                      "JSONProperty": [
                        "key",
                        "value",
                      ],
                      "JSONTemplateElement": [],
                      "JSONTemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "JSONUnaryExpression": [
                        "argument",
                      ],
                      "JSXAttribute": [
                        "name",
                        "value",
                      ],
                      "JSXClosingElement": [
                        "name",
                      ],
                      "JSXClosingFragment": [],
                      "JSXElement": [
                        "openingElement",
                        "children",
                        "closingElement",
                      ],
                      "JSXEmptyExpression": [],
                      "JSXExpressionContainer": [
                        "expression",
                      ],
                      "JSXFragment": [
                        "openingFragment",
                        "children",
                        "closingFragment",
                      ],
                      "JSXIdentifier": [],
                      "JSXMemberExpression": [
                        "object",
                        "property",
                      ],
                      "JSXNamespacedName": [
                        "namespace",
                        "name",
                      ],
                      "JSXOpeningElement": [
                        "name",
                        "attributes",
                      ],
                      "JSXOpeningFragment": [],
                      "JSXSpreadAttribute": [
                        "argument",
                      ],
                      "JSXSpreadChild": [
                        "expression",
                      ],
                      "JSXText": [],
                      "LabeledStatement": [
                        "label",
                        "body",
                      ],
                      "Literal": [],
                      "LogicalExpression": [
                        "left",
                        "right",
                      ],
                      "MemberExpression": [
                        "object",
                        "property",
                      ],
                      "MetaProperty": [
                        "meta",
                        "property",
                      ],
                      "MethodDefinition": [
                        "key",
                        "value",
                      ],
                      "NewExpression": [
                        "callee",
                        "arguments",
                      ],
                      "ObjectExpression": [
                        "properties",
                      ],
                      "ObjectPattern": [
                        "properties",
                      ],
                      "PrivateIdentifier": [],
                      "Program": [
                        "body",
                      ],
                      "Property": [
                        "key",
                        "value",
                      ],
                      "PropertyDefinition": [
                        "key",
                        "value",
                      ],
                      "RestElement": [
                        "argument",
                      ],
                      "ReturnStatement": [
                        "argument",
                      ],
                      "SequenceExpression": [
                        "expressions",
                      ],
                      "SpreadElement": [
                        "argument",
                      ],
                      "StaticBlock": [
                        "body",
                      ],
                      "Super": [],
                      "SwitchCase": [
                        "test",
                        "consequent",
                      ],
                      "SwitchStatement": [
                        "discriminant",
                        "cases",
                      ],
                      "TaggedTemplateExpression": [
                        "tag",
                        "quasi",
                      ],
                      "TemplateElement": [],
                      "TemplateLiteral": [
                        "quasis",
                        "expressions",
                      ],
                      "ThisExpression": [],
                      "ThrowStatement": [
                        "argument",
                      ],
                      "TryStatement": [
                        "block",
                        "handler",
                        "finalizer",
                      ],
                      "UnaryExpression": [
                        "argument",
                      ],
                      "UpdateExpression": [
                        "argument",
                      ],
                      "VariableDeclaration": [
                        "declarations",
                      ],
                      "VariableDeclarator": [
                        "id",
                        "init",
                      ],
                      "WhileStatement": [
                        "test",
                        "body",
                      ],
                      "WithStatement": [
                        "object",
                        "body",
                      ],
                      "YieldExpression": [
                        "argument",
                      ],
                    },
                    "getStaticJSONValue": [Function],
                    "isExpression": [Function],
                    "isNumberIdentifier": [Function],
                    "isUndefinedIdentifier": [Function],
                    "meta": {
                      "name": "jsonc-eslint-parser",
                      "version": "2.4.0",
                    },
                    "name": "jsonc-eslint-parser",
                    "parseForESLint": [Function],
                    "parseJSON": [Function],
                    "traverseNodes": [Function],
                  },
                },
                "rules": {
                  "no-unused-expressions": "off",
                  "no-unused-vars": "off",
                  "strict": "off",
                },
              },
              {
                "rules": {
                  "jsonc/no-bigint-literals": "error",
                  "jsonc/no-binary-expression": "error",
                  "jsonc/no-binary-numeric-literals": "error",
                  "jsonc/no-dupe-keys": "error",
                  "jsonc/no-escape-sequence-in-identifier": "error",
                  "jsonc/no-floating-decimal": "error",
                  "jsonc/no-hexadecimal-numeric-literals": "error",
                  "jsonc/no-infinity": "error",
                  "jsonc/no-multi-str": "error",
                  "jsonc/no-nan": "error",
                  "jsonc/no-number-props": "error",
                  "jsonc/no-numeric-separators": "error",
                  "jsonc/no-octal": "error",
                  "jsonc/no-octal-numeric-literals": "error",
                  "jsonc/no-parenthesized": "error",
                  "jsonc/no-plus-sign": "error",
                  "jsonc/no-regexp-literals": "error",
                  "jsonc/no-sparse-arrays": "error",
                  "jsonc/no-template-literals": "error",
                  "jsonc/no-undefined-value": "error",
                  "jsonc/no-unicode-codepoint-escapes": "error",
                  "jsonc/no-useless-escape": "error",
                  "jsonc/quote-props": "error",
                  "jsonc/quotes": "error",
                  "jsonc/space-unary-ops": "error",
                  "jsonc/valid-json-number": "error",
                  "jsonc/vue-custom-block/no-parsing-error": "error",
                },
              },
            ],
            "prettier": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/array-bracket-newline": "off",
                "jsonc/array-bracket-spacing": "off",
                "jsonc/array-element-newline": "off",
                "jsonc/comma-dangle": "off",
                "jsonc/comma-style": "off",
                "jsonc/indent": "off",
                "jsonc/key-spacing": "off",
                "jsonc/no-floating-decimal": "off",
                "jsonc/object-curly-newline": "off",
                "jsonc/object-curly-spacing": "off",
                "jsonc/object-property-newline": "off",
                "jsonc/quote-props": "off",
                "jsonc/quotes": "off",
                "jsonc/space-unary-ops": "off",
              },
            },
            "recommended-with-json": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/comma-dangle": "error",
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-comments": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "recommended-with-json5": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
            "recommended-with-jsonc": {
              "extends": [
                "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-jsonc/dist/configs/base.js",
              ],
              "rules": {
                "jsonc/no-bigint-literals": "error",
                "jsonc/no-binary-expression": "error",
                "jsonc/no-binary-numeric-literals": "error",
                "jsonc/no-dupe-keys": "error",
                "jsonc/no-escape-sequence-in-identifier": "error",
                "jsonc/no-floating-decimal": "error",
                "jsonc/no-hexadecimal-numeric-literals": "error",
                "jsonc/no-infinity": "error",
                "jsonc/no-multi-str": "error",
                "jsonc/no-nan": "error",
                "jsonc/no-number-props": "error",
                "jsonc/no-numeric-separators": "error",
                "jsonc/no-octal": "error",
                "jsonc/no-octal-numeric-literals": "error",
                "jsonc/no-parenthesized": "error",
                "jsonc/no-plus-sign": "error",
                "jsonc/no-regexp-literals": "error",
                "jsonc/no-sparse-arrays": "error",
                "jsonc/no-template-literals": "error",
                "jsonc/no-undefined-value": "error",
                "jsonc/no-unicode-codepoint-escapes": "error",
                "jsonc/no-useless-escape": "error",
                "jsonc/quote-props": "error",
                "jsonc/quotes": "error",
                "jsonc/space-unary-ops": "error",
                "jsonc/valid-json-number": "error",
                "jsonc/vue-custom-block/no-parsing-error": "error",
              },
            },
          },
          "getStaticJSONValue": [Function],
          "meta": {
            "name": "eslint-plugin-jsonc",
            "version": "2.20.1",
          },
          "parseForESLint": [Function],
          "parseJSON": [Function],
          "rules": {
            "array-bracket-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce line breaks after opening and before closing array brackets",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingClosingLinebreak": "A linebreak is required before ']'.",
                    "missingOpeningLinebreak": "A linebreak is required after '['.",
                    "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                    "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce line breaks after opening and before closing array brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-bracket-newline",
                  "ruleName": "array-bracket-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingClosingLinebreak": "A linebreak is required before ']'.",
                  "missingOpeningLinebreak": "A linebreak is required after '['.",
                  "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                  "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "array-bracket-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow or enforce spaces inside of brackets",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                    "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arraysInArrays": {
                          "type": "boolean",
                        },
                        "objectsInArrays": {
                          "type": "boolean",
                        },
                        "singleValue": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow or enforce spaces inside of brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-bracket-spacing",
                  "ruleName": "array-bracket-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                  "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInArrays": {
                        "type": "boolean",
                      },
                      "objectsInArrays": {
                        "type": "boolean",
                      },
                      "singleValue": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "array-element-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce line breaks between array elements",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "missingLineBreak": "There should be a linebreak after this element.",
                    "unexpectedLineBreak": "There should be no linebreak here.",
                  },
                  "schema": {
                    "definitions": {
                      "basicConfig": {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                              "consistent",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "minItems": {
                                "minimum": 0,
                                "type": [
                                  "integer",
                                  "null",
                                ],
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    },
                    "items": [
                      {
                        "oneOf": [
                          {
                            "$ref": "#/definitions/basicConfig",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "ArrayExpression": {
                                "$ref": "#/definitions/basicConfig",
                              },
                              "ArrayPattern": {
                                "$ref": "#/definitions/basicConfig",
                              },
                              "JSONArrayExpression": {
                                "$ref": "#/definitions/basicConfig",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce line breaks between array elements",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/array-element-newline",
                  "ruleName": "array-element-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "missingLineBreak": "There should be a linebreak after this element.",
                  "unexpectedLineBreak": "There should be no linebreak here.",
                },
                "schema": {
                  "definitions": {
                    "basicConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/basicConfig",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "ArrayPattern": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "JSONArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "auto": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "apply jsonc rules similar to your configured ESLint core rules",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {},
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "apply jsonc rules similar to your configured ESLint core rules",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/auto",
                  "ruleName": "auto",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/auto.html",
                },
                "fixable": "code",
                "messages": {},
                "schema": [],
                "type": "suggestion",
              },
            },
            "comma-dangle": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require or disallow trailing commas",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "missing": "Missing trailing comma.",
                    "unexpected": "Unexpected trailing comma.",
                  },
                  "schema": {
                    "additionalItems": false,
                    "definitions": {
                      "value": {
                        "enum": [
                          "always-multiline",
                          "always",
                          "never",
                          "only-multiline",
                        ],
                        "type": "string",
                      },
                      "valueWithIgnore": {
                        "enum": [
                          "always-multiline",
                          "always",
                          "ignore",
                          "never",
                          "only-multiline",
                        ],
                        "type": "string",
                      },
                    },
                    "items": [
                      {
                        "oneOf": [
                          {
                            "$ref": "#/definitions/value",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "arrays": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "exports": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "functions": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "imports": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                              "objects": {
                                "$ref": "#/definitions/valueWithIgnore",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "require or disallow trailing commas",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                  ],
                  "ruleId": "jsonc/comma-dangle",
                  "ruleName": "comma-dangle",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html",
                },
                "fixable": "code",
                "messages": {
                  "missing": "Missing trailing comma.",
                  "unexpected": "Unexpected trailing comma.",
                },
                "schema": {
                  "additionalItems": false,
                  "definitions": {
                    "value": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                    "valueWithIgnore": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "ignore",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/value",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arrays": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "exports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "functions": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "imports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "objects": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "comma-style": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent comma style",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "expectedCommaFirst": "',' should be placed first.",
                    "expectedCommaLast": "',' should be placed last.",
                    "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "first",
                        "last",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "exceptions": {
                          "additionalProperties": {
                            "type": "boolean",
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent comma style",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/comma-style",
                  "ruleName": "comma-style",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html",
                },
                "fixable": "code",
                "messages": {
                  "expectedCommaFirst": "',' should be placed first.",
                  "expectedCommaLast": "',' should be placed last.",
                  "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                },
                "schema": [
                  {
                    "enum": [
                      "first",
                      "last",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "indent": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent indentation",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "tab",
                          ],
                          "type": "string",
                        },
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "ArrayExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "CallExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "arguments": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "FunctionDeclaration": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "parameters": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "FunctionExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "parameters": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "ImportDeclaration": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "MemberExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "ObjectExpression": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "StaticBlock": {
                          "additionalProperties": false,
                          "properties": {
                            "body": {
                              "minimum": 0,
                              "type": "integer",
                            },
                          },
                          "type": "object",
                        },
                        "SwitchCase": {
                          "default": 0,
                          "minimum": 0,
                          "type": "integer",
                        },
                        "VariableDeclarator": {
                          "oneOf": [
                            {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "const": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                                "let": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                                "var": {
                                  "oneOf": [
                                    {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    {
                                      "enum": [
                                        "first",
                                        "off",
                                      ],
                                      "type": "string",
                                    },
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "flatTernaryExpressions": {
                          "default": false,
                          "type": "boolean",
                        },
                        "ignoreComments": {
                          "default": false,
                          "type": "boolean",
                        },
                        "ignoredNodes": {
                          "items": {
                            "not": {
                              "pattern": ":exit$",
                            },
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "offsetTernaryExpressions": {
                          "default": false,
                          "type": "boolean",
                        },
                        "outerIIFEBody": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent indentation",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/indent",
                  "ruleName": "indent",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "tab",
                        ],
                        "type": "string",
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ArrayExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "CallExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "arguments": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionDeclaration": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "ImportDeclaration": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "MemberExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "ObjectExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "StaticBlock": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      "SwitchCase": {
                        "default": 0,
                        "minimum": 0,
                        "type": "integer",
                      },
                      "VariableDeclarator": {
                        "oneOf": [
                          {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "const": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "let": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "var": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "flatTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoredNodes": {
                        "items": {
                          "not": {
                            "pattern": ":exit$",
                          },
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "offsetTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "outerIIFEBody": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "key-name-casing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce naming convention to property key names",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "messages": {
                    "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "PascalCase": {
                          "default": false,
                          "type": "boolean",
                        },
                        "SCREAMING_SNAKE_CASE": {
                          "default": false,
                          "type": "boolean",
                        },
                        "camelCase": {
                          "default": true,
                          "type": "boolean",
                        },
                        "ignores": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "kebab-case": {
                          "default": false,
                          "type": "boolean",
                        },
                        "snake_case": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce naming convention to property key names",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/key-name-casing",
                  "ruleName": "key-name-casing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html",
                },
                "messages": {
                  "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "PascalCase": {
                        "default": false,
                        "type": "boolean",
                      },
                      "SCREAMING_SNAKE_CASE": {
                        "default": false,
                        "type": "boolean",
                      },
                      "camelCase": {
                        "default": true,
                        "type": "boolean",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "kebab-case": {
                        "default": false,
                        "type": "boolean",
                      },
                      "snake_case": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "key-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent spacing between keys and values in object literal properties",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                    "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                    "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                    "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                  },
                  "schema": [
                    {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                      "type": "string",
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "multiLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "align": {
                                  "anyOf": [
                                    {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "afterColon": {
                                          "type": "boolean",
                                        },
                                        "beforeColon": {
                                          "type": "boolean",
                                        },
                                        "mode": {
                                          "enum": [
                                            "strict",
                                            "minimum",
                                          ],
                                          "type": "string",
                                        },
                                        "on": {
                                          "enum": [
                                            "colon",
                                            "value",
                                          ],
                                          "type": "string",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "singleLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "align": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "multiLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "singleLine": {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing between keys and values in object literal properties",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/key-spacing",
                  "ruleName": "key-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "afterColon": {
                            "type": "boolean",
                          },
                          "align": {
                            "anyOf": [
                              {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "afterColon": {
                                    "type": "boolean",
                                  },
                                  "beforeColon": {
                                    "type": "boolean",
                                  },
                                  "mode": {
                                    "enum": [
                                      "strict",
                                      "minimum",
                                    ],
                                    "type": "string",
                                  },
                                  "on": {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "beforeColon": {
                            "type": "boolean",
                          },
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "align": {
                                "anyOf": [
                                  {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "afterColon": {
                                        "type": "boolean",
                                      },
                                      "beforeColon": {
                                        "type": "boolean",
                                      },
                                      "mode": {
                                        "enum": [
                                          "strict",
                                          "minimum",
                                        ],
                                        "type": "string",
                                      },
                                      "on": {
                                        "enum": [
                                          "colon",
                                          "value",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "align": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "no-bigint-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow BigInt literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "BigInt literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow BigInt literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-bigint-literals",
                  "ruleName": "no-bigint-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-bigint-literals.html",
                },
                "messages": {
                  "unexpected": "BigInt literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-binary-expression": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow binary expression",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": false,
                  "messages": {
                    "disallow": "The binary expressions are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow binary expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-binary-expression",
                  "ruleName": "no-binary-expression",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-expression.html",
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "The binary expressions are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-binary-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow binary numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Binary numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow binary numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-binary-numeric-literals",
                  "ruleName": "no-binary-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Binary numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-comments": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow comments",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                    ],
                  },
                  "messages": {
                    "unexpected": "Unexpected comment.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow comments",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                  ],
                  "ruleId": "jsonc/no-comments",
                  "ruleName": "no-comments",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-comments.html",
                },
                "messages": {
                  "unexpected": "Unexpected comment.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-dupe-keys": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow duplicate keys in object literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "unexpected": "Duplicate key '{{name}}'.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow duplicate keys in object literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-dupe-keys",
                  "ruleName": "no-dupe-keys",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-dupe-keys.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Duplicate key '{{name}}'.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "problem",
              },
            },
            "no-escape-sequence-in-identifier": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow escape sequences in identifiers.",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Escape sequence in identifiers should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow escape sequences in identifiers.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-escape-sequence-in-identifier",
                  "ruleName": "no-escape-sequence-in-identifier",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-escape-sequence-in-identifier.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Escape sequence in identifiers should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-floating-decimal": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow leading or trailing decimal points in numeric literals",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": undefined,
                  "messages": {
                    "leading": "A leading decimal point can be confused with a dot.",
                    "trailing": "A trailing decimal point can be confused with a dot.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow leading or trailing decimal points in numeric literals",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-floating-decimal",
                  "ruleName": "no-floating-decimal",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-floating-decimal.html",
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "leading": "A leading decimal point can be confused with a dot.",
                  "trailing": "A trailing decimal point can be confused with a dot.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-hexadecimal-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow hexadecimal numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Hexadecimal numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow hexadecimal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-hexadecimal-numeric-literals",
                  "ruleName": "no-hexadecimal-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-hexadecimal-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Hexadecimal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-infinity": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow Infinity",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "messages": {
                    "disallow": "Infinity should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow Infinity",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-infinity",
                  "ruleName": "no-infinity",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-infinity.html",
                },
                "messages": {
                  "disallow": "Infinity should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-irregular-whitespace": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "defaultOptions": [
                    {
                      "skipComments": false,
                      "skipJSXText": false,
                      "skipRegExps": false,
                      "skipStrings": true,
                      "skipTemplates": false,
                    },
                  ],
                  "deprecated": false,
                  "docs": {
                    "description": "disallow irregular whitespace",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "noIrregularWhitespace": "Irregular whitespace not allowed.",
                  },
                  "replacedBy": [],
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "skipComments": {
                          "type": "boolean",
                        },
                        "skipJSXText": {
                          "type": "boolean",
                        },
                        "skipRegExps": {
                          "type": "boolean",
                        },
                        "skipStrings": {
                          "type": "boolean",
                        },
                        "skipTemplates": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "problem",
                },
              },
              "meta": {
                "defaultOptions": [
                  {
                    "skipComments": false,
                    "skipJSXText": false,
                    "skipRegExps": false,
                    "skipStrings": true,
                    "skipTemplates": false,
                  },
                ],
                "deprecated": false,
                "docs": {
                  "description": "disallow irregular whitespace",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/no-irregular-whitespace",
                  "ruleName": "no-irregular-whitespace",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noIrregularWhitespace": "Irregular whitespace not allowed.",
                },
                "replacedBy": [],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "skipComments": {
                        "type": "boolean",
                      },
                      "skipJSXText": {
                        "type": "boolean",
                      },
                      "skipRegExps": {
                        "type": "boolean",
                      },
                      "skipStrings": {
                        "type": "boolean",
                      },
                      "skipTemplates": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "no-multi-str": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow multiline strings",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "multilineString": "Multiline support is limited to JSON5 only.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow multiline strings",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-multi-str",
                  "ruleName": "no-multi-str",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-multi-str.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "multilineString": "Multiline support is limited to JSON5 only.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-nan": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow NaN",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "messages": {
                    "disallow": "NaN should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow NaN",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-nan",
                  "ruleName": "no-nan",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-nan.html",
                },
                "messages": {
                  "disallow": "NaN should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-number-props": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow number property keys",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "The number property keys are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow number property keys",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-number-props",
                  "ruleName": "no-number-props",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-number-props.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The number property keys are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-numeric-separators": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow numeric separators",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "Numeric separators are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow numeric separators",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-numeric-separators",
                  "ruleName": "no-numeric-separators",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-numeric-separators.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Numeric separators are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-octal": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow legacy octal literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "noOctal": "Octal literals should not be used.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow legacy octal literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-octal",
                  "ruleName": "no-octal",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noOctal": "Octal literals should not be used.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-octal-escape": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow octal escape sequences in string literals",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "suggestion",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow octal escape sequences in string literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/no-octal-escape",
                  "ruleName": "no-octal-escape",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-escape.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "no-octal-numeric-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow octal numeric literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Octal numeric literals should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow octal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-octal-numeric-literals",
                  "ruleName": "no-octal-numeric-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-numeric-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Octal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-parenthesized": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow parentheses around the expression",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "hasSuggestions": false,
                  "messages": {
                    "disallow": "Parentheses around expression should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow parentheses around the expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-parenthesized",
                  "ruleName": "no-parenthesized",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-parenthesized.html",
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "Parentheses around expression should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-plus-sign": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow plus sign",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Plus sign should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow plus sign",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/no-plus-sign",
                  "ruleName": "no-plus-sign",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-plus-sign.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Plus sign should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-regexp-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow RegExp literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "RegExp literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow RegExp literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-regexp-literals",
                  "ruleName": "no-regexp-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-regexp-literals.html",
                },
                "messages": {
                  "unexpected": "RegExp literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-sparse-arrays": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "deprecated": false,
                  "docs": {
                    "description": "disallow sparse arrays",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": undefined,
                  "messages": {
                    "unexpectedSparseArray": "Unexpected comma in middle of array.",
                  },
                  "replacedBy": [],
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow sparse arrays",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-sparse-arrays",
                  "ruleName": "no-sparse-arrays",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-sparse-arrays.html",
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpectedSparseArray": "Unexpected comma in middle of array.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "problem",
              },
            },
            "no-template-literals": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow template literals",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "unexpected": "The template literals are not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow template literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-template-literals",
                  "ruleName": "no-template-literals",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-template-literals.html",
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The template literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-undefined-value": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow \`undefined\`",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "messages": {
                    "unexpected": "\`undefined\` is not allowed.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow \`undefined\`",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-undefined-value",
                  "ruleName": "no-undefined-value",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-undefined-value.html",
                },
                "messages": {
                  "unexpected": "\`undefined\` is not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-unicode-codepoint-escapes": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow Unicode code point escape sequences.",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "disallow": "Unicode code point escape sequence should not be used.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow Unicode code point escape sequences.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-unicode-codepoint-escapes",
                  "ruleName": "no-unicode-codepoint-escapes",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-unicode-codepoint-escapes.html",
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Unicode code point escape sequence should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "no-useless-escape": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "defaultOptions": [
                    {
                      "allowRegexCharacters": [],
                    },
                  ],
                  "deprecated": false,
                  "docs": {
                    "description": "disallow unnecessary escape usage",
                    "extensionRule": true,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": undefined,
                  "hasSuggestions": true,
                  "messages": {
                    "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                    "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                    "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                    "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                  },
                  "replacedBy": [],
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowRegexCharacters": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "suggestion",
                },
              },
              "meta": {
                "defaultOptions": [
                  {
                    "allowRegexCharacters": [],
                  },
                ],
                "deprecated": false,
                "docs": {
                  "description": "disallow unnecessary escape usage",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/no-useless-escape",
                  "ruleName": "no-useless-escape",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-useless-escape.html",
                },
                "fixable": undefined,
                "hasSuggestions": true,
                "messages": {
                  "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                  "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                  "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                  "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                },
                "replacedBy": [],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowRegexCharacters": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "object-curly-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent line breaks inside braces",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                    "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                    "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                    "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                  },
                  "schema": [
                    {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ExportDeclaration": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ImportDeclaration": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ObjectExpression": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "ObjectPattern": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "always",
                                    "never",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "properties": {
                                    "consistent": {
                                      "type": "boolean",
                                    },
                                    "minProperties": {
                                      "minimum": 0,
                                      "type": "integer",
                                    },
                                    "multiline": {
                                      "type": "boolean",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent line breaks inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-curly-newline",
                  "ruleName": "object-curly-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                  "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                  "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                  "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "consistent": {
                                "type": "boolean",
                              },
                              "minProperties": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ExportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ImportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectExpression": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectPattern": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "object-curly-spacing": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce consistent spacing inside braces",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "requireSpaceAfter": "A space is required after '{{token}}'.",
                    "requireSpaceBefore": "A space is required before '{{token}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arraysInObjects": {
                          "type": "boolean",
                        },
                        "objectsInObjects": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-curly-spacing",
                  "ruleName": "object-curly-spacing",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInObjects": {
                        "type": "boolean",
                      },
                      "objectsInObjects": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "object-property-newline": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce placing object properties on separate lines",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": null,
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "propertiesOnNewline": "Object properties must go on a new line.",
                    "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowAllPropertiesOnSameLine": {
                          "default": false,
                          "type": "boolean",
                        },
                        "allowMultiplePropertiesPerLine": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce placing object properties on separate lines",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                  "ruleId": "jsonc/object-property-newline",
                  "ruleName": "object-property-newline",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "propertiesOnNewline": "Object properties must go on a new line.",
                  "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAllPropertiesOnSameLine": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowMultiplePropertiesPerLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "quote-props": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require quotes around object literal property names",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                    "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                    "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                    "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                    "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                    "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                    "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                  },
                  "schema": {
                    "anyOf": [
                      {
                        "items": [
                          {
                            "enum": [
                              "always",
                              "as-needed",
                              "consistent",
                              "consistent-as-needed",
                            ],
                            "type": "string",
                          },
                        ],
                        "maxItems": 1,
                        "minItems": 0,
                        "type": "array",
                      },
                      {
                        "items": [
                          {
                            "enum": [
                              "always",
                              "as-needed",
                              "consistent",
                              "consistent-as-needed",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "keywords": {
                                "type": "boolean",
                              },
                              "numbers": {
                                "type": "boolean",
                              },
                              "unnecessary": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "maxItems": 2,
                        "minItems": 0,
                        "type": "array",
                      },
                    ],
                  },
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "require quotes around object literal property names",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/quote-props",
                  "ruleName": "quote-props",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html",
                },
                "fixable": "code",
                "messages": {
                  "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                  "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                  "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                  "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                  "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                  "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                  "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "keywords": {
                              "type": "boolean",
                            },
                            "numbers": {
                              "type": "boolean",
                            },
                            "unnecessary": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "quotes": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "enforce use of double or single quotes",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "wrongQuotes": "Strings must use {{description}}.",
                  },
                  "schema": [
                    {
                      "enum": [
                        "single",
                        "double",
                        "backtick",
                      ],
                      "type": "string",
                    },
                    {
                      "anyOf": [
                        {
                          "enum": [
                            "avoid-escape",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowTemplateLiterals": {
                              "type": "boolean",
                            },
                            "avoidEscape": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "enforce use of double or single quotes",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/quotes",
                  "ruleName": "quotes",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html",
                },
                "fixable": "code",
                "messages": {
                  "wrongQuotes": "Strings must use {{description}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "single",
                      "double",
                      "backtick",
                    ],
                    "type": "string",
                  },
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "avoid-escape",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowTemplateLiterals": {
                            "type": "boolean",
                          },
                          "avoidEscape": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "sort-array-values": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require array values to be sorted",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                  },
                  "schema": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "minValues": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                      "valuePattern": {
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "require array values to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/sort-array-values",
                  "ruleName": "sort-array-values",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html",
                },
                "fixable": "code",
                "messages": {
                  "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                },
                "schema": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "minValues": {
                        "minimum": 2,
                        "type": "integer",
                      },
                      "order": {
                        "oneOf": [
                          {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "order": {
                                      "additionalProperties": false,
                                      "properties": {
                                        "caseSensitive": {
                                          "type": "boolean",
                                        },
                                        "natural": {
                                          "type": "boolean",
                                        },
                                        "type": {
                                          "enum": [
                                            "asc",
                                            "desc",
                                          ],
                                        },
                                      },
                                      "type": "object",
                                    },
                                    "valuePattern": {
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                              "type": {
                                "enum": [
                                  "asc",
                                  "desc",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "pathPattern": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "pathPattern",
                      "order",
                    ],
                    "type": "object",
                  },
                  "minItems": 1,
                  "type": "array",
                },
                "type": "suggestion",
              },
            },
            "sort-keys": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "require object keys to be sorted",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": null,
                  },
                  "fixable": "code",
                  "messages": {
                    "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                  },
                  "schema": {
                    "oneOf": [
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "hasProperties": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "order": {
                              "oneOf": [
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "additionalProperties": false,
                                        "properties": {
                                          "keyPattern": {
                                            "type": "string",
                                          },
                                          "order": {
                                            "additionalProperties": false,
                                            "properties": {
                                              "caseSensitive": {
                                                "type": "boolean",
                                              },
                                              "natural": {
                                                "type": "boolean",
                                              },
                                              "type": {
                                                "enum": [
                                                  "asc",
                                                  "desc",
                                                ],
                                              },
                                            },
                                            "type": "object",
                                          },
                                        },
                                        "type": "object",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "caseSensitive": {
                                      "type": "boolean",
                                    },
                                    "natural": {
                                      "type": "boolean",
                                    },
                                    "type": {
                                      "enum": [
                                        "asc",
                                        "desc",
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "pathPattern": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "pathPattern",
                            "order",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                      {
                        "additionalItems": false,
                        "items": [
                          {
                            "enum": [
                              "asc",
                              "desc",
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowLineSeparatedGroups": {
                                "type": "boolean",
                              },
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "minKeys": {
                                "minimum": 2,
                                "type": "integer",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "type": "array",
                      },
                    ],
                  },
                  "type": "suggestion",
                },
              },
              "meta": {
                "docs": {
                  "description": "require object keys to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                  "ruleId": "jsonc/sort-keys",
                  "ruleName": "sort-keys",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html",
                },
                "fixable": "code",
                "messages": {
                  "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "hasProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "order": {
                            "oneOf": [
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "keyPattern": {
                                          "type": "string",
                                        },
                                        "order": {
                                          "additionalProperties": false,
                                          "properties": {
                                            "caseSensitive": {
                                              "type": "boolean",
                                            },
                                            "natural": {
                                              "type": "boolean",
                                            },
                                            "type": {
                                              "enum": [
                                                "asc",
                                                "desc",
                                              ],
                                            },
                                          },
                                          "type": "object",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "caseSensitive": {
                                    "type": "boolean",
                                  },
                                  "natural": {
                                    "type": "boolean",
                                  },
                                  "type": {
                                    "enum": [
                                      "asc",
                                      "desc",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "pathPattern": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "pathPattern",
                          "order",
                        ],
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "asc",
                            "desc",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "space-unary-ops": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow spaces after unary operators",
                    "extensionRule": true,
                    "layout": true,
                    "recommended": [
                      "json",
                      "jsonc",
                      "json5",
                    ],
                  },
                  "fixable": "whitespace",
                  "messages": {
                    "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                    "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                    "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                    "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                  },
                  "schema": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "nonwords": {
                          "default": false,
                          "type": "boolean",
                        },
                        "overrides": {
                          "additionalProperties": {
                            "type": "boolean",
                          },
                          "type": "object",
                        },
                        "words": {
                          "default": true,
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "layout",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow spaces after unary operators",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                  "ruleId": "jsonc/space-unary-ops",
                  "ruleName": "space-unary-ops",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html",
                },
                "fixable": "whitespace",
                "messages": {
                  "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                  "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                  "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                  "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "nonwords": {
                        "default": false,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                      "words": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "valid-json-number": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow invalid number for JSON",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "jsonc",
                    ],
                  },
                  "fixable": "code",
                  "messages": {
                    "invalid": "Invalid number for JSON.",
                    "invalidBinary": "Binary literals are not allowed in JSON.",
                    "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                    "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                    "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                    "invalidOctal": "Octal literals are not allowed in JSON.",
                    "invalidPlus": "Plus signs are not allowed in JSON.",
                    "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                    "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                  },
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow invalid number for JSON",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/valid-json-number",
                  "ruleName": "valid-json-number",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/valid-json-number.html",
                },
                "fixable": "code",
                "messages": {
                  "invalid": "Invalid number for JSON.",
                  "invalidBinary": "Binary literals are not allowed in JSON.",
                  "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                  "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                  "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                  "invalidOctal": "Octal literals are not allowed in JSON.",
                  "invalidPlus": "Plus signs are not allowed in JSON.",
                  "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                  "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "vue-custom-block/no-parsing-error": {
              "create": [Function],
              "jsoncDefineRule": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "disallow parsing errors in Vue custom blocks",
                    "extensionRule": false,
                    "layout": false,
                    "recommended": [
                      "json",
                      "json5",
                      "jsonc",
                    ],
                  },
                  "messages": {},
                  "schema": [],
                  "type": "problem",
                },
              },
              "meta": {
                "docs": {
                  "description": "disallow parsing errors in Vue custom blocks",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "json5",
                    "jsonc",
                  ],
                  "ruleId": "jsonc/vue-custom-block/no-parsing-error",
                  "ruleName": "vue-custom-block/no-parsing-error",
                  "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/vue-custom-block/no-parsing-error.html",
                },
                "messages": {},
                "schema": [],
                "type": "problem",
              },
            },
          },
          "traverseNodes": [Function],
        },
        "getStaticJSONValue": [Function],
        "meta": {
          "name": "eslint-plugin-jsonc",
          "version": "2.20.1",
        },
        "parseForESLint": [Function],
        "parseJSON": [Function],
        "rules": {
          "array-bracket-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce line breaks after opening and before closing array brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingClosingLinebreak": "A linebreak is required before ']'.",
                  "missingOpeningLinebreak": "A linebreak is required after '['.",
                  "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                  "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce line breaks after opening and before closing array brackets",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-bracket-newline",
                "ruleName": "array-bracket-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingClosingLinebreak": "A linebreak is required before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "minItems": {
                          "minimum": 0,
                          "type": [
                            "integer",
                            "null",
                          ],
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "array-bracket-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow or enforce spaces inside of brackets",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                  "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInArrays": {
                        "type": "boolean",
                      },
                      "objectsInArrays": {
                        "type": "boolean",
                      },
                      "singleValue": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow or enforce spaces inside of brackets",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-bracket-spacing",
                "ruleName": "array-bracket-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInArrays": {
                      "type": "boolean",
                    },
                    "objectsInArrays": {
                      "type": "boolean",
                    },
                    "singleValue": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "array-element-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce line breaks between array elements",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "missingLineBreak": "There should be a linebreak after this element.",
                  "unexpectedLineBreak": "There should be no linebreak here.",
                },
                "schema": {
                  "definitions": {
                    "basicConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                            "consistent",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "minItems": {
                              "minimum": 0,
                              "type": [
                                "integer",
                                "null",
                              ],
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/basicConfig",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "ArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "ArrayPattern": {
                              "$ref": "#/definitions/basicConfig",
                            },
                            "JSONArrayExpression": {
                              "$ref": "#/definitions/basicConfig",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce line breaks between array elements",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/array-element-newline",
                "ruleName": "array-element-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingLineBreak": "There should be a linebreak after this element.",
                "unexpectedLineBreak": "There should be no linebreak here.",
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never",
                          "consistent",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "minItems": {
                            "minimum": 0,
                            "type": [
                              "integer",
                              "null",
                            ],
                          },
                          "multiline": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ArrayExpression": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "ArrayPattern": {
                            "$ref": "#/definitions/basicConfig",
                          },
                          "JSONArrayExpression": {
                            "$ref": "#/definitions/basicConfig",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "auto": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "apply jsonc rules similar to your configured ESLint core rules",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {},
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "apply jsonc rules similar to your configured ESLint core rules",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/auto",
                "ruleName": "auto",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/auto.html",
              },
              "fixable": "code",
              "messages": {},
              "schema": [],
              "type": "suggestion",
            },
          },
          "comma-dangle": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require or disallow trailing commas",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "missing": "Missing trailing comma.",
                  "unexpected": "Unexpected trailing comma.",
                },
                "schema": {
                  "additionalItems": false,
                  "definitions": {
                    "value": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                    "valueWithIgnore": {
                      "enum": [
                        "always-multiline",
                        "always",
                        "ignore",
                        "never",
                        "only-multiline",
                      ],
                      "type": "string",
                    },
                  },
                  "items": [
                    {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/value",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "arrays": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "exports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "functions": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "imports": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                            "objects": {
                              "$ref": "#/definitions/valueWithIgnore",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  ],
                  "type": "array",
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "require or disallow trailing commas",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                ],
                "ruleId": "jsonc/comma-dangle",
                "ruleName": "comma-dangle",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html",
              },
              "fixable": "code",
              "messages": {
                "missing": "Missing trailing comma.",
                "unexpected": "Unexpected trailing comma.",
              },
              "schema": {
                "additionalItems": false,
                "definitions": {
                  "value": {
                    "enum": [
                      "always-multiline",
                      "always",
                      "never",
                      "only-multiline",
                    ],
                    "type": "string",
                  },
                  "valueWithIgnore": {
                    "enum": [
                      "always-multiline",
                      "always",
                      "ignore",
                      "never",
                      "only-multiline",
                    ],
                    "type": "string",
                  },
                },
                "items": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/value",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "arrays": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "exports": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "functions": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "imports": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                          "objects": {
                            "$ref": "#/definitions/valueWithIgnore",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "array",
              },
              "type": "layout",
            },
          },
          "comma-style": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent comma style",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "expectedCommaFirst": "',' should be placed first.",
                  "expectedCommaLast": "',' should be placed last.",
                  "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                },
                "schema": [
                  {
                    "enum": [
                      "first",
                      "last",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "exceptions": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent comma style",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/comma-style",
                "ruleName": "comma-style",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html",
              },
              "fixable": "code",
              "messages": {
                "expectedCommaFirst": "',' should be placed first.",
                "expectedCommaLast": "',' should be placed last.",
                "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
              },
              "schema": [
                {
                  "enum": [
                    "first",
                    "last",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "indent": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent indentation",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "enum": [
                          "tab",
                        ],
                        "type": "string",
                      },
                      {
                        "minimum": 0,
                        "type": "integer",
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ArrayExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "CallExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "arguments": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionDeclaration": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "FunctionExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                          "parameters": {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "ImportDeclaration": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "MemberExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "ObjectExpression": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "first",
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                      "StaticBlock": {
                        "additionalProperties": false,
                        "properties": {
                          "body": {
                            "minimum": 0,
                            "type": "integer",
                          },
                        },
                        "type": "object",
                      },
                      "SwitchCase": {
                        "default": 0,
                        "minimum": 0,
                        "type": "integer",
                      },
                      "VariableDeclarator": {
                        "oneOf": [
                          {
                            "oneOf": [
                              {
                                "minimum": 0,
                                "type": "integer",
                              },
                              {
                                "enum": [
                                  "first",
                                  "off",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "const": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "let": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                              "var": {
                                "oneOf": [
                                  {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  {
                                    "enum": [
                                      "first",
                                      "off",
                                    ],
                                    "type": "string",
                                  },
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "flatTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoreComments": {
                        "default": false,
                        "type": "boolean",
                      },
                      "ignoredNodes": {
                        "items": {
                          "not": {
                            "pattern": ":exit$",
                          },
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "offsetTernaryExpressions": {
                        "default": false,
                        "type": "boolean",
                      },
                      "outerIIFEBody": {
                        "oneOf": [
                          {
                            "minimum": 0,
                            "type": "integer",
                          },
                          {
                            "enum": [
                              "off",
                            ],
                            "type": "string",
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent indentation",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/indent",
                "ruleName": "indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "tab",
                      ],
                      "type": "string",
                    },
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "ArrayExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "CallExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "arguments": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "FunctionDeclaration": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "parameters": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "FunctionExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "parameters": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "ImportDeclaration": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "MemberExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "ObjectExpression": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "StaticBlock": {
                      "additionalProperties": false,
                      "properties": {
                        "body": {
                          "minimum": 0,
                          "type": "integer",
                        },
                      },
                      "type": "object",
                    },
                    "SwitchCase": {
                      "default": 0,
                      "minimum": 0,
                      "type": "integer",
                    },
                    "VariableDeclarator": {
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "const": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "let": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "var": {
                              "oneOf": [
                                {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "first",
                                    "off",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "flatTernaryExpressions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoredNodes": {
                      "items": {
                        "not": {
                          "pattern": ":exit$",
                        },
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "offsetTernaryExpressions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "outerIIFEBody": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "key-name-casing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce naming convention to property key names",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "messages": {
                  "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "PascalCase": {
                        "default": false,
                        "type": "boolean",
                      },
                      "SCREAMING_SNAKE_CASE": {
                        "default": false,
                        "type": "boolean",
                      },
                      "camelCase": {
                        "default": true,
                        "type": "boolean",
                      },
                      "ignores": {
                        "additionalItems": false,
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "kebab-case": {
                        "default": false,
                        "type": "boolean",
                      },
                      "snake_case": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce naming convention to property key names",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/key-name-casing",
                "ruleName": "key-name-casing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html",
              },
              "messages": {
                "doesNotMatchFormat": "Property name \`{{name}}\` must match one of the following formats: {{formats}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "PascalCase": {
                      "default": false,
                      "type": "boolean",
                    },
                    "SCREAMING_SNAKE_CASE": {
                      "default": false,
                      "type": "boolean",
                    },
                    "camelCase": {
                      "default": true,
                      "type": "boolean",
                    },
                    "ignores": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "kebab-case": {
                      "default": false,
                      "type": "boolean",
                    },
                    "snake_case": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "key-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing between keys and values in object literal properties",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
                },
                "schema": [
                  {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "afterColon": {
                            "type": "boolean",
                          },
                          "align": {
                            "anyOf": [
                              {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "afterColon": {
                                    "type": "boolean",
                                  },
                                  "beforeColon": {
                                    "type": "boolean",
                                  },
                                  "mode": {
                                    "enum": [
                                      "strict",
                                      "minimum",
                                    ],
                                    "type": "string",
                                  },
                                  "on": {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "beforeColon": {
                            "type": "boolean",
                          },
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "align": {
                                "anyOf": [
                                  {
                                    "enum": [
                                      "colon",
                                      "value",
                                    ],
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "afterColon": {
                                        "type": "boolean",
                                      },
                                      "beforeColon": {
                                        "type": "boolean",
                                      },
                                      "mode": {
                                        "enum": [
                                          "strict",
                                          "minimum",
                                        ],
                                        "type": "string",
                                      },
                                      "on": {
                                        "enum": [
                                          "colon",
                                          "value",
                                        ],
                                        "type": "string",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "align": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "multiLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          "singleLine": {
                            "additionalProperties": false,
                            "properties": {
                              "afterColon": {
                                "type": "boolean",
                              },
                              "beforeColon": {
                                "type": "boolean",
                              },
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum",
                                ],
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent spacing between keys and values in object literal properties",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/key-spacing",
                "ruleName": "key-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "align": {
                          "anyOf": [
                            {
                              "enum": [
                                "colon",
                                "value",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                  "type": "string",
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                      "type": "string",
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "align": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                            "on": {
                              "enum": [
                                "colon",
                                "value",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "no-bigint-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow BigInt literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "BigInt literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow BigInt literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-bigint-literals",
                "ruleName": "no-bigint-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-bigint-literals.html",
              },
              "messages": {
                "unexpected": "BigInt literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-binary-expression": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow binary expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "The binary expressions are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow binary expression",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-binary-expression",
                "ruleName": "no-binary-expression",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-expression.html",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "disallow": "The binary expressions are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-binary-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow binary numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Binary numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow binary numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-binary-numeric-literals",
                "ruleName": "no-binary-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Binary numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-comments": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow comments",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                  ],
                },
                "messages": {
                  "unexpected": "Unexpected comment.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow comments",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                ],
                "ruleId": "jsonc/no-comments",
                "ruleName": "no-comments",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-comments.html",
              },
              "messages": {
                "unexpected": "Unexpected comment.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-dupe-keys": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow duplicate keys in object literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpected": "Duplicate key '{{name}}'.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow duplicate keys in object literals",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-dupe-keys",
                "ruleName": "no-dupe-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-dupe-keys.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Duplicate key '{{name}}'.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "problem",
            },
          },
          "no-escape-sequence-in-identifier": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow escape sequences in identifiers.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Escape sequence in identifiers should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow escape sequences in identifiers.",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-escape-sequence-in-identifier",
                "ruleName": "no-escape-sequence-in-identifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-escape-sequence-in-identifier.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Escape sequence in identifiers should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-floating-decimal": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow leading or trailing decimal points in numeric literals",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": undefined,
                "messages": {
                  "leading": "A leading decimal point can be confused with a dot.",
                  "trailing": "A trailing decimal point can be confused with a dot.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow leading or trailing decimal points in numeric literals",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-floating-decimal",
                "ruleName": "no-floating-decimal",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-floating-decimal.html",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "leading": "A leading decimal point can be confused with a dot.",
                "trailing": "A trailing decimal point can be confused with a dot.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-hexadecimal-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow hexadecimal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Hexadecimal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow hexadecimal numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-hexadecimal-numeric-literals",
                "ruleName": "no-hexadecimal-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-hexadecimal-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Hexadecimal numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-infinity": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow Infinity",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "messages": {
                  "disallow": "Infinity should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow Infinity",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-infinity",
                "ruleName": "no-infinity",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-infinity.html",
              },
              "messages": {
                "disallow": "Infinity should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-irregular-whitespace": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "defaultOptions": [
                  {
                    "skipComments": false,
                    "skipJSXText": false,
                    "skipRegExps": false,
                    "skipStrings": true,
                    "skipTemplates": false,
                  },
                ],
                "deprecated": false,
                "docs": {
                  "description": "disallow irregular whitespace",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noIrregularWhitespace": "Irregular whitespace not allowed.",
                },
                "replacedBy": [],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "skipComments": {
                        "type": "boolean",
                      },
                      "skipJSXText": {
                        "type": "boolean",
                      },
                      "skipRegExps": {
                        "type": "boolean",
                      },
                      "skipStrings": {
                        "type": "boolean",
                      },
                      "skipTemplates": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "problem",
              },
            },
            "meta": {
              "defaultOptions": [
                {
                  "skipComments": false,
                  "skipJSXText": false,
                  "skipRegExps": false,
                  "skipStrings": true,
                  "skipTemplates": false,
                },
              ],
              "deprecated": false,
              "docs": {
                "description": "disallow irregular whitespace",
                "extensionRule": true,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/no-irregular-whitespace",
                "ruleName": "no-irregular-whitespace",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "noIrregularWhitespace": "Irregular whitespace not allowed.",
              },
              "replacedBy": [],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "skipComments": {
                      "type": "boolean",
                    },
                    "skipJSXText": {
                      "type": "boolean",
                    },
                    "skipRegExps": {
                      "type": "boolean",
                    },
                    "skipStrings": {
                      "type": "boolean",
                    },
                    "skipTemplates": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-multi-str": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow multiline strings",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "multilineString": "Multiline support is limited to JSON5 only.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow multiline strings",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-multi-str",
                "ruleName": "no-multi-str",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-multi-str.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "multilineString": "Multiline support is limited to JSON5 only.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-nan": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow NaN",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "messages": {
                  "disallow": "NaN should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow NaN",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-nan",
                "ruleName": "no-nan",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-nan.html",
              },
              "messages": {
                "disallow": "NaN should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-number-props": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow number property keys",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The number property keys are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow number property keys",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-number-props",
                "ruleName": "no-number-props",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-number-props.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "The number property keys are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-numeric-separators": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow numeric separators",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Numeric separators are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow numeric separators",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-numeric-separators",
                "ruleName": "no-numeric-separators",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-numeric-separators.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Numeric separators are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-octal": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow legacy octal literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "noOctal": "Octal literals should not be used.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow legacy octal literals",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-octal",
                "ruleName": "no-octal",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "noOctal": "Octal literals should not be used.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-octal-escape": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow octal escape sequences in string literals",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "suggestion",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow octal escape sequences in string literals",
                "extensionRule": true,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/no-octal-escape",
                "ruleName": "no-octal-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-escape.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-octal-numeric-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow octal numeric literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Octal numeric literals should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow octal numeric literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-octal-numeric-literals",
                "ruleName": "no-octal-numeric-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-numeric-literals.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Octal numeric literals should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-parenthesized": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow parentheses around the expression",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "disallow": "Parentheses around expression should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow parentheses around the expression",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-parenthesized",
                "ruleName": "no-parenthesized",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-parenthesized.html",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "disallow": "Parentheses around expression should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-plus-sign": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow plus sign",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Plus sign should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow plus sign",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/no-plus-sign",
                "ruleName": "no-plus-sign",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-plus-sign.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Plus sign should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-regexp-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow RegExp literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "RegExp literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow RegExp literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-regexp-literals",
                "ruleName": "no-regexp-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-regexp-literals.html",
              },
              "messages": {
                "unexpected": "RegExp literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-sparse-arrays": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "deprecated": false,
                "docs": {
                  "description": "disallow sparse arrays",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": undefined,
                "messages": {
                  "unexpectedSparseArray": "Unexpected comma in middle of array.",
                },
                "replacedBy": [],
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "disallow sparse arrays",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-sparse-arrays",
                "ruleName": "no-sparse-arrays",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-sparse-arrays.html",
              },
              "fixable": undefined,
              "hasSuggestions": undefined,
              "messages": {
                "unexpectedSparseArray": "Unexpected comma in middle of array.",
              },
              "replacedBy": [],
              "schema": [],
              "type": "problem",
            },
          },
          "no-template-literals": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow template literals",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "The template literals are not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow template literals",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-template-literals",
                "ruleName": "no-template-literals",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-template-literals.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "The template literals are not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-undefined-value": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow \`undefined\`",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "messages": {
                  "unexpected": "\`undefined\` is not allowed.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow \`undefined\`",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-undefined-value",
                "ruleName": "no-undefined-value",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-undefined-value.html",
              },
              "messages": {
                "unexpected": "\`undefined\` is not allowed.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unicode-codepoint-escapes": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow Unicode code point escape sequences.",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "disallow": "Unicode code point escape sequence should not be used.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow Unicode code point escape sequences.",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-unicode-codepoint-escapes",
                "ruleName": "no-unicode-codepoint-escapes",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-unicode-codepoint-escapes.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Unicode code point escape sequence should not be used.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-useless-escape": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "defaultOptions": [
                  {
                    "allowRegexCharacters": [],
                  },
                ],
                "deprecated": false,
                "docs": {
                  "description": "disallow unnecessary escape usage",
                  "extensionRule": true,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": undefined,
                "hasSuggestions": true,
                "messages": {
                  "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                  "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                  "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                  "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                },
                "replacedBy": [],
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowRegexCharacters": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "suggestion",
              },
            },
            "meta": {
              "defaultOptions": [
                {
                  "allowRegexCharacters": [],
                },
              ],
              "deprecated": false,
              "docs": {
                "description": "disallow unnecessary escape usage",
                "extensionRule": true,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/no-useless-escape",
                "ruleName": "no-useless-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-useless-escape.html",
              },
              "fixable": undefined,
              "hasSuggestions": true,
              "messages": {
                "escapeBackslash": "Replace the \`\\\` with \`\\\\\` to include the actual backslash character.",
                "removeEscape": "Remove the \`\\\`. This maintains the current functionality.",
                "removeEscapeDoNotKeepSemantics": "Remove the \`\\\` if it was inserted by mistake.",
                "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
              },
              "replacedBy": [],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowRegexCharacters": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "object-curly-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent line breaks inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                  "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                  "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                  "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "enum": [
                              "always",
                              "never",
                            ],
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "minProperties": 1,
                            "properties": {
                              "consistent": {
                                "type": "boolean",
                              },
                              "minProperties": {
                                "minimum": 0,
                                "type": "integer",
                              },
                              "multiline": {
                                "type": "boolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "minProperties": 1,
                        "properties": {
                          "ExportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ImportDeclaration": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectExpression": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "ObjectPattern": {
                            "oneOf": [
                              {
                                "enum": [
                                  "always",
                                  "never",
                                ],
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "minProperties": 1,
                                "properties": {
                                  "consistent": {
                                    "type": "boolean",
                                  },
                                  "minProperties": {
                                    "minimum": 0,
                                    "type": "integer",
                                  },
                                  "multiline": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent line breaks inside braces",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-curly-newline",
                "ruleName": "object-curly-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "oneOf": [
                        {
                          "enum": [
                            "always",
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "minProperties": 1,
                          "properties": {
                            "consistent": {
                              "type": "boolean",
                            },
                            "minProperties": {
                              "minimum": 0,
                              "type": "integer",
                            },
                            "multiline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": {
                        "ExportDeclaration": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ImportDeclaration": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ObjectExpression": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "ObjectPattern": {
                          "oneOf": [
                            {
                              "enum": [
                                "always",
                                "never",
                              ],
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "minProperties": 1,
                              "properties": {
                                "consistent": {
                                  "type": "boolean",
                                },
                                "minProperties": {
                                  "minimum": 0,
                                  "type": "integer",
                                },
                                "multiline": {
                                  "type": "boolean",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "object-curly-spacing": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce consistent spacing inside braces",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                },
                "schema": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arraysInObjects": {
                        "type": "boolean",
                      },
                      "objectsInObjects": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce consistent spacing inside braces",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-curly-spacing",
                "ruleName": "object-curly-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean",
                    },
                    "objectsInObjects": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "object-property-newline": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce placing object properties on separate lines",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": null,
                },
                "fixable": "whitespace",
                "messages": {
                  "propertiesOnNewline": "Object properties must go on a new line.",
                  "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowAllPropertiesOnSameLine": {
                        "default": false,
                        "type": "boolean",
                      },
                      "allowMultiplePropertiesPerLine": {
                        "default": false,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce placing object properties on separate lines",
                "extensionRule": true,
                "layout": true,
                "recommended": null,
                "ruleId": "jsonc/object-property-newline",
                "ruleName": "object-property-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "propertiesOnNewline": "Object properties must go on a new line.",
                "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAllPropertiesOnSameLine": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowMultiplePropertiesPerLine": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "quote-props": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require quotes around object literal property names",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                  "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                  "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                  "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                  "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                  "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                  "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                },
                "schema": {
                  "anyOf": [
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                      ],
                      "maxItems": 1,
                      "minItems": 0,
                      "type": "array",
                    },
                    {
                      "items": [
                        {
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "keywords": {
                              "type": "boolean",
                            },
                            "numbers": {
                              "type": "boolean",
                            },
                            "unnecessary": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array",
                    },
                  ],
                },
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "require quotes around object literal property names",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/quote-props",
                "ruleName": "quote-props",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html",
              },
              "fixable": "code",
              "messages": {
                "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant.",
                "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed",
                        ],
                        "type": "string",
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                          "as-needed",
                          "consistent",
                          "consistent-as-needed",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "keywords": {
                            "type": "boolean",
                          },
                          "numbers": {
                            "type": "boolean",
                          },
                          "unnecessary": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "layout",
            },
          },
          "quotes": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "enforce use of double or single quotes",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "wrongQuotes": "Strings must use {{description}}.",
                },
                "schema": [
                  {
                    "enum": [
                      "single",
                      "double",
                      "backtick",
                    ],
                    "type": "string",
                  },
                  {
                    "anyOf": [
                      {
                        "enum": [
                          "avoid-escape",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowTemplateLiterals": {
                            "type": "boolean",
                          },
                          "avoidEscape": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "enforce use of double or single quotes",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/quotes",
                "ruleName": "quotes",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html",
              },
              "fixable": "code",
              "messages": {
                "wrongQuotes": "Strings must use {{description}}.",
              },
              "schema": [
                {
                  "enum": [
                    "single",
                    "double",
                    "backtick",
                  ],
                  "type": "string",
                },
                {
                  "anyOf": [
                    {
                      "enum": [
                        "avoid-escape",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowTemplateLiterals": {
                          "type": "boolean",
                        },
                        "avoidEscape": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "sort-array-values": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require array values to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
                },
                "schema": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "minValues": {
                        "minimum": 2,
                        "type": "integer",
                      },
                      "order": {
                        "oneOf": [
                          {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "order": {
                                      "additionalProperties": false,
                                      "properties": {
                                        "caseSensitive": {
                                          "type": "boolean",
                                        },
                                        "natural": {
                                          "type": "boolean",
                                        },
                                        "type": {
                                          "enum": [
                                            "asc",
                                            "desc",
                                          ],
                                        },
                                      },
                                      "type": "object",
                                    },
                                    "valuePattern": {
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "caseSensitive": {
                                "type": "boolean",
                              },
                              "natural": {
                                "type": "boolean",
                              },
                              "type": {
                                "enum": [
                                  "asc",
                                  "desc",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "pathPattern": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "pathPattern",
                      "order",
                    ],
                    "type": "object",
                  },
                  "minItems": 1,
                  "type": "array",
                },
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "require array values to be sorted",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/sort-array-values",
                "ruleName": "sort-array-values",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html",
              },
              "fixable": "code",
              "messages": {
                "sortValues": "Expected array values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
              },
              "schema": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "minValues": {
                      "minimum": 2,
                      "type": "integer",
                    },
                    "order": {
                      "oneOf": [
                        {
                          "items": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "order": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "caseSensitive": {
                                        "type": "boolean",
                                      },
                                      "natural": {
                                        "type": "boolean",
                                      },
                                      "type": {
                                        "enum": [
                                          "asc",
                                          "desc",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                  "valuePattern": {
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                            "type": {
                              "enum": [
                                "asc",
                                "desc",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "pathPattern": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "pathPattern",
                    "order",
                  ],
                  "type": "object",
                },
                "minItems": 1,
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "sort-keys": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "require object keys to be sorted",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": null,
                },
                "fixable": "code",
                "messages": {
                  "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "hasProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "order": {
                            "oneOf": [
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                    },
                                    {
                                      "additionalProperties": false,
                                      "properties": {
                                        "keyPattern": {
                                          "type": "string",
                                        },
                                        "order": {
                                          "additionalProperties": false,
                                          "properties": {
                                            "caseSensitive": {
                                              "type": "boolean",
                                            },
                                            "natural": {
                                              "type": "boolean",
                                            },
                                            "type": {
                                              "enum": [
                                                "asc",
                                                "desc",
                                              ],
                                            },
                                          },
                                          "type": "object",
                                        },
                                      },
                                      "type": "object",
                                    },
                                  ],
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "caseSensitive": {
                                    "type": "boolean",
                                  },
                                  "natural": {
                                    "type": "boolean",
                                  },
                                  "type": {
                                    "enum": [
                                      "asc",
                                      "desc",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "pathPattern": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "pathPattern",
                          "order",
                        ],
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                    {
                      "additionalItems": false,
                      "items": [
                        {
                          "enum": [
                            "asc",
                            "desc",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowLineSeparatedGroups": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "minKeys": {
                              "minimum": 2,
                              "type": "integer",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "array",
                    },
                  ],
                },
                "type": "suggestion",
              },
            },
            "meta": {
              "docs": {
                "description": "require object keys to be sorted",
                "extensionRule": false,
                "layout": false,
                "recommended": null,
                "ruleId": "jsonc/sort-keys",
                "ruleName": "sort-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html",
              },
              "fixable": "code",
              "messages": {
                "sortKeys": "Expected object keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
              },
              "schema": {
                "oneOf": [
                  {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "allowLineSeparatedGroups": {
                          "type": "boolean",
                        },
                        "hasProperties": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "minKeys": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "keyPattern": {
                                        "type": "string",
                                      },
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "asc",
                          "desc",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "caseSensitive": {
                            "type": "boolean",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "natural": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "space-unary-ops": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow spaces after unary operators",
                  "extensionRule": true,
                  "layout": true,
                  "recommended": [
                    "json",
                    "jsonc",
                    "json5",
                  ],
                },
                "fixable": "whitespace",
                "messages": {
                  "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                  "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                  "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                  "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                },
                "schema": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "nonwords": {
                        "default": false,
                        "type": "boolean",
                      },
                      "overrides": {
                        "additionalProperties": {
                          "type": "boolean",
                        },
                        "type": "object",
                      },
                      "words": {
                        "default": true,
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "layout",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow spaces after unary operators",
                "extensionRule": true,
                "layout": true,
                "recommended": [
                  "json",
                  "jsonc",
                  "json5",
                ],
                "ruleId": "jsonc/space-unary-ops",
                "ruleName": "space-unary-ops",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html",
              },
              "fixable": "whitespace",
              "messages": {
                "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'.",
                "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "nonwords": {
                      "default": false,
                      "type": "boolean",
                    },
                    "overrides": {
                      "additionalProperties": {
                        "type": "boolean",
                      },
                      "type": "object",
                    },
                    "words": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "valid-json-number": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow invalid number for JSON",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "jsonc",
                  ],
                },
                "fixable": "code",
                "messages": {
                  "invalid": "Invalid number for JSON.",
                  "invalidBinary": "Binary literals are not allowed in JSON.",
                  "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                  "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                  "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                  "invalidOctal": "Octal literals are not allowed in JSON.",
                  "invalidPlus": "Plus signs are not allowed in JSON.",
                  "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                  "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
                },
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow invalid number for JSON",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "jsonc",
                ],
                "ruleId": "jsonc/valid-json-number",
                "ruleName": "valid-json-number",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/valid-json-number.html",
              },
              "fixable": "code",
              "messages": {
                "invalid": "Invalid number for JSON.",
                "invalidBinary": "Binary literals are not allowed in JSON.",
                "invalidHex": "Hexadecimal literals are not allowed in JSON.",
                "invalidIdentifier": "\`{{name}}\` are not allowed in JSON.",
                "invalidLeadingDecimalPoint": "Leading decimal point is not allowed in JSON.",
                "invalidOctal": "Octal literals are not allowed in JSON.",
                "invalidPlus": "Plus signs are not allowed in JSON.",
                "invalidSpace": "Spaces after minus sign are not allowed in JSON.",
                "invalidTrailingDecimalPoint": "Trailing decimal point is not allowed in JSON.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "vue-custom-block/no-parsing-error": {
            "create": [Function],
            "jsoncDefineRule": {
              "create": [Function],
              "meta": {
                "docs": {
                  "description": "disallow parsing errors in Vue custom blocks",
                  "extensionRule": false,
                  "layout": false,
                  "recommended": [
                    "json",
                    "json5",
                    "jsonc",
                  ],
                },
                "messages": {},
                "schema": [],
                "type": "problem",
              },
            },
            "meta": {
              "docs": {
                "description": "disallow parsing errors in Vue custom blocks",
                "extensionRule": false,
                "layout": false,
                "recommended": [
                  "json",
                  "json5",
                  "jsonc",
                ],
                "ruleId": "jsonc/vue-custom-block/no-parsing-error",
                "ruleName": "vue-custom-block/no-parsing-error",
                "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/vue-custom-block/no-parsing-error.html",
              },
              "messages": {},
              "schema": [],
              "type": "problem",
            },
          },
        },
        "traverseNodes": [Function],
      },
    },
  },
  {
    "files": [
      "*.json",
      "**/*.json",
      "*.json5",
      "**/*.json5",
      "*.jsonc",
      "**/*.jsonc",
    ],
    "languageOptions": {
      "parser": {
        "VisitorKeys": {
          "ArrayExpression": [
            "elements",
          ],
          "ArrayPattern": [
            "elements",
          ],
          "ArrowFunctionExpression": [
            "params",
            "body",
          ],
          "AssignmentExpression": [
            "left",
            "right",
          ],
          "AssignmentPattern": [
            "left",
            "right",
          ],
          "AwaitExpression": [
            "argument",
          ],
          "BinaryExpression": [
            "left",
            "right",
          ],
          "BlockStatement": [
            "body",
          ],
          "BreakStatement": [
            "label",
          ],
          "CallExpression": [
            "callee",
            "arguments",
          ],
          "CatchClause": [
            "param",
            "body",
          ],
          "ChainExpression": [
            "expression",
          ],
          "ClassBody": [
            "body",
          ],
          "ClassDeclaration": [
            "id",
            "superClass",
            "body",
          ],
          "ClassExpression": [
            "id",
            "superClass",
            "body",
          ],
          "ConditionalExpression": [
            "test",
            "consequent",
            "alternate",
          ],
          "ContinueStatement": [
            "label",
          ],
          "DebuggerStatement": [],
          "DoWhileStatement": [
            "body",
            "test",
          ],
          "EmptyStatement": [],
          "ExperimentalRestProperty": [
            "argument",
          ],
          "ExperimentalSpreadProperty": [
            "argument",
          ],
          "ExportAllDeclaration": [
            "exported",
            "source",
            "attributes",
          ],
          "ExportDefaultDeclaration": [
            "declaration",
          ],
          "ExportNamedDeclaration": [
            "declaration",
            "specifiers",
            "source",
            "attributes",
          ],
          "ExportSpecifier": [
            "local",
            "exported",
          ],
          "ExpressionStatement": [
            "expression",
          ],
          "ForInStatement": [
            "left",
            "right",
            "body",
          ],
          "ForOfStatement": [
            "left",
            "right",
            "body",
          ],
          "ForStatement": [
            "init",
            "test",
            "update",
            "body",
          ],
          "FunctionDeclaration": [
            "id",
            "params",
            "body",
          ],
          "FunctionExpression": [
            "id",
            "params",
            "body",
          ],
          "Identifier": [],
          "IfStatement": [
            "test",
            "consequent",
            "alternate",
          ],
          "ImportAttribute": [
            "key",
            "value",
          ],
          "ImportDeclaration": [
            "specifiers",
            "source",
            "attributes",
          ],
          "ImportDefaultSpecifier": [
            "local",
          ],
          "ImportExpression": [
            "source",
            "options",
          ],
          "ImportNamespaceSpecifier": [
            "local",
          ],
          "ImportSpecifier": [
            "imported",
            "local",
          ],
          "JSONArrayExpression": [
            "elements",
          ],
          "JSONBinaryExpression": [
            "left",
            "right",
          ],
          "JSONExpressionStatement": [
            "expression",
          ],
          "JSONIdentifier": [],
          "JSONLiteral": [],
          "JSONObjectExpression": [
            "properties",
          ],
          "JSONProperty": [
            "key",
            "value",
          ],
          "JSONTemplateElement": [],
          "JSONTemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "JSONUnaryExpression": [
            "argument",
          ],
          "JSXAttribute": [
            "name",
            "value",
          ],
          "JSXClosingElement": [
            "name",
          ],
          "JSXClosingFragment": [],
          "JSXElement": [
            "openingElement",
            "children",
            "closingElement",
          ],
          "JSXEmptyExpression": [],
          "JSXExpressionContainer": [
            "expression",
          ],
          "JSXFragment": [
            "openingFragment",
            "children",
            "closingFragment",
          ],
          "JSXIdentifier": [],
          "JSXMemberExpression": [
            "object",
            "property",
          ],
          "JSXNamespacedName": [
            "namespace",
            "name",
          ],
          "JSXOpeningElement": [
            "name",
            "attributes",
          ],
          "JSXOpeningFragment": [],
          "JSXSpreadAttribute": [
            "argument",
          ],
          "JSXSpreadChild": [
            "expression",
          ],
          "JSXText": [],
          "LabeledStatement": [
            "label",
            "body",
          ],
          "Literal": [],
          "LogicalExpression": [
            "left",
            "right",
          ],
          "MemberExpression": [
            "object",
            "property",
          ],
          "MetaProperty": [
            "meta",
            "property",
          ],
          "MethodDefinition": [
            "key",
            "value",
          ],
          "NewExpression": [
            "callee",
            "arguments",
          ],
          "ObjectExpression": [
            "properties",
          ],
          "ObjectPattern": [
            "properties",
          ],
          "PrivateIdentifier": [],
          "Program": [
            "body",
          ],
          "Property": [
            "key",
            "value",
          ],
          "PropertyDefinition": [
            "key",
            "value",
          ],
          "RestElement": [
            "argument",
          ],
          "ReturnStatement": [
            "argument",
          ],
          "SequenceExpression": [
            "expressions",
          ],
          "SpreadElement": [
            "argument",
          ],
          "StaticBlock": [
            "body",
          ],
          "Super": [],
          "SwitchCase": [
            "test",
            "consequent",
          ],
          "SwitchStatement": [
            "discriminant",
            "cases",
          ],
          "TaggedTemplateExpression": [
            "tag",
            "quasi",
          ],
          "TemplateElement": [],
          "TemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "ThisExpression": [],
          "ThrowStatement": [
            "argument",
          ],
          "TryStatement": [
            "block",
            "handler",
            "finalizer",
          ],
          "UnaryExpression": [
            "argument",
          ],
          "UpdateExpression": [
            "argument",
          ],
          "VariableDeclaration": [
            "declarations",
          ],
          "VariableDeclarator": [
            "id",
            "init",
          ],
          "WhileStatement": [
            "test",
            "body",
          ],
          "WithStatement": [
            "object",
            "body",
          ],
          "YieldExpression": [
            "argument",
          ],
        },
        "getStaticJSONValue": [Function],
        "isExpression": [Function],
        "isNumberIdentifier": [Function],
        "isUndefinedIdentifier": [Function],
        "meta": {
          "name": "jsonc-eslint-parser",
          "version": "2.4.0",
        },
        "name": "jsonc-eslint-parser",
        "parseForESLint": [Function],
        "parseJSON": [Function],
        "traverseNodes": [Function],
      },
    },
    "rules": {
      "no-unused-expressions": "off",
      "no-unused-vars": "off",
      "strict": "off",
    },
  },
  {
    "rules": {
      "jsonc/array-bracket-newline": "off",
      "jsonc/array-bracket-spacing": "off",
      "jsonc/array-element-newline": "off",
      "jsonc/comma-dangle": "off",
      "jsonc/comma-style": "off",
      "jsonc/indent": "off",
      "jsonc/key-spacing": "off",
      "jsonc/no-floating-decimal": "off",
      "jsonc/object-curly-newline": "off",
      "jsonc/object-curly-spacing": "off",
      "jsonc/object-property-newline": "off",
      "jsonc/quote-props": "off",
      "jsonc/quotes": "off",
      "jsonc/space-unary-ops": "off",
    },
  },
  {
    "files": [
      "*.json",
      "**/*.json",
      "*.json5",
      "**/*.json5",
      "*.jsonc",
      "**/*.jsonc",
      "**/*.vue",
    ],
    "ignores": [
      "**/.nuxt",
      "**/.output",
      "**/dist",
      "**/node_modules",
      "coverage/**",
      "**/package.json",
    ],
    "name": "json/sort-keys",
    "rules": {
      "jsonc/sort-keys": [
        "error",
        "asc",
      ],
    },
  },
]
`;
