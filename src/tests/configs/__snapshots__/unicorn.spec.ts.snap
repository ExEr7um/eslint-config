// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Конфиг unicorn > Имеет все параметры 1`] = `
[
  {
    "languageOptions": {
      "globals": {
        "AggregateError": false,
        "Array": false,
        "ArrayBuffer": false,
        "Atomics": false,
        "BigInt": false,
        "BigInt64Array": false,
        "BigUint64Array": false,
        "Boolean": false,
        "DataView": false,
        "Date": false,
        "Error": false,
        "EvalError": false,
        "FinalizationRegistry": false,
        "Float16Array": false,
        "Float32Array": false,
        "Float64Array": false,
        "Function": false,
        "Infinity": false,
        "Int16Array": false,
        "Int32Array": false,
        "Int8Array": false,
        "Intl": false,
        "Iterator": false,
        "JSON": false,
        "Map": false,
        "Math": false,
        "NaN": false,
        "Number": false,
        "Object": false,
        "Promise": false,
        "Proxy": false,
        "RangeError": false,
        "ReferenceError": false,
        "Reflect": false,
        "RegExp": false,
        "Set": false,
        "SharedArrayBuffer": false,
        "String": false,
        "Symbol": false,
        "SyntaxError": false,
        "TypeError": false,
        "URIError": false,
        "Uint16Array": false,
        "Uint32Array": false,
        "Uint8Array": false,
        "Uint8ClampedArray": false,
        "WeakMap": false,
        "WeakRef": false,
        "WeakSet": false,
        "decodeURI": false,
        "decodeURIComponent": false,
        "encodeURI": false,
        "encodeURIComponent": false,
        "escape": false,
        "eval": false,
        "globalThis": false,
        "isFinite": false,
        "isNaN": false,
        "parseFloat": false,
        "parseInt": false,
        "undefined": false,
        "unescape": false,
      },
    },
    "name": "unicorn/recommended",
    "plugins": {
      "unicorn": {
        "meta": {
          "name": "eslint-plugin-unicorn",
          "version": "59.0.1",
        },
        "rules": {
          "better-regex": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "sortCharacterClasses": true,
                },
              ],
              "docs": {
                "description": "Improve regexes by making them shorter, consistent, and safer.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/better-regex.md",
              },
              "fixable": "code",
              "messages": {
                "better-regex": "{{original}} can be optimized to {{optimized}}.",
                "better-regex/parse-error": "Problem parsing {{original}}: {{error}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "sortCharacterClasses": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "catch-error-name": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Enforce a specific parameter name in catch clauses.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/catch-error-name.md",
              },
              "fixable": "code",
              "messages": {
                "catch-error-name": "The catch parameter \`{{originalName}}\` should be named \`{{fixedName}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignore": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "name": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-assert": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce consistent assertion style with \`node:assert\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-assert.md",
              },
              "fixable": "code",
              "messages": {
                "consistent-assert/error": "Prefer \`{{name}}.ok(…)\` over \`{{name}}(…)\`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "consistent-date-clone": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer passing \`Date\` directly to the constructor when cloning.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-date-clone.md",
              },
              "fixable": "code",
              "messages": {
                "consistent-date-clone/error": "Unnecessary \`.getTime()\` call.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "consistent-destructuring": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Use destructured variables over properties.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-destructuring.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "consistentDestructuring": "Use destructured variables over properties.",
                "consistentDestructuringSuggest": "Replace \`{{expression}}\` with destructured property \`{{property}}\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "consistent-empty-array-spread": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer consistent types when spreading a ternary in an array literal.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-empty-array-spread.md",
              },
              "fixable": "code",
              "messages": {
                "consistent-empty-array-spread": "Prefer using empty {{replacementDescription}} since the {{anotherNodePosition}} is {{anotherNodeDescription}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "consistent-existence-index-check": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce consistent style for element existence checks with \`indexOf()\`, \`lastIndexOf()\`, \`findIndex()\`, and \`findLastIndex()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-existence-index-check.md",
              },
              "fixable": "code",
              "messages": {
                "consistent-existence-index-check": "Prefer \`{{replacementOperator}} {{replacementValue}}\` over \`{{originalOperator}} {{originalValue}}\` to check {{existenceOrNonExistence}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "consistent-function-scoping": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "checkArrowFunctions": true,
                },
              ],
              "docs": {
                "description": "Move function definitions to the highest possible scope.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-function-scoping.md",
              },
              "messages": {
                "consistent-function-scoping": "Move {{functionNameWithKind}} to the outer scope.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkArrowFunctions": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "custom-error-definition": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce correct \`Error\` subclassing.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/custom-error-definition.md",
              },
              "fixable": "code",
              "messages": {
                "invalidExport": "Exported error name should match error class",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "empty-brace-spaces": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce no spaces between braces.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/empty-brace-spaces.md",
              },
              "fixable": "whitespace",
              "messages": {
                "empty-brace-spaces": "Do not add spaces between braces.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "error-message": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce passing a \`message\` value when creating a built-in error.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/error-message.md",
              },
              "messages": {
                "message-is-empty-string": "Error message should not be an empty string.",
                "message-is-not-a-string": "Error message should be a string.",
                "missing-message": "Pass a message to the \`{{constructorName}}\` constructor.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "escape-case": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                "uppercase",
              ],
              "docs": {
                "description": "Require escape sequences to use uppercase or lowercase values.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/escape-case.md",
              },
              "fixable": "code",
              "messages": {
                "escape-lowercase": "Use lowercase characters for the value of the escape sequence.",
                "escape-uppercase": "Use uppercase characters for the value of the escape sequence.",
              },
              "schema": [
                {
                  "enum": [
                    "uppercase",
                    "lowercase",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "expiring-todo-comments": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "allowWarningComments": true,
                  "ignore": [],
                  "ignoreDatesOnPullRequests": true,
                  "terms": [
                    "todo",
                    "fixme",
                    "xxx",
                  ],
                },
              ],
              "docs": {
                "description": "Add expiration conditions to TODO comments.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/expiring-todo-comments.md",
              },
              "messages": {
                "unexpectedComment": "Unexpected '{{matchedTerm}}' comment without any conditions: '{{comment}}'.",
                "unicorn/avoidMultipleDates": "Avoid using multiple expiration dates in TODO: {{expirationDates}}. {{message}}",
                "unicorn/avoidMultiplePackageVersions": "Avoid using multiple package versions in TODO: {{versions}}. {{message}}",
                "unicorn/dontHavePackage": "There is a TODO that is deprecated since you uninstalled: {{package}}. {{message}}",
                "unicorn/engineMatches": "There is a TODO match for Node.js version: {{comparison}}. {{message}}",
                "unicorn/expiredTodo": "There is a TODO that is past due date: {{expirationDate}}. {{message}}",
                "unicorn/havePackage": "There is a TODO that is deprecated since you installed: {{package}}. {{message}}",
                "unicorn/missingAtSymbol": "Missing '@' on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                "unicorn/reachedPackageVersion": "There is a TODO that is past due package version: {{comparison}}. {{message}}",
                "unicorn/removeWhitespaces": "Avoid using whitespace on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                "unicorn/versionMatches": "There is a TODO match for package version: {{comparison}}. {{message}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowWarningComments": {
                      "type": "boolean",
                    },
                    "date": {
                      "format": "date",
                      "type": "string",
                    },
                    "ignore": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreDatesOnPullRequests": {
                      "type": "boolean",
                    },
                    "terms": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "explicit-length-check": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce explicitly comparing the \`length\` or \`size\` property of a value.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/explicit-length-check.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "non-zero": "Use \`.{{property}} {{code}}\` when checking {{property}} is not zero.",
                "suggestion": "Replace \`.{{property}}\` with \`.{{property}} {{code}}\`.",
                "zero": "Use \`.{{property}} {{code}}\` when checking {{property}} is zero.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "non-zero": {
                      "default": "greater-than",
                      "enum": [
                        "greater-than",
                        "not-equal",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "filename-case": {
            "create": [Function],
            "meta": {
              "defaultOptions": [],
              "docs": {
                "description": "Enforce a case style for filenames.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/filename-case.md",
              },
              "messages": {
                "filename-case": "Filename is not in {{chosenCases}}. Rename it to {{renamedFilenames}}.",
                "filename-extension": "File extension \`{{extension}}\` is not in lowercase. Rename it to \`{{filename}}\`.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "case": {
                          "enum": [
                            "camelCase",
                            "snakeCase",
                            "kebabCase",
                            "pascalCase",
                          ],
                        },
                        "ignore": {
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "multipleFileExtensions": {
                          "type": "boolean",
                        },
                      },
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "cases": {
                          "additionalProperties": false,
                          "properties": {
                            "camelCase": {
                              "type": "boolean",
                            },
                            "kebabCase": {
                              "type": "boolean",
                            },
                            "pascalCase": {
                              "type": "boolean",
                            },
                            "snakeCase": {
                              "type": "boolean",
                            },
                          },
                        },
                        "ignore": {
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "multipleFileExtensions": {
                          "type": "boolean",
                        },
                      },
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "import-style": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Enforce specific import styles per module.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/import-style.md",
              },
              "messages": {
                "importStyle": "Use {{allowedStyles}} import for module \`{{moduleName}}\`.",
              },
              "schema": {
                "additionalItems": false,
                "definitions": {
                  "booleanObject": {
                    "additionalProperties": {
                      "type": "boolean",
                    },
                    "type": "object",
                  },
                  "moduleStyles": {
                    "additionalProperties": {
                      "$ref": "#/definitions/styles",
                    },
                    "type": "object",
                  },
                  "styles": {
                    "anyOf": [
                      {
                        "enum": [
                          false,
                        ],
                      },
                      {
                        "$ref": "#/definitions/booleanObject",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "checkDynamicImport": {
                        "type": "boolean",
                      },
                      "checkExportFrom": {
                        "type": "boolean",
                      },
                      "checkImport": {
                        "type": "boolean",
                      },
                      "checkRequire": {
                        "type": "boolean",
                      },
                      "extendDefaultStyles": {
                        "type": "boolean",
                      },
                      "styles": {
                        "$ref": "#/definitions/moduleStyles",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "type": "problem",
            },
          },
          "new-for-builtins": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce the use of \`new\` for all builtins, except \`String\`, \`Number\`, \`Boolean\`, \`Symbol\` and \`BigInt\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/new-for-builtins.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "disallow": "Use \`{{name}}()\` instead of \`new {{name}}()\`.",
                "enforce": "Use \`new {{name}}()\` instead of \`{{name}}()\`.",
                "error-date": "Use \`String(new Date())\` instead of \`Date()\`.",
                "suggestion-date": "Switch to \`String(new Date())\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-abusive-eslint-disable": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce specifying rules to disable in \`eslint-disable\` comments.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-abusive-eslint-disable.md",
              },
              "messages": {
                "no-abusive-eslint-disable": "Specify the rules you want to disable.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-accessor-recursion": {
            "create": [Function],
            "meta": {
              "defaultOptions": [],
              "docs": {
                "description": "Disallow recursive access to \`this\` within getters and setters.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-accessor-recursion.md",
              },
              "messages": {
                "no-accessor-recursion/error": "Disallow recursive access to \`this\` within {{kind}}ters.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-anonymous-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow anonymous functions and classes as the default export.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-anonymous-default-export.md",
              },
              "hasSuggestions": true,
              "messages": {
                "no-anonymous-default-export/error": "The {{description}} should be named.",
                "no-anonymous-default-export/suggestion": "Name it as \`{{name}}\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-array-callback-reference": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prevent passing a function reference directly to iterator methods.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-callback-reference.md",
              },
              "hasSuggestions": true,
              "messages": {
                "error-with-name": "Do not pass function \`{{name}}\` directly to \`.{{method}}(…)\`.",
                "error-without-name": "Do not pass function directly to \`.{{method}}(…)\`.",
                "replace-with-name": "Replace function \`{{name}}\` with \`… => {{name}}({{parameters}})\`.",
                "replace-without-name": "Replace function with \`… => …({{parameters}})\`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-array-for-each": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`for…of\` over the \`forEach\` method.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-for-each.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "no-array-for-each/error": "Use \`for…of\` instead of \`.forEach(…)\`.",
                "no-array-for-each/suggestion": "Switch to \`for…of\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-array-method-this-argument": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow using the \`this\` argument in array methods.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-method-this-argument.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error-prototype-method": "Do not use the \`this\` argument in \`Array#{{method}}()\`.",
                "error-static-method": "Do not use the \`this\` argument in \`Array.{{method}}()\`.",
                "suggestion-bind": "Use a bound function.",
                "suggestion-remove": "Remove this argument.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-array-push-push": {
            "create": [Function],
            "meta": {
              "deprecated": {
                "message": "Replaced by \`unicorn/prefer-single-call\` which covers more cases.",
                "replacedBy": [
                  "unicorn/prefer-single-call",
                ],
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-array-push-push",
              },
              "docs": {
                "description": "Replaced by \`unicorn/prefer-single-call\` which covers more cases.",
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-array-push-push",
              },
            },
          },
          "no-array-reduce": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "allowSimpleOperations": true,
                },
              ],
              "docs": {
                "description": "Disallow \`Array#reduce()\` and \`Array#reduceRight()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-reduce.md",
              },
              "messages": {
                "reduce": "\`Array#reduce()\` is not allowed. Prefer other types of loop for readability.",
                "reduceRight": "\`Array#reduceRight()\` is not allowed. Prefer other types of loop for readability. You may want to call \`Array#toReversed()\` before looping it.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSimpleOperations": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-await-expression-member": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow member access from await expression.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-await-expression-member.md",
              },
              "fixable": "code",
              "messages": {
                "no-await-expression-member": "Do not access a member directly from an await expression.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-await-in-promise-methods": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow using \`await\` in \`Promise\` method parameters.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-await-in-promise-methods.md",
              },
              "hasSuggestions": true,
              "messages": {
                "no-await-in-promise-methods/error": "Promise in \`Promise.{{method}}()\` should not be awaited.",
                "no-await-in-promise-methods/suggestion": "Remove \`await\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-console-spaces": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Do not use leading/trailing space between \`console.log\` parameters.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-console-spaces.md",
              },
              "fixable": "code",
              "messages": {
                "no-console-spaces": "Do not use {{position}} space between \`console.{{method}}\` parameters.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-document-cookie": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Do not use \`document.cookie\` directly.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-document-cookie.md",
              },
              "messages": {
                "no-document-cookie": "Do not use \`document.cookie\` directly.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-empty-file": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow empty files.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-empty-file.md",
              },
              "messages": {
                "no-empty-file": "Empty files are not allowed.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-for-loop": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Do not use a \`for\` loop that can be replaced with a \`for-of\` loop.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-for-loop.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "no-for-loop": "Use a \`for-of\` loop instead of this \`for\` loop.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-hex-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-hex-escape.md",
              },
              "fixable": "code",
              "messages": {
                "no-hex-escape": "Use Unicode escapes instead of hexadecimal escapes.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-instanceof-array": {
            "create": [Function],
            "meta": {
              "deprecated": {
                "message": "Replaced by \`unicorn/no-instanceof-builtins\` which covers more cases.",
                "replacedBy": [
                  "unicorn/no-instanceof-builtins",
                ],
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-instanceof-array",
              },
              "docs": {
                "description": "Replaced by \`unicorn/no-instanceof-builtins\` which covers more cases.",
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-instanceof-array",
              },
            },
          },
          "no-instanceof-builtins": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "exclude": [],
                  "include": [],
                  "strategy": "loose",
                  "useErrorIsError": false,
                },
              ],
              "docs": {
                "description": "Disallow \`instanceof\` with built-in objects",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-instanceof-builtins.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "no-instanceof-builtins": "Avoid using \`instanceof\` for type checking as it can lead to unreliable results.",
                "switch-to-type-of": "Switch to \`typeof … === '{{type}}'\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "exclude": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "include": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "strategy": {
                      "enum": [
                        "loose",
                        "strict",
                      ],
                    },
                    "useErrorIsError": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-invalid-fetch-options": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow invalid options in \`fetch()\` and \`new Request()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-invalid-fetch-options.md",
              },
              "messages": {
                "no-invalid-fetch-options": ""body" is not allowed when method is "{{method}}".",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-invalid-remove-event-listener": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prevent calling \`EventTarget#removeEventListener()\` with the result of an expression.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-invalid-remove-event-listener.md",
              },
              "messages": {
                "no-invalid-remove-event-listener": "The listener argument should be a function reference.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-keyword-prefix": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Disallow identifiers starting with \`new\` or \`class\`.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-keyword-prefix.md",
              },
              "messages": {
                "noKeywordPrefix": "Do not prefix identifiers with keyword \`{{keyword}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkProperties": {
                      "type": "boolean",
                    },
                    "disallowedPrefixes": {
                      "items": [
                        {
                          "type": "string",
                        },
                      ],
                      "minItems": 0,
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "onlyCamelCase": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-length-as-slice-end": {
            "create": [Function],
            "meta": {
              "deprecated": {
                "message": "Replaced by \`unicorn/no-unnecessary-slice-end\` which covers more cases.",
                "replacedBy": [
                  "unicorn/no-unnecessary-slice-end",
                ],
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-length-as-slice-end",
              },
              "docs": {
                "description": "Replaced by \`unicorn/no-unnecessary-slice-end\` which covers more cases.",
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-length-as-slice-end",
              },
            },
          },
          "no-lonely-if": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow \`if\` statements as the only statement in \`if\` blocks without \`else\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-lonely-if.md",
              },
              "fixable": "code",
              "messages": {
                "no-lonely-if": "Unexpected \`if\` as the only statement in a \`if\` block without \`else\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-magic-array-flat-depth": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow a magic number as the \`depth\` argument in \`Array#flat(…).\`",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-magic-array-flat-depth.md",
              },
              "messages": {
                "no-magic-array-flat-depth": "Magic number as depth is not allowed.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-default": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow named usage of default import and export.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-named-default.md",
              },
              "fixable": "code",
              "messages": {
                "no-named-default": "Prefer using the default {{type}} over named {{type}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-negated-condition": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow negated conditions.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-negated-condition.md",
              },
              "fixable": "code",
              "messages": {
                "no-negated-condition": "Unexpected negated condition.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-negation-in-equality-check": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow negated expression in equality check.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-negation-in-equality-check.md",
              },
              "hasSuggestions": true,
              "messages": {
                "no-negation-in-equality-check/error": "Negated expression is not allowed in equality check.",
                "no-negation-in-equality-check/suggestion": "Switch to '{{operator}}' check.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-nested-ternary": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow nested ternary expressions.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-nested-ternary.md",
              },
              "fixable": "code",
              "messages": {
                "should-parenthesized": "Nest ternary expression should be parenthesized.",
                "too-deep": "Do not nest ternary expressions.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-new-array": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow \`new Array()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-new-array.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "array-length": "The argument is the length of array.",
                "error": "\`new Array()\` is unclear in intent; use either \`[x]\` or \`Array.from({length: x})\`",
                "only-element": "The argument is the only element of array.",
                "spread": "Spread the argument.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-new-buffer": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce the use of \`Buffer.from()\` and \`Buffer.alloc()\` instead of the deprecated \`new Buffer()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-new-buffer.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "\`new Buffer()\` is deprecated, use \`Buffer.{{method}}()\` instead.",
                "error-unknown": "\`new Buffer()\` is deprecated, use \`Buffer.alloc()\` or \`Buffer.from()\` instead.",
                "suggestion": "Switch to \`Buffer.{{replacement}}()\`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-null": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "checkStrictEquality": false,
                },
              ],
              "docs": {
                "description": "Disallow the use of the \`null\` literal.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-null.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "Use \`undefined\` instead of \`null\`.",
                "remove": "Remove \`null\`.",
                "replace": "Replace \`null\` with \`undefined\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkStrictEquality": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-object-as-default-parameter": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow the use of objects as default parameters.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-object-as-default-parameter.md",
              },
              "messages": {
                "identifier": "Do not use an object literal as default for parameter \`{{parameter}}\`.",
                "non-identifier": "Do not use an object literal as default.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-process-exit": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow \`process.exit()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-process-exit.md",
              },
              "messages": {
                "no-process-exit": "Only use \`process.exit()\` in CLI apps. Throw an error instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-single-promise-in-promise-methods": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow passing single-element arrays to \`Promise\` methods.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-single-promise-in-promise-methods.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "no-single-promise-in-promise-methods/error": "Wrapping single-element array with \`Promise.{{method}}()\` is unnecessary.",
                "no-single-promise-in-promise-methods/unwrap": "Use the value directly.",
                "no-single-promise-in-promise-methods/use-promise-resolve": "Switch to \`Promise.resolve(…)\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-static-only-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow classes that only have static members.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-static-only-class.md",
              },
              "fixable": "code",
              "messages": {
                "no-static-only-class": "Use an object instead of a class with only static members.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-thenable": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow \`then\` property.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-thenable.md",
              },
              "messages": {
                "no-thenable-class": "Do not add \`then\` to a class.",
                "no-thenable-export": "Do not export \`then\`.",
                "no-thenable-object": "Do not add \`then\` to an object.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-this-assignment": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow assigning \`this\` to a variable.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-this-assignment.md",
              },
              "messages": {
                "no-this-assignment": "Do not assign \`this\` to \`{{name}}\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-typeof-undefined": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "checkGlobalVariables": false,
                },
              ],
              "docs": {
                "description": "Disallow comparing \`undefined\` using \`typeof\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-typeof-undefined.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "no-typeof-undefined/error": "Compare with \`undefined\` directly instead of using \`typeof\`.",
                "no-typeof-undefined/suggestion": "Switch to \`… {{operator}} undefined\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkGlobalVariables": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-array-flat-depth": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow using \`1\` as the \`depth\` argument of \`Array#flat()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-array-flat-depth.md",
              },
              "fixable": "code",
              "messages": {
                "no-unnecessary-array-flat-depth": "Passing \`1\` as the \`depth\` argument is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-array-splice-count": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow using \`.length\` or \`Infinity\` as the \`deleteCount\` or \`skipCount\` argument of \`Array#{splice,toSpliced}()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-array-splice-count.md",
              },
              "fixable": "code",
              "messages": {
                "no-unnecessary-array-splice-count": "Passing \`{{description}}\` as the \`{{argumentName}}\` argument is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-await": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow awaiting non-promise values.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-await.md",
              },
              "fixable": "code",
              "messages": {
                "no-unnecessary-await": "Do not \`await\` non-promise value.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-polyfills": {
            "create": [Function],
            "meta": {
              "defaultOptions": [],
              "docs": {
                "description": "Enforce the use of built-in methods instead of unnecessary polyfills.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-polyfills.md",
              },
              "messages": {
                "unnecessaryCoreJsModule": "All polyfilled features imported from \`{{coreJsModule}}\` are available as built-ins. Use the built-ins instead.",
                "unnecessaryPolyfill": "Use built-in instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "targets": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "type": "array",
                        },
                        {
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "required": [
                    "targets",
                  ],
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-slice-end": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow using \`.length\` or \`Infinity\` as the \`end\` argument of \`{Array,String,TypedArray}#slice()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-slice-end.md",
              },
              "fixable": "code",
              "messages": {
                "no-unnecessary-slice-end": "Passing \`{{description}}\` as the \`end\` argument is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unreadable-array-destructuring": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unreadable array destructuring.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unreadable-array-destructuring.md",
              },
              "fixable": "code",
              "messages": {
                "no-unreadable-array-destructuring": "Array destructuring may not contain consecutive ignored values.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unreadable-iife": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unreadable IIFEs.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unreadable-iife.md",
              },
              "hasSuggestions": false,
              "messages": {
                "no-unreadable-iife": "IIFE with parenthesized arrow function body is considered unreadable.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unused-properties": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unused object properties.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unused-properties.md",
              },
              "messages": {
                "no-unused-properties": "Property \`{{name}}\` is defined but never used.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-fallback-in-spread": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow useless fallback when spreading in object literals.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-fallback-in-spread.md",
              },
              "fixable": "code",
              "messages": {
                "no-useless-fallback-in-spread": "The empty object is useless.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-length-check": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow useless array length check.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-length-check.md",
              },
              "fixable": "code",
              "messages": {
                "non-zero": "The non-empty check is useless as \`Array#some()\` returns \`false\` for an empty array.",
                "zero": "The empty check is useless as \`Array#every()\` returns \`true\` for an empty array.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-promise-resolve-reject": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow returning/yielding \`Promise.resolve/reject()\` in async functions or promise callbacks",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-promise-resolve-reject.md",
              },
              "fixable": "code",
              "messages": {
                "reject": "Prefer \`throw error\` over \`{{type}} Promise.reject(error)\`.",
                "resolve": "Prefer \`{{type}} value\` over \`{{type}} Promise.resolve(value)\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-spread": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary spread.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-spread.md",
              },
              "fixable": "code",
              "messages": {
                "clone-array": "Unnecessarily cloning an array.",
                "iterable-to-array": "\`{{parentDescription}}\` accepts iterable as argument, it's unnecessary to convert to an array.",
                "iterable-to-array-in-for-of": "\`for…of\` can iterate over iterable, it's unnecessary to convert to an array.",
                "iterable-to-array-in-yield-star": "\`yield*\` can delegate iterable, it's unnecessary to convert to an array.",
                "spread-in-list": "Spread an {{argumentType}} literal in {{parentDescription}} is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-switch-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow useless case in switch statements.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-switch-case.md",
              },
              "hasSuggestions": true,
              "messages": {
                "no-useless-switch-case/error": "Useless case in switch statement.",
                "no-useless-switch-case/suggestion": "Remove this case.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-undefined": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Disallow useless \`undefined\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-undefined.md",
              },
              "fixable": "code",
              "messages": {
                "no-useless-undefined": "Do not use useless \`undefined\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkArguments": {
                      "type": "boolean",
                    },
                    "checkArrowFunctionBody": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-zero-fractions": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow number literals with zero fractions or dangling dots.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-zero-fractions.md",
              },
              "fixable": "code",
              "messages": {
                "dangling-dot": "Don't use a dangling dot in the number.",
                "zero-fraction": "Don't use a zero fraction in the number.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "number-literal-case": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "hexadecimalValue": "uppercase",
                },
              ],
              "docs": {
                "description": "Enforce proper case for numeric literals.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/number-literal-case.md",
              },
              "fixable": "code",
              "messages": {
                "number-literal-case": "Invalid number literal casing.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "hexadecimalValue": {
                      "enum": [
                        "uppercase",
                        "lowercase",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "numeric-separators-style": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "binary": {
                    "groupLength": 4,
                    "minimumDigits": 0,
                  },
                  "hexadecimal": {
                    "groupLength": 2,
                    "minimumDigits": 0,
                  },
                  "number": {
                    "groupLength": 3,
                    "minimumDigits": 5,
                  },
                  "octal": {
                    "groupLength": 4,
                    "minimumDigits": 0,
                  },
                  "onlyIfContainsSeparator": false,
                },
              ],
              "docs": {
                "description": "Enforce the style of numeric separators by correctly grouping digits.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/numeric-separators-style.md",
              },
              "fixable": "code",
              "messages": {
                "numeric-separators-style": "Invalid group length in numeric value.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "binary": {
                      "additionalProperties": false,
                      "properties": {
                        "groupLength": {
                          "minimum": 1,
                          "type": "integer",
                        },
                        "minimumDigits": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "onlyIfContainsSeparator": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "hexadecimal": {
                      "additionalProperties": false,
                      "properties": {
                        "groupLength": {
                          "minimum": 1,
                          "type": "integer",
                        },
                        "minimumDigits": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "onlyIfContainsSeparator": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "number": {
                      "additionalProperties": false,
                      "properties": {
                        "groupLength": {
                          "minimum": 1,
                          "type": "integer",
                        },
                        "minimumDigits": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "onlyIfContainsSeparator": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "octal": {
                      "additionalProperties": false,
                      "properties": {
                        "groupLength": {
                          "minimum": 1,
                          "type": "integer",
                        },
                        "minimumDigits": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "onlyIfContainsSeparator": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "onlyIfContainsSeparator": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-add-event-listener": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Prefer \`.addEventListener()\` and \`.removeEventListener()\` over \`on\`-functions.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-add-event-listener.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-add-event-listener": "Prefer \`{{replacement}}\` over \`{{method}}\`.{{extra}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "excludedPackages": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-array-find": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "checkFromLast": true,
                },
              ],
              "docs": {
                "description": "Prefer \`.find(…)\` and \`.findLast(…)\` over the first or last element from \`.filter(…)\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-find.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error-at-minus-one": "Prefer \`.findLast(…)\` over \`.filter(…).at(-1)\`.",
                "error-at-zero": "Prefer \`.find(…)\` over \`.filter(…).at(0)\`.",
                "error-destructuring-assignment": "Prefer \`.find(…)\` over destructuring \`.filter(…)\`.",
                "error-destructuring-declaration": "Prefer \`.find(…)\` over destructuring \`.filter(…)\`.",
                "error-pop": "Prefer \`.findLast(…)\` over \`.filter(…).pop()\`.",
                "error-shift": "Prefer \`.find(…)\` over \`.filter(…).shift()\`.",
                "error-variable": "Prefer \`.find(…)\` over \`.filter(…)\`.",
                "error-zero-index": "Prefer \`.find(…)\` over \`.filter(…)[0]\`.",
                "suggest-logical-or-operator": "Replace \`.filter(…)\` with \`.find(…) || …\`.",
                "suggest-nullish-coalescing-operator": "Replace \`.filter(…)\` with \`.find(…) ?? …\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkFromLast": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-array-flat": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Prefer \`Array#flat()\` over legacy techniques to flatten arrays.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-flat.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-array-flat": "Prefer \`Array#flat()\` over \`{{description}}\` to flatten an array.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "functions": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-array-flat-map": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`.flatMap(…)\` over \`.map(…).flat()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-flat-map.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-array-flat-map": "Prefer \`.flatMap(…)\` over \`.map(…).flat()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-array-index-of": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`Array#{indexOf,lastIndexOf}()\` over \`Array#{findIndex,findLastIndex}()\` when looking for the index of an item.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-index-of.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "prefer-indexOf-over-findIndex/error": "Use \`.indexOf()\` instead of \`.findIndex()\` when looking for the index of an item.",
                "prefer-indexOf-over-findIndex/suggestion": "Replace \`.findIndex()\` with \`.indexOf()\`.",
                "prefer-lastIndexOf-over-findLastIndex/error": "Use \`.lastIndexOf()\` instead of \`findLastIndex() when looking for the index of an item.\`",
                "prefer-lastIndexOf-over-findLastIndex/suggestion": "Replace \`.findLastIndex()\` with \`.lastIndexOf()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-array-some": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`.some(…)\` over \`.filter(…).length\` check and \`.{find,findLast,findIndex,findLastIndex}(…)\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-some.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "filter": "Prefer \`.some(…)\` over non-zero length check from \`.filter(…)\`.",
                "some": "Prefer \`.some(…)\` over \`.{{method}}(…)\`.",
                "some-suggestion": "Replace \`.{{method}}(…)\` with \`.some(…)\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-at": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "checkAllIndexAccess": false,
                  "getLastElementFunctions": [],
                },
              ],
              "docs": {
                "description": "Prefer \`.at()\` method for index access and \`String#charAt()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-at.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "get-last-function": "Prefer \`.at(-1)\` over \`{{description}}(…)\` to get the last element.",
                "index": "Prefer \`.at(…)\` over index access.",
                "negative-index": "Prefer \`.at(…)\` over \`[….length - index]\`.",
                "slice": "Prefer \`.at(…)\` over the first element from \`.slice(…)\`.",
                "string-char-at": "Prefer \`String#at(…)\` over \`String#charAt(…)\`.",
                "string-char-at-negative": "Prefer \`String#at(…)\` over \`String#charAt(….length - index)\`.",
                "use-at": "Use \`.at(…)\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkAllIndexAccess": {
                      "type": "boolean",
                    },
                    "getLastElementFunctions": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-blob-reading-methods": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`Blob#arrayBuffer()\` over \`FileReader#readAsArrayBuffer(…)\` and \`Blob#text()\` over \`FileReader#readAsText(…)\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-blob-reading-methods.md",
              },
              "messages": {
                "error": "Prefer \`Blob#{{replacement}}()\` over \`FileReader#{{method}}(blob)\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-code-point": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`String#codePointAt(…)\` over \`String#charCodeAt(…)\` and \`String.fromCodePoint(…)\` over \`String.fromCharCode(…)\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-code-point.md",
              },
              "hasSuggestions": true,
              "messages": {
                "error/charCodeAt": "Prefer \`String#codePointAt()\` over \`String#charCodeAt()\`.",
                "error/fromCharCode": "Prefer \`String.fromCodePoint()\` over \`String.fromCharCode()\`.",
                "suggestion/codePointAt": "Use \`String#codePointAt()\`.",
                "suggestion/fromCodePoint": "Use \`String.fromCodePoint()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-date-now": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`Date.now()\` to get the number of milliseconds since the Unix Epoch.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-date-now.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-date": "Prefer \`Date.now()\` over \`new Date()\`.",
                "prefer-date-now-over-methods": "Prefer \`Date.now()\` over \`Date#{{method}}()\`.",
                "prefer-date-now-over-number-data-object": "Prefer \`Date.now()\` over \`Number(new Date())\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-default-parameters": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer default parameters over reassignment.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-default-parameters.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "preferDefaultParameters": "Prefer default parameters over reassignment.",
                "preferDefaultParametersSuggest": "Replace reassignment with default parameter.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-dom-node-append": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`Node#append()\` over \`Node#appendChild()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-append.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-dom-node-append": "Prefer \`Node#append()\` over \`Node#appendChild()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-dom-node-dataset": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using \`.dataset\` on DOM elements over calling attribute methods.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-dataset.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-dom-node-dataset": "Prefer \`.dataset\` over \`{{method}}(…)\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-dom-node-remove": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`childNode.remove()\` over \`parentNode.removeChild(childNode)\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-remove.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "Prefer \`childNode.remove()\` over \`parentNode.removeChild(childNode)\`.",
                "suggestion": "Replace \`parentNode.removeChild(childNode)\` with \`childNode{{dotOrQuestionDot}}remove()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-dom-node-text-content": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`.textContent\` over \`.innerText\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-text-content.md",
              },
              "hasSuggestions": true,
              "messages": {
                "error": "Prefer \`.textContent\` over \`.innerText\`.",
                "suggestion": "Switch to \`.textContent\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-event-target": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`EventTarget\` over \`EventEmitter\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-event-target.md",
              },
              "messages": {
                "prefer-event-target": "Prefer \`EventTarget\` over \`EventEmitter\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-export-from": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "ignoreUsedVariables": false,
                },
              ],
              "docs": {
                "description": "Prefer \`export…from\` when re-exporting.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-export-from.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "Use \`export…from\` to re-export \`{{exported}}\`.",
                "suggestion": "Switch to \`export…from\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreUsedVariables": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global-this": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`globalThis\` over \`window\`, \`self\`, and \`global\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-global-this.md",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "prefer-global-this/error": "Prefer \`{{replacement}}\` over \`{{value}}\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-import-meta-properties": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`import.meta.{dirname,filename}\` over legacy techniques for getting file paths.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-import-meta-properties.md",
              },
              "fixable": "code",
              "messages": {
                "error/calculate-dirname": "Do not construct dirname.",
                "error/calculate-filename": "Do not construct filename using \`fileURLToPath()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-includes": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`.includes()\` over \`.indexOf()\`, \`.lastIndexOf()\`, and \`Array#some()\` when checking for existence or non-existence.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-includes.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "prefer-includes": "Use \`.includes()\`, rather than \`.{{method}}()\`, when checking for existence.",
                "prefer-includes-over-some/error": "Use \`.includes()\` instead of \`.some()\` when checking value existence.",
                "prefer-includes-over-some/suggestion": "Replace \`.some()\` with \`.includes()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-json-parse-buffer": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer reading a JSON file as a buffer.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-json-parse-buffer.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-json-parse-buffer": "Prefer reading the JSON file as a buffer.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-keyboard-event-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`KeyboardEvent#key\` over \`KeyboardEvent#keyCode\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-keyboard-event-key.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-keyboard-event-key": "Use \`.key\` instead of \`.{{name}}\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-logical-operator-over-ternary": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using a logical operator over a ternary.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-logical-operator-over-ternary.md",
              },
              "hasSuggestions": true,
              "messages": {
                "prefer-logical-operator-over-ternary/error": "Prefer using a logical operator over a ternary.",
                "prefer-logical-operator-over-ternary/suggestion": "Switch to \`{{operator}}\` operator.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-math-min-max": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`Math.min()\` and \`Math.max()\` over ternaries for simple comparisons.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-math-min-max.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-math-min-max": "Prefer \`Math.{{method}}()\` to simplify ternary expressions.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "prefer-math-trunc": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce the use of \`Math.trunc\` instead of bitwise operators.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-math-trunc.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error-bitwise": "Use \`Math.trunc\` instead of \`{{operator}} {{value}}\`.",
                "error-bitwise-not": "Use \`Math.trunc\` instead of \`~~\`.",
                "suggestion-bitwise": "Replace \`{{operator}} {{value}}\` with \`Math.trunc\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-modern-dom-apis": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`.before()\` over \`.insertBefore()\`, \`.replaceWith()\` over \`.replaceChild()\`, prefer one of \`.before()\`, \`.after()\`, \`.append()\` or \`.prepend()\` over \`insertAdjacentText()\` and \`insertAdjacentElement()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-modern-dom-apis.md",
              },
              "fixable": "code",
              "messages": {
                "insertAdjacentTextOrInsertAdjacentElement": "Prefer \`{{reference}}.{{preferredMethod}}({{content}})\` over \`{{reference}}.{{method}}({{position}}, {{content}})\`.",
                "replaceChildOrInsertBefore": "Prefer \`{{oldChildNode}}.{{preferredMethod}}({{newChildNode}})\` over \`{{parentNode}}.{{method}}({{newChildNode}}, {{oldChildNode}})\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-modern-math-apis": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer modern \`Math\` APIs over legacy patterns.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-modern-math-apis.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-modern-math-apis": "Prefer \`{{replacement}}\` over \`{{description}}\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-module": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer JavaScript modules (ESM) over CommonJS.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-module.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error/global-return": ""return" should be used inside a function.",
                "error/identifier": "Do not use "{{name}}".",
                "error/use-strict-directive": "Do not use "use strict" directive.",
                "suggestion/export": "Switch to \`export\`.",
                "suggestion/import": "Switch to \`import\`.",
                "suggestion/import-meta-dirname": "Replace \`__dirname\` with \`import.meta.dirname\`.",
                "suggestion/import-meta-filename": "Replace \`__filename\` with \`import.meta.filename\`.",
                "suggestion/import-meta-url-to-dirname": "Replace \`__dirname\` with \`…(import.meta.url)\`.",
                "suggestion/import-meta-url-to-filename": "Replace \`__filename\` with \`…(import.meta.url)\`.",
                "suggestion/use-strict-directive": "Remove "use strict" directive.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-native-coercion-functions": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using \`String\`, \`Number\`, \`BigInt\`, \`Boolean\`, and \`Symbol\` directly.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-native-coercion-functions.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-native-coercion-functions": "{{functionNameWithKind}} is equivalent to \`{{replacementFunction}}\`. Use \`{{replacementFunction}}\` directly.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-negative-index": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer negative index over \`.length - index\` when possible.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-negative-index.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-negative-index": "Prefer negative index over length minus index for \`{{method}}\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-node-protocol": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using the \`node:\` protocol when importing Node.js builtin modules.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-node-protocol.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-node-protocol": "Prefer \`node:{{moduleName}}\` over \`{{moduleName}}\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-number-properties": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "checkInfinity": false,
                  "checkNaN": true,
                },
              ],
              "docs": {
                "description": "Prefer \`Number\` static properties over global ones.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-number-properties.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "Prefer \`Number.{{property}}\` over \`{{description}}\`.",
                "suggestion": "Replace \`{{description}}\` with \`Number.{{property}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkInfinity": {
                      "type": "boolean",
                    },
                    "checkNaN": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-object-from-entries": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Prefer using \`Object.fromEntries(…)\` to transform a list of key-value pairs into an object.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-object-from-entries.md",
              },
              "fixable": "code",
              "messages": {
                "function": "Prefer \`Object.fromEntries()\` over \`{{functionName}}()\`.",
                "reduce": "Prefer \`Object.fromEntries()\` over \`Array#reduce()\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "functions": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-optional-catch-binding": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer omitting the \`catch\` binding parameter.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-optional-catch-binding.md",
              },
              "fixable": "code",
              "messages": {
                "with-name": "Remove unused catch binding \`{{name}}\`.",
                "without-name": "Remove unused catch binding.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-prototype-methods": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer borrowing methods from the prototype instead of the instance.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-prototype-methods.md",
              },
              "fixable": "code",
              "messages": {
                "known-method": "Prefer using \`{{constructorName}}.prototype.{{methodName}}\`.",
                "unknown-method": "Prefer using method from \`{{constructorName}}.prototype\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-query-selector": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`.querySelector()\` over \`.getElementById()\`, \`.querySelectorAll()\` over \`.getElementsByClassName()\` and \`.getElementsByTagName()\` and \`.getElementsByName()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-query-selector.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-query-selector": "Prefer \`.{{replacement}}()\` over \`.{{method}}()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-reflect-apply": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`Reflect.apply()\` over \`Function#apply()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-reflect-apply.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-reflect-apply": "Prefer \`Reflect.apply()\` over \`Function#apply()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-regexp-test": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`RegExp#test()\` over \`String#match()\` and \`RegExp#exec()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-regexp-test.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "regexp-exec": "Prefer \`.test(…)\` over \`.exec(…)\`.",
                "string-match": "Prefer \`RegExp#test(…)\` over \`String#match(…)\`.",
                "suggestion": "Switch to \`RegExp#test(…)\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-set-has": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`Set#has()\` over \`Array#includes()\` when checking for existence or non-existence.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-set-has.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error": "\`{{name}}\` should be a \`Set\`, and use \`{{name}}.has()\` to check existence or non-existence.",
                "suggestion": "Switch \`{{name}}\` to \`Set\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-set-size": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using \`Set#size\` instead of \`Array#length\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-set-size.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-set-size": "Prefer using \`Set#size\` instead of \`Array#length\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-single-call": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Enforce combining multiple \`Array#push()\`, \`Element#classList.{add,remove}()\`, and \`importScripts()\` into one call.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-single-call.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "error/array-push": "Do not call \`{{description}}\` multiple times.",
                "suggestion": "Merge with previous one.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignore": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-spread": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer the spread operator over \`Array.from(…)\`, \`Array#concat(…)\`, \`Array#{slice,toSpliced}()\` and \`String#split('')\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-spread.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "argument-is-not-spreadable": "First argument is not an \`array\`.",
                "argument-is-spreadable": "First argument is an \`array\`.",
                "array-concat": "Prefer the spread operator over \`Array#concat(…)\`.",
                "array-from": "Prefer the spread operator over \`Array.from(…)\`.",
                "array-slice": "Prefer the spread operator over \`Array#slice()\`.",
                "array-to-spliced": "Prefer the spread operator over \`Array#toSpliced()\`.",
                "spread-all-arguments": "Spread all unknown arguments\`.",
                "string-split": "Prefer the spread operator over \`String#split('')\`.",
                "test-argument": "Test first argument with \`Array.isArray(…)\`.",
                "use-spread": "Use \`...\` operator.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-raw": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer using the \`String.raw\` tag to avoid escaping \`\\\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-raw.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-string-raw": "\`String.raw\` should be used to avoid escaping \`\\\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-replace-all": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`String#replaceAll()\` over regex searches with the global flag.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-replace-all.md",
              },
              "fixable": "code",
              "messages": {
                "method": "Prefer \`String#replaceAll()\` over \`String#replace()\`.",
                "pattern": "This pattern can be replaced with {{replacement}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-slice": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`String#slice()\` over \`String#substr()\` and \`String#substring()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-slice.md",
              },
              "fixable": "code",
              "messages": {
                "substr": "Prefer \`String#slice()\` over \`String#substr()\`.",
                "substring": "Prefer \`String#slice()\` over \`String#substring()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-starts-ends-with": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`String#startsWith()\` & \`String#endsWith()\` over \`RegExp#test()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-starts-ends-with.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "prefer-ends-with": "Prefer \`String#endsWith()\` over a regex with \`$\`.",
                "prefer-starts-with": "Prefer \`String#startsWith()\` over a regex with \`^\`.",
                "useNullishCoalescing": "Use nullish coalescing \`(… ?? '').{{method}}()\`.",
                "useOptionalChaining": "Use optional chaining \`…?.{{method}}()\`.",
                "useStringCasting": "Convert to string \`String(…).{{method}}()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-trim-start-end": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer \`String#trimStart()\` / \`String#trimEnd()\` over \`String#trimLeft()\` / \`String#trimRight()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-trim-start-end.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-string-trim-start-end": "Prefer \`String#{{replacement}}()\` over \`String#{{method}}()\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-structured-clone": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Prefer using \`structuredClone\` to create a deep clone.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-structured-clone.md",
              },
              "hasSuggestions": true,
              "messages": {
                "prefer-structured-clone/error": "Prefer \`structuredClone(…)\` over \`{{description}}\` to create a deep clone.",
                "prefer-structured-clone/suggestion": "Switch to \`structuredClone(…)\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "functions": {
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-switch": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {
                  "emptyDefaultCase": "no-default-comment",
                  "minimumCases": 3,
                },
              ],
              "docs": {
                "description": "Prefer \`switch\` over multiple \`else-if\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-switch.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-switch": "Use \`switch\` instead of multiple \`else-if\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "emptyDefaultCase": {
                      "enum": [
                        "no-default-comment",
                        "do-nothing-comment",
                        "no-default-case",
                      ],
                    },
                    "minimumCases": {
                      "minimum": 2,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-ternary": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                "always",
              ],
              "docs": {
                "description": "Prefer ternary expressions over simple \`if-else\` statements.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-ternary.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-ternary": "This \`if\` statement can be replaced by a ternary expression.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "only-single-line",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-top-level-await": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Prefer top-level await over top-level promises and async function calls.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-top-level-await.md",
              },
              "hasSuggestions": true,
              "messages": {
                "add-await": "Insert \`await\`.",
                "identifier": "Prefer top-level await over an async function \`{{name}}\` call.",
                "iife": "Prefer top-level await over an async IIFE.",
                "promise": "Prefer top-level await over using a promise chain.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-type-error": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce throwing \`TypeError\` in type checking conditions.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-type-error.md",
              },
              "fixable": "code",
              "messages": {
                "prefer-type-error": "\`new Error()\` is too unspecific for a type check. Use \`new TypeError()\` instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prevent-abbreviations": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Prevent abbreviations.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prevent-abbreviations.md",
              },
              "fixable": "code",
              "messages": {
                "replace": "The {{nameTypeText}} \`{{discouragedName}}\` should be named \`{{replacement}}\`. A more descriptive name will do too.",
                "suggestion": "Please rename the {{nameTypeText}} \`{{discouragedName}}\`. Suggested names are: {{replacementsText}}. A more descriptive name will do too.",
              },
              "schema": {
                "additionalItems": false,
                "definitions": {
                  "abbreviations": {
                    "additionalProperties": {
                      "$ref": "#/definitions/replacements",
                    },
                    "type": "object",
                  },
                  "booleanObject": {
                    "additionalProperties": {
                      "type": "boolean",
                    },
                    "type": "object",
                  },
                  "replacements": {
                    "anyOf": [
                      {
                        "enum": [
                          false,
                        ],
                      },
                      {
                        "$ref": "#/definitions/booleanObject",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowList": {
                        "$ref": "#/definitions/booleanObject",
                      },
                      "checkDefaultAndNamespaceImports": {
                        "pattern": "internal",
                        "type": [
                          "boolean",
                          "string",
                        ],
                      },
                      "checkFilenames": {
                        "type": "boolean",
                      },
                      "checkProperties": {
                        "type": "boolean",
                      },
                      "checkShorthandImports": {
                        "pattern": "internal",
                        "type": [
                          "boolean",
                          "string",
                        ],
                      },
                      "checkShorthandProperties": {
                        "type": "boolean",
                      },
                      "checkVariables": {
                        "type": "boolean",
                      },
                      "extendDefaultAllowList": {
                        "type": "boolean",
                      },
                      "extendDefaultReplacements": {
                        "type": "boolean",
                      },
                      "ignore": {
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "replacements": {
                        "$ref": "#/definitions/abbreviations",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "relative-url-style": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                "never",
              ],
              "docs": {
                "description": "Enforce consistent relative URL style.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/relative-url-style.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "always": "Add a \`./\` prefix to the relative URL.",
                "never": "Remove the \`./\` prefix from the relative URL.",
                "remove": "Remove leading \`./\`.",
              },
              "schema": [
                {
                  "enum": [
                    "never",
                    "always",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "require-array-join-separator": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce using the separator argument with \`Array#join()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/require-array-join-separator.md",
              },
              "fixable": "code",
              "messages": {
                "require-array-join-separator": "Missing the separator argument.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "require-number-to-fixed-digits-argument": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce using the digits argument with \`Number#toFixed()\`.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/require-number-to-fixed-digits-argument.md",
              },
              "fixable": "code",
              "messages": {
                "require-number-to-fixed-digits-argument": "Missing the digits argument.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "require-post-message-target-origin": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce using the \`targetOrigin\` argument with \`window.postMessage()\`.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/require-post-message-target-origin.md",
              },
              "hasSuggestions": true,
              "messages": {
                "error": "Missing the \`targetOrigin\` argument.",
                "suggestion": "Use \`{{code}}\`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "string-content": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Enforce better string content.",
                "recommended": false,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/string-content.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "replace": "Replace \`{{match}}\` with \`{{suggest}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "patterns": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "fix": {
                                "type": "boolean",
                              },
                              "message": {
                                "type": "string",
                              },
                              "suggest": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "suggest",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "switch-case-braces": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                "always",
              ],
              "docs": {
                "description": "Enforce consistent brace style for \`case\` clauses.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/switch-case-braces.md",
              },
              "fixable": "code",
              "messages": {
                "switch-case-braces/empty": "Unexpected braces in empty case clause.",
                "switch-case-braces/missing": "Missing braces in case clause.",
                "switch-case-braces/unnecessary": "Unnecessary braces in case clause.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "avoid",
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "template-indent": {
            "create": [Function],
            "meta": {
              "defaultOptions": [
                {},
              ],
              "docs": {
                "description": "Fix whitespace-insensitive template indentation.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/template-indent.md",
              },
              "fixable": "code",
              "messages": {
                "template-indent": "Templates should be properly indented.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "comments": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "functions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "indent": {
                      "oneOf": [
                        {
                          "pattern": "^\\s+$",
                          "type": "string",
                        },
                        {
                          "minimum": 1,
                          "type": "integer",
                        },
                      ],
                    },
                    "selectors": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tags": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "text-encoding-identifier-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce consistent case for text encoding identifiers.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/text-encoding-identifier-case.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "text-encoding-identifier/error": "Prefer \`{{replacement}}\` over \`{{value}}\`.",
                "text-encoding-identifier/suggestion": "Replace \`{{value}}\` with \`{{replacement}}\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "throw-new-error": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Require \`new\` when creating an error.",
                "recommended": true,
                "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/throw-new-error.md",
              },
              "fixable": "code",
              "messages": {
                "throw-new-error": "Use \`new\` when creating an error.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
    },
    "rules": {
      "no-negated-condition": "off",
      "no-nested-ternary": "off",
      "unicorn/better-regex": "off",
      "unicorn/catch-error-name": "error",
      "unicorn/consistent-assert": "error",
      "unicorn/consistent-date-clone": "error",
      "unicorn/consistent-destructuring": "off",
      "unicorn/consistent-empty-array-spread": "error",
      "unicorn/consistent-existence-index-check": "error",
      "unicorn/consistent-function-scoping": "error",
      "unicorn/custom-error-definition": "off",
      "unicorn/empty-brace-spaces": "error",
      "unicorn/error-message": "error",
      "unicorn/escape-case": "error",
      "unicorn/expiring-todo-comments": "error",
      "unicorn/explicit-length-check": "error",
      "unicorn/filename-case": "error",
      "unicorn/import-style": "error",
      "unicorn/new-for-builtins": "error",
      "unicorn/no-abusive-eslint-disable": "error",
      "unicorn/no-accessor-recursion": "error",
      "unicorn/no-anonymous-default-export": "error",
      "unicorn/no-array-callback-reference": "error",
      "unicorn/no-array-for-each": "error",
      "unicorn/no-array-method-this-argument": "error",
      "unicorn/no-array-reduce": "error",
      "unicorn/no-await-expression-member": "error",
      "unicorn/no-await-in-promise-methods": "error",
      "unicorn/no-console-spaces": "error",
      "unicorn/no-document-cookie": "error",
      "unicorn/no-empty-file": "error",
      "unicorn/no-for-loop": "error",
      "unicorn/no-hex-escape": "error",
      "unicorn/no-instanceof-builtins": "error",
      "unicorn/no-invalid-fetch-options": "error",
      "unicorn/no-invalid-remove-event-listener": "error",
      "unicorn/no-keyword-prefix": "off",
      "unicorn/no-lonely-if": "error",
      "unicorn/no-magic-array-flat-depth": "error",
      "unicorn/no-named-default": "error",
      "unicorn/no-negated-condition": "error",
      "unicorn/no-negation-in-equality-check": "error",
      "unicorn/no-nested-ternary": "error",
      "unicorn/no-new-array": "error",
      "unicorn/no-new-buffer": "error",
      "unicorn/no-null": "error",
      "unicorn/no-object-as-default-parameter": "error",
      "unicorn/no-process-exit": "error",
      "unicorn/no-single-promise-in-promise-methods": "error",
      "unicorn/no-static-only-class": "error",
      "unicorn/no-thenable": "error",
      "unicorn/no-this-assignment": "error",
      "unicorn/no-typeof-undefined": "error",
      "unicorn/no-unnecessary-array-flat-depth": "error",
      "unicorn/no-unnecessary-array-splice-count": "error",
      "unicorn/no-unnecessary-await": "error",
      "unicorn/no-unnecessary-polyfills": "error",
      "unicorn/no-unnecessary-slice-end": "error",
      "unicorn/no-unreadable-array-destructuring": "error",
      "unicorn/no-unreadable-iife": "error",
      "unicorn/no-unused-properties": "off",
      "unicorn/no-useless-fallback-in-spread": "error",
      "unicorn/no-useless-length-check": "error",
      "unicorn/no-useless-promise-resolve-reject": "error",
      "unicorn/no-useless-spread": "error",
      "unicorn/no-useless-switch-case": "error",
      "unicorn/no-useless-undefined": "error",
      "unicorn/no-zero-fractions": "error",
      "unicorn/number-literal-case": "error",
      "unicorn/numeric-separators-style": "error",
      "unicorn/prefer-add-event-listener": "error",
      "unicorn/prefer-array-find": "error",
      "unicorn/prefer-array-flat": "error",
      "unicorn/prefer-array-flat-map": "error",
      "unicorn/prefer-array-index-of": "error",
      "unicorn/prefer-array-some": "error",
      "unicorn/prefer-at": "error",
      "unicorn/prefer-blob-reading-methods": "error",
      "unicorn/prefer-code-point": "error",
      "unicorn/prefer-date-now": "error",
      "unicorn/prefer-default-parameters": "error",
      "unicorn/prefer-dom-node-append": "error",
      "unicorn/prefer-dom-node-dataset": "error",
      "unicorn/prefer-dom-node-remove": "error",
      "unicorn/prefer-dom-node-text-content": "error",
      "unicorn/prefer-event-target": "error",
      "unicorn/prefer-export-from": "error",
      "unicorn/prefer-global-this": "error",
      "unicorn/prefer-import-meta-properties": "off",
      "unicorn/prefer-includes": "error",
      "unicorn/prefer-json-parse-buffer": "off",
      "unicorn/prefer-keyboard-event-key": "error",
      "unicorn/prefer-logical-operator-over-ternary": "error",
      "unicorn/prefer-math-min-max": "error",
      "unicorn/prefer-math-trunc": "error",
      "unicorn/prefer-modern-dom-apis": "error",
      "unicorn/prefer-modern-math-apis": "error",
      "unicorn/prefer-module": "error",
      "unicorn/prefer-native-coercion-functions": "error",
      "unicorn/prefer-negative-index": "error",
      "unicorn/prefer-node-protocol": "error",
      "unicorn/prefer-number-properties": "error",
      "unicorn/prefer-object-from-entries": "error",
      "unicorn/prefer-optional-catch-binding": "error",
      "unicorn/prefer-prototype-methods": "error",
      "unicorn/prefer-query-selector": "error",
      "unicorn/prefer-reflect-apply": "error",
      "unicorn/prefer-regexp-test": "error",
      "unicorn/prefer-set-has": "error",
      "unicorn/prefer-set-size": "error",
      "unicorn/prefer-single-call": "error",
      "unicorn/prefer-spread": "error",
      "unicorn/prefer-string-raw": "error",
      "unicorn/prefer-string-replace-all": "error",
      "unicorn/prefer-string-slice": "error",
      "unicorn/prefer-string-starts-ends-with": "error",
      "unicorn/prefer-string-trim-start-end": "error",
      "unicorn/prefer-structured-clone": "error",
      "unicorn/prefer-switch": "error",
      "unicorn/prefer-ternary": "error",
      "unicorn/prefer-top-level-await": "error",
      "unicorn/prefer-type-error": "error",
      "unicorn/prevent-abbreviations": "error",
      "unicorn/relative-url-style": "error",
      "unicorn/require-array-join-separator": "error",
      "unicorn/require-number-to-fixed-digits-argument": "error",
      "unicorn/require-post-message-target-origin": "off",
      "unicorn/string-content": "off",
      "unicorn/switch-case-braces": "error",
      "unicorn/template-indent": "error",
      "unicorn/text-encoding-identifier-case": "error",
      "unicorn/throw-new-error": "error",
    },
  },
  {
    "name": "unicorn/base",
    "rules": {
      "unicorn/explicit-length-check": "off",
      "unicorn/filename-case": "off",
      "unicorn/no-anonymous-default-export": "off",
      "unicorn/no-array-reduce": "off",
      "unicorn/no-nested-ternary": "off",
      "unicorn/prevent-abbreviations": "off",
      "unicorn/switch-case-braces": [
        "error",
        "avoid",
      ],
    },
  },
]
`;
