// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Конфиг yaml > Имеет все параметры 1`] = `
[
  {
    "plugins": {
      "yml": {
        "configs": {
          "base": {
            "overrides": [
              {
                "files": [
                  "*.yaml",
                  "*.yml",
                ],
                "parser": "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/yaml-eslint-parser/lib/index.js",
                "rules": {
                  "no-irregular-whitespace": "off",
                  "no-unused-vars": "off",
                  "spaced-comment": "off",
                },
              },
            ],
            "plugins": [
              "yml",
            ],
          },
          "flat/base": [
            [Circular],
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.3.0",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
          ],
          "flat/prettier": [
            [Circular],
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.3.0",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "yml/block-mapping-colon-indicator-newline": "off",
                "yml/block-mapping-question-indicator-newline": "off",
                "yml/block-sequence-hyphen-indicator-newline": "off",
                "yml/flow-mapping-curly-newline": "off",
                "yml/flow-mapping-curly-spacing": "off",
                "yml/flow-sequence-bracket-newline": "off",
                "yml/flow-sequence-bracket-spacing": "off",
                "yml/indent": "off",
                "yml/key-spacing": "off",
                "yml/no-multiple-empty-lines": "off",
                "yml/no-trailing-zeros": "off",
                "yml/quotes": "off",
              },
            },
          ],
          "flat/recommended": [
            [Circular],
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.3.0",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "yml/no-empty-document": "error",
                "yml/no-empty-key": "error",
                "yml/no-empty-mapping-value": "error",
                "yml/no-empty-sequence-entry": "error",
                "yml/no-irregular-whitespace": "error",
                "yml/no-tab-indent": "error",
                "yml/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/standard": [
            [Circular],
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.3.0",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "yml/block-mapping": "error",
                "yml/block-mapping-question-indicator-newline": "error",
                "yml/block-sequence": "error",
                "yml/block-sequence-hyphen-indicator-newline": "error",
                "yml/flow-mapping-curly-newline": "error",
                "yml/flow-mapping-curly-spacing": "error",
                "yml/flow-sequence-bracket-newline": "error",
                "yml/flow-sequence-bracket-spacing": "error",
                "yml/indent": "error",
                "yml/key-spacing": "error",
                "yml/no-empty-document": "error",
                "yml/no-empty-key": "error",
                "yml/no-empty-mapping-value": "error",
                "yml/no-empty-sequence-entry": "error",
                "yml/no-irregular-whitespace": "error",
                "yml/no-tab-indent": "error",
                "yml/plain-scalar": "error",
                "yml/quotes": "error",
                "yml/spaced-comment": "error",
                "yml/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "prettier": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-yml/lib/configs/base.js",
            ],
            "rules": {
              "yml/block-mapping-colon-indicator-newline": "off",
              "yml/block-mapping-question-indicator-newline": "off",
              "yml/block-sequence-hyphen-indicator-newline": "off",
              "yml/flow-mapping-curly-newline": "off",
              "yml/flow-mapping-curly-spacing": "off",
              "yml/flow-sequence-bracket-newline": "off",
              "yml/flow-sequence-bracket-spacing": "off",
              "yml/indent": "off",
              "yml/key-spacing": "off",
              "yml/no-multiple-empty-lines": "off",
              "yml/no-trailing-zeros": "off",
              "yml/quotes": "off",
            },
          },
          "recommended": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-yml/lib/configs/base.js",
            ],
            "rules": {
              "yml/no-empty-document": "error",
              "yml/no-empty-key": "error",
              "yml/no-empty-mapping-value": "error",
              "yml/no-empty-sequence-entry": "error",
              "yml/no-irregular-whitespace": "error",
              "yml/no-tab-indent": "error",
              "yml/vue-custom-block/no-parsing-error": "error",
            },
          },
          "standard": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-yml/lib/configs/base.js",
            ],
            "rules": {
              "yml/block-mapping": "error",
              "yml/block-mapping-question-indicator-newline": "error",
              "yml/block-sequence": "error",
              "yml/block-sequence-hyphen-indicator-newline": "error",
              "yml/flow-mapping-curly-newline": "error",
              "yml/flow-mapping-curly-spacing": "error",
              "yml/flow-sequence-bracket-newline": "error",
              "yml/flow-sequence-bracket-spacing": "error",
              "yml/indent": "error",
              "yml/key-spacing": "error",
              "yml/no-empty-document": "error",
              "yml/no-empty-key": "error",
              "yml/no-empty-mapping-value": "error",
              "yml/no-empty-sequence-entry": "error",
              "yml/no-irregular-whitespace": "error",
              "yml/no-tab-indent": "error",
              "yml/plain-scalar": "error",
              "yml/quotes": "error",
              "yml/spaced-comment": "error",
              "yml/vue-custom-block/no-parsing-error": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-yml",
          "version": "1.18.0",
        },
        "rules": {
          "block-mapping": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow block style mappings.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/block-mapping",
                "ruleName": "block-mapping",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Must use flow style mappings.",
                "required": "Must use block style mappings.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                        "singleline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-mapping-colon-indicator-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [],
                "description": "enforce consistent line breaks after \`:\` indicator",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/block-mapping-colon-indicator-newline",
                "ruleName": "block-mapping-colon-indicator-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping-colon-indicator-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterIndicator": "Expected a line break after this \`:\` indicator.",
                "unexpectedLinebreakAfterIndicator": "Unexpected line break after this \`:\` indicator.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-mapping-question-indicator-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent line breaks after \`?\` indicator",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/block-mapping-question-indicator-newline",
                "ruleName": "block-mapping-question-indicator-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping-question-indicator-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterIndicator": "Expected a line break after this \`?\` indicator.",
                "unexpectedLinebreakAfterIndicator": "Unexpected line break after this \`?\` indicator.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-sequence": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow block style sequences.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/block-sequence",
                "ruleName": "block-sequence",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-sequence.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Must use flow style sequences.",
                "required": "Must use block style sequences.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                        "singleline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-sequence-hyphen-indicator-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent line breaks after \`-\` indicator",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/block-sequence-hyphen-indicator-newline",
                "ruleName": "block-sequence-hyphen-indicator-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-sequence-hyphen-indicator-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterIndicator": "Expected a line break after this \`-\` indicator.",
                "unexpectedLinebreakAfterIndicator": "Unexpected line break after this \`-\` indicator.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "blockMapping": {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    "nestedHyphen": {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "file-extension": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [],
                "description": "enforce YAML file extension",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/file-extension",
                "ruleName": "file-extension",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/file-extension.html",
              },
              "messages": {
                "unexpected": "Expected extension '{{expected}}' but used extension '{{actual}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "caseSensitive": {
                      "type": "boolean",
                    },
                    "extension": {
                      "enum": [
                        "yaml",
                        "yml",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "flow-mapping-curly-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent line breaks inside braces",
                "extensionRule": "object-curly-newline",
                "layout": true,
                "ruleId": "yml/flow-mapping-curly-newline",
                "ruleName": "flow-mapping-curly-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-mapping-curly-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": {
                        "consistent": {
                          "type": "boolean",
                        },
                        "minProperties": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "flow-mapping-curly-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing inside braces",
                "extensionRule": "object-curly-spacing",
                "layout": true,
                "ruleId": "yml/flow-mapping-curly-spacing",
                "ruleName": "flow-mapping-curly-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-mapping-curly-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean",
                    },
                    "objectsInObjects": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "flow-sequence-bracket-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce linebreaks after opening and before closing flow sequence brackets",
                "extensionRule": "array-bracket-newline",
                "layout": true,
                "ruleId": "yml/flow-sequence-bracket-newline",
                "ruleName": "flow-sequence-bracket-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-sequence-bracket-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingClosingLinebreak": "A linebreak is required before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "minItems": {
                          "minimum": 0,
                          "type": [
                            "integer",
                            "null",
                          ],
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "flow-sequence-bracket-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing inside flow sequence brackets",
                "extensionRule": "array-bracket-spacing",
                "layout": true,
                "ruleId": "yml/flow-sequence-bracket-spacing",
                "ruleName": "flow-sequence-bracket-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-sequence-bracket-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInArrays": {
                      "type": "boolean",
                    },
                    "objectsInArrays": {
                      "type": "boolean",
                    },
                    "singleValue": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "indent": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent indentation",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/indent",
                "ruleName": "indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/indent.html",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} spaces but found {{actual}} spaces.",
              },
              "schema": [
                {
                  "minimum": 2,
                  "type": "integer",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "alignMultilineFlowScalars": {
                      "type": "boolean",
                    },
                    "indentBlockSequences": {
                      "type": "boolean",
                    },
                    "indicatorValueIndent": {
                      "minimum": 2,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "key-name-casing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "enforce naming convention to key names",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/key-name-casing",
                "ruleName": "key-name-casing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/key-name-casing.html",
              },
              "messages": {
                "doesNotMatchFormat": "Key name \`{{name}}\` must match one of the following formats: {{formats}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "PascalCase": {
                      "default": false,
                      "type": "boolean",
                    },
                    "SCREAMING_SNAKE_CASE": {
                      "default": false,
                      "type": "boolean",
                    },
                    "camelCase": {
                      "default": true,
                      "type": "boolean",
                    },
                    "ignores": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "kebab-case": {
                      "default": false,
                      "type": "boolean",
                    },
                    "snake_case": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "key-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing between keys and values in mapping pairs",
                "extensionRule": "key-spacing",
                "layout": true,
                "ruleId": "yml/key-spacing",
                "ruleName": "key-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/key-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "extraKey": "Extra space after key '{{key}}'.",
                "extraValue": "Extra space before value for key '{{key}}'.",
                "missingKey": "Missing space after key '{{key}}'.",
                "missingValue": "Missing space before value for key '{{key}}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "align": {
                          "anyOf": [
                            {
                              "enum": [
                                "colon",
                                "value",
                              ],
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "align": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                            "on": {
                              "enum": [
                                "colon",
                                "value",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "no-empty-document": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty document",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-document",
                "ruleName": "no-empty-document",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-document.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty documents are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty mapping keys",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-key",
                "ruleName": "no-empty-key",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-key.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty mapping keys are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-mapping-value": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty mapping values",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-mapping-value",
                "ruleName": "no-empty-mapping-value",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-mapping-value.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty mapping values are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-sequence-entry": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty sequence entries",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-sequence-entry",
                "ruleName": "no-empty-sequence-entry",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-sequence-entry.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty sequence entries are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-irregular-whitespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow irregular whitespace",
                "extensionRule": "no-irregular-whitespace",
                "layout": false,
                "ruleId": "yml/no-irregular-whitespace",
                "ruleName": "no-irregular-whitespace",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-irregular-whitespace.html",
              },
              "messages": {
                "disallow": "Irregular whitespace not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "skipComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "skipQuotedScalars": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-multiple-empty-lines": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow multiple empty lines",
                "extensionRule": "no-multiple-empty-lines",
                "layout": true,
                "ruleId": "yml/no-multiple-empty-lines",
                "ruleName": "no-multiple-empty-lines",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-multiple-empty-lines.html",
              },
              "fixable": "whitespace",
              "messages": {
                "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
                "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
                "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maxBOF": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maxEOF": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "required": [
                    "max",
                  ],
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-tab-indent": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow tabs for indentation.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-tab-indent",
                "ruleName": "no-tab-indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-tab-indent.html",
              },
              "messages": {
                "disallow": "Unexpected tabs.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-trailing-zeros": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow trailing zeros for floats",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/no-trailing-zeros",
                "ruleName": "no-trailing-zeros",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-trailing-zeros.html",
              },
              "fixable": "code",
              "messages": {
                "wrongZeros": "Trailing zeros are not allowed, fix to \`{{fixed}}\`.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "plain-scalar": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow plain style scalar.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/plain-scalar",
                "ruleName": "plain-scalar",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/plain-scalar.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Must use quoted style scalar.",
                "required": "Must use plain style scalar.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignorePatterns": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "overrides": {
                      "additionalProperties": false,
                      "properties": {
                        "mappingKey": {
                          "enum": [
                            "always",
                            "never",
                            null,
                          ],
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "quotes": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce the consistent use of either double, or single quotes",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/quotes",
                "ruleName": "quotes",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/quotes.html",
              },
              "fixable": "code",
              "messages": {
                "wrongQuotes": "Strings must use {{description}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "avoidEscape": {
                      "type": "boolean",
                    },
                    "prefer": {
                      "enum": [
                        "double",
                        "single",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "require-string-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow mapping keys other than strings",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/require-string-key",
                "ruleName": "require-string-key",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/require-string-key.html",
              },
              "messages": {
                "expectedString": "The key must be a string.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "sort-keys": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "require mapping keys to be sorted",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/sort-keys",
                "ruleName": "sort-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/sort-keys.html",
              },
              "fixable": "code",
              "messages": {
                "sortKeys": "Expected mapping keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
              },
              "schema": {
                "oneOf": [
                  {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "allowLineSeparatedGroups": {
                          "type": "boolean",
                        },
                        "hasProperties": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "minKeys": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "keyPattern": {
                                        "type": "string",
                                      },
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "asc",
                          "desc",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "caseSensitive": {
                            "type": "boolean",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "natural": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "sort-sequence-values": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "require sequence values to be sorted",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/sort-sequence-values",
                "ruleName": "sort-sequence-values",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/sort-sequence-values.html",
              },
              "fixable": "code",
              "messages": {
                "sortValues": "Expected sequence values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
              },
              "schema": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "minValues": {
                      "minimum": 2,
                      "type": "integer",
                    },
                    "order": {
                      "oneOf": [
                        {
                          "items": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "order": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "caseSensitive": {
                                        "type": "boolean",
                                      },
                                      "natural": {
                                        "type": "boolean",
                                      },
                                      "type": {
                                        "enum": [
                                          "asc",
                                          "desc",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                  "valuePattern": {
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                            "type": {
                              "enum": [
                                "asc",
                                "desc",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "pathPattern": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "pathPattern",
                    "order",
                  ],
                  "type": "object",
                },
                "minItems": 1,
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "spaced-comment": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing after the \`#\` in a comment",
                "extensionRule": "spaced-comment",
                "layout": false,
                "ruleId": "yml/spaced-comment",
                "ruleName": "spaced-comment",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/spaced-comment.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedExceptionAfter": "Expected exception block, space after '{{refChar}}' in comment.",
                "expectedSpaceAfter": "Expected space after '{{refChar}}' in comment.",
                "unexpectedSpaceAfter": "Unexpected space after '{{refChar}}' in comment.",
                "unexpectedSpaceAfterMarker": "Unexpected space after marker ({{refChar}}) in comment.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "markers": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "vue-custom-block/no-parsing-error": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow parsing errors in Vue custom blocks",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/vue-custom-block/no-parsing-error",
                "ruleName": "vue-custom-block/no-parsing-error",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/vue-custom-block/no-parsing-error.html",
              },
              "messages": {},
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
    },
  },
  {
    "files": [
      "*.yaml",
      "**/*.yaml",
      "*.yml",
      "**/*.yml",
    ],
    "languageOptions": {
      "parser": {
        "ParseError": [Function],
        "VisitorKeys": {
          "ArrayExpression": [
            "elements",
          ],
          "ArrayPattern": [
            "elements",
          ],
          "ArrowFunctionExpression": [
            "params",
            "body",
          ],
          "AssignmentExpression": [
            "left",
            "right",
          ],
          "AssignmentPattern": [
            "left",
            "right",
          ],
          "AwaitExpression": [
            "argument",
          ],
          "BinaryExpression": [
            "left",
            "right",
          ],
          "BlockStatement": [
            "body",
          ],
          "BreakStatement": [
            "label",
          ],
          "CallExpression": [
            "callee",
            "arguments",
          ],
          "CatchClause": [
            "param",
            "body",
          ],
          "ChainExpression": [
            "expression",
          ],
          "ClassBody": [
            "body",
          ],
          "ClassDeclaration": [
            "id",
            "superClass",
            "body",
          ],
          "ClassExpression": [
            "id",
            "superClass",
            "body",
          ],
          "ConditionalExpression": [
            "test",
            "consequent",
            "alternate",
          ],
          "ContinueStatement": [
            "label",
          ],
          "DebuggerStatement": [],
          "DoWhileStatement": [
            "body",
            "test",
          ],
          "EmptyStatement": [],
          "ExperimentalRestProperty": [
            "argument",
          ],
          "ExperimentalSpreadProperty": [
            "argument",
          ],
          "ExportAllDeclaration": [
            "exported",
            "source",
          ],
          "ExportDefaultDeclaration": [
            "declaration",
          ],
          "ExportNamedDeclaration": [
            "declaration",
            "specifiers",
            "source",
          ],
          "ExportSpecifier": [
            "exported",
            "local",
          ],
          "ExpressionStatement": [
            "expression",
          ],
          "ForInStatement": [
            "left",
            "right",
            "body",
          ],
          "ForOfStatement": [
            "left",
            "right",
            "body",
          ],
          "ForStatement": [
            "init",
            "test",
            "update",
            "body",
          ],
          "FunctionDeclaration": [
            "id",
            "params",
            "body",
          ],
          "FunctionExpression": [
            "id",
            "params",
            "body",
          ],
          "Identifier": [],
          "IfStatement": [
            "test",
            "consequent",
            "alternate",
          ],
          "ImportDeclaration": [
            "specifiers",
            "source",
          ],
          "ImportDefaultSpecifier": [
            "local",
          ],
          "ImportExpression": [
            "source",
          ],
          "ImportNamespaceSpecifier": [
            "local",
          ],
          "ImportSpecifier": [
            "imported",
            "local",
          ],
          "JSXAttribute": [
            "name",
            "value",
          ],
          "JSXClosingElement": [
            "name",
          ],
          "JSXClosingFragment": [],
          "JSXElement": [
            "openingElement",
            "children",
            "closingElement",
          ],
          "JSXEmptyExpression": [],
          "JSXExpressionContainer": [
            "expression",
          ],
          "JSXFragment": [
            "openingFragment",
            "children",
            "closingFragment",
          ],
          "JSXIdentifier": [],
          "JSXMemberExpression": [
            "object",
            "property",
          ],
          "JSXNamespacedName": [
            "namespace",
            "name",
          ],
          "JSXOpeningElement": [
            "name",
            "attributes",
          ],
          "JSXOpeningFragment": [],
          "JSXSpreadAttribute": [
            "argument",
          ],
          "JSXSpreadChild": [
            "expression",
          ],
          "JSXText": [],
          "LabeledStatement": [
            "label",
            "body",
          ],
          "Literal": [],
          "LogicalExpression": [
            "left",
            "right",
          ],
          "MemberExpression": [
            "object",
            "property",
          ],
          "MetaProperty": [
            "meta",
            "property",
          ],
          "MethodDefinition": [
            "key",
            "value",
          ],
          "NewExpression": [
            "callee",
            "arguments",
          ],
          "ObjectExpression": [
            "properties",
          ],
          "ObjectPattern": [
            "properties",
          ],
          "PrivateIdentifier": [],
          "Program": [
            "body",
          ],
          "Property": [
            "key",
            "value",
          ],
          "PropertyDefinition": [
            "key",
            "value",
          ],
          "RestElement": [
            "argument",
          ],
          "ReturnStatement": [
            "argument",
          ],
          "SequenceExpression": [
            "expressions",
          ],
          "SpreadElement": [
            "argument",
          ],
          "StaticBlock": [
            "body",
          ],
          "Super": [],
          "SwitchCase": [
            "test",
            "consequent",
          ],
          "SwitchStatement": [
            "discriminant",
            "cases",
          ],
          "TaggedTemplateExpression": [
            "tag",
            "quasi",
          ],
          "TemplateElement": [],
          "TemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "ThisExpression": [],
          "ThrowStatement": [
            "argument",
          ],
          "TryStatement": [
            "block",
            "handler",
            "finalizer",
          ],
          "UnaryExpression": [
            "argument",
          ],
          "UpdateExpression": [
            "argument",
          ],
          "VariableDeclaration": [
            "declarations",
          ],
          "VariableDeclarator": [
            "id",
            "init",
          ],
          "WhileStatement": [
            "test",
            "body",
          ],
          "WithStatement": [
            "object",
            "body",
          ],
          "YAMLAlias": [],
          "YAMLAnchor": [],
          "YAMLDirective": [],
          "YAMLDocument": [
            "directives",
            "content",
          ],
          "YAMLMapping": [
            "pairs",
          ],
          "YAMLPair": [
            "key",
            "value",
          ],
          "YAMLScalar": [],
          "YAMLSequence": [
            "entries",
          ],
          "YAMLTag": [],
          "YAMLWithMeta": [
            "anchor",
            "tag",
            "value",
          ],
          "YieldExpression": [
            "argument",
          ],
        },
        "getStaticYAMLValue": [Function],
        "meta": {
          "name": "yaml-eslint-parser",
          "version": "1.3.0",
        },
        "name": "yaml-eslint-parser",
        "parseForESLint": [Function],
        "parseYAML": [Function],
        "traverseNodes": [Function],
      },
    },
    "rules": {
      "no-irregular-whitespace": "off",
      "no-unused-vars": "off",
      "spaced-comment": "off",
    },
  },
  {
    "rules": {
      "yml/block-mapping": "error",
      "yml/block-mapping-question-indicator-newline": "error",
      "yml/block-sequence": "error",
      "yml/block-sequence-hyphen-indicator-newline": "error",
      "yml/flow-mapping-curly-newline": "error",
      "yml/flow-mapping-curly-spacing": "error",
      "yml/flow-sequence-bracket-newline": "error",
      "yml/flow-sequence-bracket-spacing": "error",
      "yml/indent": "error",
      "yml/key-spacing": "error",
      "yml/no-empty-document": "error",
      "yml/no-empty-key": "error",
      "yml/no-empty-mapping-value": "error",
      "yml/no-empty-sequence-entry": "error",
      "yml/no-irregular-whitespace": "error",
      "yml/no-tab-indent": "error",
      "yml/plain-scalar": "error",
      "yml/quotes": "error",
      "yml/spaced-comment": "error",
      "yml/vue-custom-block/no-parsing-error": "error",
    },
  },
  {
    "plugins": {
      "yml": {
        "configs": {
          "base": {
            "overrides": [
              {
                "files": [
                  "*.yaml",
                  "*.yml",
                ],
                "parser": "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/yaml-eslint-parser/lib/index.js",
                "rules": {
                  "no-irregular-whitespace": "off",
                  "no-unused-vars": "off",
                  "spaced-comment": "off",
                },
              },
            ],
            "plugins": [
              "yml",
            ],
          },
          "flat/base": [
            [Circular],
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.3.0",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
          ],
          "flat/prettier": [
            [Circular],
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.3.0",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "yml/block-mapping-colon-indicator-newline": "off",
                "yml/block-mapping-question-indicator-newline": "off",
                "yml/block-sequence-hyphen-indicator-newline": "off",
                "yml/flow-mapping-curly-newline": "off",
                "yml/flow-mapping-curly-spacing": "off",
                "yml/flow-sequence-bracket-newline": "off",
                "yml/flow-sequence-bracket-spacing": "off",
                "yml/indent": "off",
                "yml/key-spacing": "off",
                "yml/no-multiple-empty-lines": "off",
                "yml/no-trailing-zeros": "off",
                "yml/quotes": "off",
              },
            },
          ],
          "flat/recommended": [
            [Circular],
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.3.0",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "yml/no-empty-document": "error",
                "yml/no-empty-key": "error",
                "yml/no-empty-mapping-value": "error",
                "yml/no-empty-sequence-entry": "error",
                "yml/no-irregular-whitespace": "error",
                "yml/no-tab-indent": "error",
                "yml/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "flat/standard": [
            [Circular],
            {
              "files": [
                "*.yaml",
                "**/*.yaml",
                "*.yml",
                "**/*.yml",
              ],
              "languageOptions": {
                "parser": {
                  "ParseError": [Function],
                  "VisitorKeys": {
                    "ArrayExpression": [
                      "elements",
                    ],
                    "ArrayPattern": [
                      "elements",
                    ],
                    "ArrowFunctionExpression": [
                      "params",
                      "body",
                    ],
                    "AssignmentExpression": [
                      "left",
                      "right",
                    ],
                    "AssignmentPattern": [
                      "left",
                      "right",
                    ],
                    "AwaitExpression": [
                      "argument",
                    ],
                    "BinaryExpression": [
                      "left",
                      "right",
                    ],
                    "BlockStatement": [
                      "body",
                    ],
                    "BreakStatement": [
                      "label",
                    ],
                    "CallExpression": [
                      "callee",
                      "arguments",
                    ],
                    "CatchClause": [
                      "param",
                      "body",
                    ],
                    "ChainExpression": [
                      "expression",
                    ],
                    "ClassBody": [
                      "body",
                    ],
                    "ClassDeclaration": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ClassExpression": [
                      "id",
                      "superClass",
                      "body",
                    ],
                    "ConditionalExpression": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ContinueStatement": [
                      "label",
                    ],
                    "DebuggerStatement": [],
                    "DoWhileStatement": [
                      "body",
                      "test",
                    ],
                    "EmptyStatement": [],
                    "ExperimentalRestProperty": [
                      "argument",
                    ],
                    "ExperimentalSpreadProperty": [
                      "argument",
                    ],
                    "ExportAllDeclaration": [
                      "exported",
                      "source",
                    ],
                    "ExportDefaultDeclaration": [
                      "declaration",
                    ],
                    "ExportNamedDeclaration": [
                      "declaration",
                      "specifiers",
                      "source",
                    ],
                    "ExportSpecifier": [
                      "exported",
                      "local",
                    ],
                    "ExpressionStatement": [
                      "expression",
                    ],
                    "ForInStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForOfStatement": [
                      "left",
                      "right",
                      "body",
                    ],
                    "ForStatement": [
                      "init",
                      "test",
                      "update",
                      "body",
                    ],
                    "FunctionDeclaration": [
                      "id",
                      "params",
                      "body",
                    ],
                    "FunctionExpression": [
                      "id",
                      "params",
                      "body",
                    ],
                    "Identifier": [],
                    "IfStatement": [
                      "test",
                      "consequent",
                      "alternate",
                    ],
                    "ImportDeclaration": [
                      "specifiers",
                      "source",
                    ],
                    "ImportDefaultSpecifier": [
                      "local",
                    ],
                    "ImportExpression": [
                      "source",
                    ],
                    "ImportNamespaceSpecifier": [
                      "local",
                    ],
                    "ImportSpecifier": [
                      "imported",
                      "local",
                    ],
                    "JSXAttribute": [
                      "name",
                      "value",
                    ],
                    "JSXClosingElement": [
                      "name",
                    ],
                    "JSXClosingFragment": [],
                    "JSXElement": [
                      "openingElement",
                      "children",
                      "closingElement",
                    ],
                    "JSXEmptyExpression": [],
                    "JSXExpressionContainer": [
                      "expression",
                    ],
                    "JSXFragment": [
                      "openingFragment",
                      "children",
                      "closingFragment",
                    ],
                    "JSXIdentifier": [],
                    "JSXMemberExpression": [
                      "object",
                      "property",
                    ],
                    "JSXNamespacedName": [
                      "namespace",
                      "name",
                    ],
                    "JSXOpeningElement": [
                      "name",
                      "attributes",
                    ],
                    "JSXOpeningFragment": [],
                    "JSXSpreadAttribute": [
                      "argument",
                    ],
                    "JSXSpreadChild": [
                      "expression",
                    ],
                    "JSXText": [],
                    "LabeledStatement": [
                      "label",
                      "body",
                    ],
                    "Literal": [],
                    "LogicalExpression": [
                      "left",
                      "right",
                    ],
                    "MemberExpression": [
                      "object",
                      "property",
                    ],
                    "MetaProperty": [
                      "meta",
                      "property",
                    ],
                    "MethodDefinition": [
                      "key",
                      "value",
                    ],
                    "NewExpression": [
                      "callee",
                      "arguments",
                    ],
                    "ObjectExpression": [
                      "properties",
                    ],
                    "ObjectPattern": [
                      "properties",
                    ],
                    "PrivateIdentifier": [],
                    "Program": [
                      "body",
                    ],
                    "Property": [
                      "key",
                      "value",
                    ],
                    "PropertyDefinition": [
                      "key",
                      "value",
                    ],
                    "RestElement": [
                      "argument",
                    ],
                    "ReturnStatement": [
                      "argument",
                    ],
                    "SequenceExpression": [
                      "expressions",
                    ],
                    "SpreadElement": [
                      "argument",
                    ],
                    "StaticBlock": [
                      "body",
                    ],
                    "Super": [],
                    "SwitchCase": [
                      "test",
                      "consequent",
                    ],
                    "SwitchStatement": [
                      "discriminant",
                      "cases",
                    ],
                    "TaggedTemplateExpression": [
                      "tag",
                      "quasi",
                    ],
                    "TemplateElement": [],
                    "TemplateLiteral": [
                      "quasis",
                      "expressions",
                    ],
                    "ThisExpression": [],
                    "ThrowStatement": [
                      "argument",
                    ],
                    "TryStatement": [
                      "block",
                      "handler",
                      "finalizer",
                    ],
                    "UnaryExpression": [
                      "argument",
                    ],
                    "UpdateExpression": [
                      "argument",
                    ],
                    "VariableDeclaration": [
                      "declarations",
                    ],
                    "VariableDeclarator": [
                      "id",
                      "init",
                    ],
                    "WhileStatement": [
                      "test",
                      "body",
                    ],
                    "WithStatement": [
                      "object",
                      "body",
                    ],
                    "YAMLAlias": [],
                    "YAMLAnchor": [],
                    "YAMLDirective": [],
                    "YAMLDocument": [
                      "directives",
                      "content",
                    ],
                    "YAMLMapping": [
                      "pairs",
                    ],
                    "YAMLPair": [
                      "key",
                      "value",
                    ],
                    "YAMLScalar": [],
                    "YAMLSequence": [
                      "entries",
                    ],
                    "YAMLTag": [],
                    "YAMLWithMeta": [
                      "anchor",
                      "tag",
                      "value",
                    ],
                    "YieldExpression": [
                      "argument",
                    ],
                  },
                  "getStaticYAMLValue": [Function],
                  "meta": {
                    "name": "yaml-eslint-parser",
                    "version": "1.3.0",
                  },
                  "name": "yaml-eslint-parser",
                  "parseForESLint": [Function],
                  "parseYAML": [Function],
                  "traverseNodes": [Function],
                },
              },
              "rules": {
                "no-irregular-whitespace": "off",
                "no-unused-vars": "off",
                "spaced-comment": "off",
              },
            },
            {
              "rules": {
                "yml/block-mapping": "error",
                "yml/block-mapping-question-indicator-newline": "error",
                "yml/block-sequence": "error",
                "yml/block-sequence-hyphen-indicator-newline": "error",
                "yml/flow-mapping-curly-newline": "error",
                "yml/flow-mapping-curly-spacing": "error",
                "yml/flow-sequence-bracket-newline": "error",
                "yml/flow-sequence-bracket-spacing": "error",
                "yml/indent": "error",
                "yml/key-spacing": "error",
                "yml/no-empty-document": "error",
                "yml/no-empty-key": "error",
                "yml/no-empty-mapping-value": "error",
                "yml/no-empty-sequence-entry": "error",
                "yml/no-irregular-whitespace": "error",
                "yml/no-tab-indent": "error",
                "yml/plain-scalar": "error",
                "yml/quotes": "error",
                "yml/spaced-comment": "error",
                "yml/vue-custom-block/no-parsing-error": "error",
              },
            },
          ],
          "prettier": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-yml/lib/configs/base.js",
            ],
            "rules": {
              "yml/block-mapping-colon-indicator-newline": "off",
              "yml/block-mapping-question-indicator-newline": "off",
              "yml/block-sequence-hyphen-indicator-newline": "off",
              "yml/flow-mapping-curly-newline": "off",
              "yml/flow-mapping-curly-spacing": "off",
              "yml/flow-sequence-bracket-newline": "off",
              "yml/flow-sequence-bracket-spacing": "off",
              "yml/indent": "off",
              "yml/key-spacing": "off",
              "yml/no-multiple-empty-lines": "off",
              "yml/no-trailing-zeros": "off",
              "yml/quotes": "off",
            },
          },
          "recommended": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-yml/lib/configs/base.js",
            ],
            "rules": {
              "yml/no-empty-document": "error",
              "yml/no-empty-key": "error",
              "yml/no-empty-mapping-value": "error",
              "yml/no-empty-sequence-entry": "error",
              "yml/no-irregular-whitespace": "error",
              "yml/no-tab-indent": "error",
              "yml/vue-custom-block/no-parsing-error": "error",
            },
          },
          "standard": {
            "extends": [
              "/Users/exer7um/Работа/Конфигурации/eslint-config/node_modules/eslint-plugin-yml/lib/configs/base.js",
            ],
            "rules": {
              "yml/block-mapping": "error",
              "yml/block-mapping-question-indicator-newline": "error",
              "yml/block-sequence": "error",
              "yml/block-sequence-hyphen-indicator-newline": "error",
              "yml/flow-mapping-curly-newline": "error",
              "yml/flow-mapping-curly-spacing": "error",
              "yml/flow-sequence-bracket-newline": "error",
              "yml/flow-sequence-bracket-spacing": "error",
              "yml/indent": "error",
              "yml/key-spacing": "error",
              "yml/no-empty-document": "error",
              "yml/no-empty-key": "error",
              "yml/no-empty-mapping-value": "error",
              "yml/no-empty-sequence-entry": "error",
              "yml/no-irregular-whitespace": "error",
              "yml/no-tab-indent": "error",
              "yml/plain-scalar": "error",
              "yml/quotes": "error",
              "yml/spaced-comment": "error",
              "yml/vue-custom-block/no-parsing-error": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-yml",
          "version": "1.18.0",
        },
        "rules": {
          "block-mapping": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow block style mappings.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/block-mapping",
                "ruleName": "block-mapping",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Must use flow style mappings.",
                "required": "Must use block style mappings.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                        "singleline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-mapping-colon-indicator-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [],
                "description": "enforce consistent line breaks after \`:\` indicator",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/block-mapping-colon-indicator-newline",
                "ruleName": "block-mapping-colon-indicator-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping-colon-indicator-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterIndicator": "Expected a line break after this \`:\` indicator.",
                "unexpectedLinebreakAfterIndicator": "Unexpected line break after this \`:\` indicator.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-mapping-question-indicator-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent line breaks after \`?\` indicator",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/block-mapping-question-indicator-newline",
                "ruleName": "block-mapping-question-indicator-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping-question-indicator-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterIndicator": "Expected a line break after this \`?\` indicator.",
                "unexpectedLinebreakAfterIndicator": "Unexpected line break after this \`?\` indicator.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-sequence": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow block style sequences.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/block-sequence",
                "ruleName": "block-sequence",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-sequence.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Must use flow style sequences.",
                "required": "Must use block style sequences.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                        "singleline": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "block-sequence-hyphen-indicator-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent line breaks after \`-\` indicator",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/block-sequence-hyphen-indicator-newline",
                "ruleName": "block-sequence-hyphen-indicator-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-sequence-hyphen-indicator-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterIndicator": "Expected a line break after this \`-\` indicator.",
                "unexpectedLinebreakAfterIndicator": "Unexpected line break after this \`-\` indicator.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "blockMapping": {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    "nestedHyphen": {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "file-extension": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [],
                "description": "enforce YAML file extension",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/file-extension",
                "ruleName": "file-extension",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/file-extension.html",
              },
              "messages": {
                "unexpected": "Expected extension '{{expected}}' but used extension '{{actual}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "caseSensitive": {
                      "type": "boolean",
                    },
                    "extension": {
                      "enum": [
                        "yaml",
                        "yml",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "flow-mapping-curly-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent line breaks inside braces",
                "extensionRule": "object-curly-newline",
                "layout": true,
                "ruleId": "yml/flow-mapping-curly-newline",
                "ruleName": "flow-mapping-curly-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-mapping-curly-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace.",
                "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "minProperties": 1,
                      "properties": {
                        "consistent": {
                          "type": "boolean",
                        },
                        "minProperties": {
                          "minimum": 0,
                          "type": "integer",
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "flow-mapping-curly-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing inside braces",
                "extensionRule": "object-curly-spacing",
                "layout": true,
                "ruleId": "yml/flow-mapping-curly-spacing",
                "ruleName": "flow-mapping-curly-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-mapping-curly-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "requireSpaceAfter": "A space is required after '{{token}}'.",
                "requireSpaceBefore": "A space is required before '{{token}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInObjects": {
                      "type": "boolean",
                    },
                    "objectsInObjects": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "flow-sequence-bracket-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce linebreaks after opening and before closing flow sequence brackets",
                "extensionRule": "array-bracket-newline",
                "layout": true,
                "ruleId": "yml/flow-sequence-bracket-newline",
                "ruleName": "flow-sequence-bracket-newline",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-sequence-bracket-newline.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingClosingLinebreak": "A linebreak is required before ']'.",
                "missingOpeningLinebreak": "A linebreak is required after '['.",
                "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "always",
                        "never",
                        "consistent",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "minItems": {
                          "minimum": 0,
                          "type": [
                            "integer",
                            "null",
                          ],
                        },
                        "multiline": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "flow-sequence-bracket-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing inside flow sequence brackets",
                "extensionRule": "array-bracket-spacing",
                "layout": true,
                "ruleId": "yml/flow-sequence-bracket-spacing",
                "ruleName": "flow-sequence-bracket-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-sequence-bracket-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arraysInArrays": {
                      "type": "boolean",
                    },
                    "objectsInArrays": {
                      "type": "boolean",
                    },
                    "singleValue": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "indent": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent indentation",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/indent",
                "ruleName": "indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/indent.html",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndentation": "Expected indentation of {{expected}} spaces but found {{actual}} spaces.",
              },
              "schema": [
                {
                  "minimum": 2,
                  "type": "integer",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "alignMultilineFlowScalars": {
                      "type": "boolean",
                    },
                    "indentBlockSequences": {
                      "type": "boolean",
                    },
                    "indicatorValueIndent": {
                      "minimum": 2,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "key-name-casing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "enforce naming convention to key names",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/key-name-casing",
                "ruleName": "key-name-casing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/key-name-casing.html",
              },
              "messages": {
                "doesNotMatchFormat": "Key name \`{{name}}\` must match one of the following formats: {{formats}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "PascalCase": {
                      "default": false,
                      "type": "boolean",
                    },
                    "SCREAMING_SNAKE_CASE": {
                      "default": false,
                      "type": "boolean",
                    },
                    "camelCase": {
                      "default": true,
                      "type": "boolean",
                    },
                    "ignores": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "kebab-case": {
                      "default": false,
                      "type": "boolean",
                    },
                    "snake_case": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "key-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing between keys and values in mapping pairs",
                "extensionRule": "key-spacing",
                "layout": true,
                "ruleId": "yml/key-spacing",
                "ruleName": "key-spacing",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/key-spacing.html",
              },
              "fixable": "whitespace",
              "messages": {
                "extraKey": "Extra space after key '{{key}}'.",
                "extraValue": "Extra space before value for key '{{key}}'.",
                "missingKey": "Missing space after key '{{key}}'.",
                "missingValue": "Missing space before value for key '{{key}}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "align": {
                          "anyOf": [
                            {
                              "enum": [
                                "colon",
                                "value",
                              ],
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "align": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "afterColon": {
                                      "type": "boolean",
                                    },
                                    "beforeColon": {
                                      "type": "boolean",
                                    },
                                    "mode": {
                                      "enum": [
                                        "strict",
                                        "minimum",
                                      ],
                                    },
                                    "on": {
                                      "enum": [
                                        "colon",
                                        "value",
                                      ],
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "align": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                            "on": {
                              "enum": [
                                "colon",
                                "value",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "multiLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                        "singleLine": {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "no-empty-document": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty document",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-document",
                "ruleName": "no-empty-document",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-document.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty documents are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty mapping keys",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-key",
                "ruleName": "no-empty-key",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-key.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty mapping keys are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-mapping-value": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty mapping values",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-mapping-value",
                "ruleName": "no-empty-mapping-value",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-mapping-value.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty mapping values are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-sequence-entry": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow empty sequence entries",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-empty-sequence-entry",
                "ruleName": "no-empty-sequence-entry",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-sequence-entry.html",
              },
              "messages": {
                "unexpectedEmpty": "Empty sequence entries are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-irregular-whitespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow irregular whitespace",
                "extensionRule": "no-irregular-whitespace",
                "layout": false,
                "ruleId": "yml/no-irregular-whitespace",
                "ruleName": "no-irregular-whitespace",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-irregular-whitespace.html",
              },
              "messages": {
                "disallow": "Irregular whitespace not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "skipComments": {
                      "default": false,
                      "type": "boolean",
                    },
                    "skipQuotedScalars": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-multiple-empty-lines": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow multiple empty lines",
                "extensionRule": "no-multiple-empty-lines",
                "layout": true,
                "ruleId": "yml/no-multiple-empty-lines",
                "ruleName": "no-multiple-empty-lines",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-multiple-empty-lines.html",
              },
              "fixable": "whitespace",
              "messages": {
                "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
                "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
                "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maxBOF": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maxEOF": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "required": [
                    "max",
                  ],
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-tab-indent": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow tabs for indentation.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/no-tab-indent",
                "ruleName": "no-tab-indent",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-tab-indent.html",
              },
              "messages": {
                "disallow": "Unexpected tabs.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-trailing-zeros": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow trailing zeros for floats",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/no-trailing-zeros",
                "ruleName": "no-trailing-zeros",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-trailing-zeros.html",
              },
              "fixable": "code",
              "messages": {
                "wrongZeros": "Trailing zeros are not allowed, fix to \`{{fixed}}\`.",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "plain-scalar": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "require or disallow plain style scalar.",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/plain-scalar",
                "ruleName": "plain-scalar",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/plain-scalar.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Must use quoted style scalar.",
                "required": "Must use plain style scalar.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignorePatterns": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "overrides": {
                      "additionalProperties": false,
                      "properties": {
                        "mappingKey": {
                          "enum": [
                            "always",
                            "never",
                            null,
                          ],
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "quotes": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce the consistent use of either double, or single quotes",
                "extensionRule": false,
                "layout": true,
                "ruleId": "yml/quotes",
                "ruleName": "quotes",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/quotes.html",
              },
              "fixable": "code",
              "messages": {
                "wrongQuotes": "Strings must use {{description}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "avoidEscape": {
                      "type": "boolean",
                    },
                    "prefer": {
                      "enum": [
                        "double",
                        "single",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "require-string-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "disallow mapping keys other than strings",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/require-string-key",
                "ruleName": "require-string-key",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/require-string-key.html",
              },
              "messages": {
                "expectedString": "The key must be a string.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "sort-keys": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "require mapping keys to be sorted",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/sort-keys",
                "ruleName": "sort-keys",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/sort-keys.html",
              },
              "fixable": "code",
              "messages": {
                "sortKeys": "Expected mapping keys to be in {{orderText}} order. '{{thisName}}' should be before '{{prevName}}'.",
              },
              "schema": {
                "oneOf": [
                  {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "allowLineSeparatedGroups": {
                          "type": "boolean",
                        },
                        "hasProperties": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "minKeys": {
                          "minimum": 2,
                          "type": "integer",
                        },
                        "order": {
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "additionalProperties": false,
                                    "properties": {
                                      "keyPattern": {
                                        "type": "string",
                                      },
                                      "order": {
                                        "additionalProperties": false,
                                        "properties": {
                                          "caseSensitive": {
                                            "type": "boolean",
                                          },
                                          "natural": {
                                            "type": "boolean",
                                          },
                                          "type": {
                                            "enum": [
                                              "asc",
                                              "desc",
                                            ],
                                          },
                                        },
                                        "type": "object",
                                      },
                                    },
                                    "type": "object",
                                  },
                                ],
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "natural": {
                                  "type": "boolean",
                                },
                                "type": {
                                  "enum": [
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "pathPattern": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "pathPattern",
                        "order",
                      ],
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "asc",
                          "desc",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowLineSeparatedGroups": {
                            "type": "boolean",
                          },
                          "caseSensitive": {
                            "type": "boolean",
                          },
                          "minKeys": {
                            "minimum": 2,
                            "type": "integer",
                          },
                          "natural": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "sort-sequence-values": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": null,
                "description": "require sequence values to be sorted",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/sort-sequence-values",
                "ruleName": "sort-sequence-values",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/sort-sequence-values.html",
              },
              "fixable": "code",
              "messages": {
                "sortValues": "Expected sequence values to be in {{orderText}} order. '{{thisValue}}' should be before '{{prevValue}}'.",
              },
              "schema": {
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "minValues": {
                      "minimum": 2,
                      "type": "integer",
                    },
                    "order": {
                      "oneOf": [
                        {
                          "items": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "order": {
                                    "additionalProperties": false,
                                    "properties": {
                                      "caseSensitive": {
                                        "type": "boolean",
                                      },
                                      "natural": {
                                        "type": "boolean",
                                      },
                                      "type": {
                                        "enum": [
                                          "asc",
                                          "desc",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                  "valuePattern": {
                                    "type": "string",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "caseSensitive": {
                              "type": "boolean",
                            },
                            "natural": {
                              "type": "boolean",
                            },
                            "type": {
                              "enum": [
                                "asc",
                                "desc",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "pathPattern": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "pathPattern",
                    "order",
                  ],
                  "type": "object",
                },
                "minItems": 1,
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "spaced-comment": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "standard",
                ],
                "description": "enforce consistent spacing after the \`#\` in a comment",
                "extensionRule": "spaced-comment",
                "layout": false,
                "ruleId": "yml/spaced-comment",
                "ruleName": "spaced-comment",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/spaced-comment.html",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedExceptionAfter": "Expected exception block, space after '{{refChar}}' in comment.",
                "expectedSpaceAfter": "Expected space after '{{refChar}}' in comment.",
                "unexpectedSpaceAfter": "Unexpected space after '{{refChar}}' in comment.",
                "unexpectedSpaceAfterMarker": "Unexpected space after marker ({{refChar}}) in comment.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "markers": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "vue-custom-block/no-parsing-error": {
            "create": [Function],
            "meta": {
              "docs": {
                "categories": [
                  "recommended",
                  "standard",
                ],
                "description": "disallow parsing errors in Vue custom blocks",
                "extensionRule": false,
                "layout": false,
                "ruleId": "yml/vue-custom-block/no-parsing-error",
                "ruleName": "vue-custom-block/no-parsing-error",
                "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/vue-custom-block/no-parsing-error.html",
              },
              "messages": {},
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
    },
  },
  {
    "files": [
      "*.yaml",
      "**/*.yaml",
      "*.yml",
      "**/*.yml",
    ],
    "languageOptions": {
      "parser": {
        "ParseError": [Function],
        "VisitorKeys": {
          "ArrayExpression": [
            "elements",
          ],
          "ArrayPattern": [
            "elements",
          ],
          "ArrowFunctionExpression": [
            "params",
            "body",
          ],
          "AssignmentExpression": [
            "left",
            "right",
          ],
          "AssignmentPattern": [
            "left",
            "right",
          ],
          "AwaitExpression": [
            "argument",
          ],
          "BinaryExpression": [
            "left",
            "right",
          ],
          "BlockStatement": [
            "body",
          ],
          "BreakStatement": [
            "label",
          ],
          "CallExpression": [
            "callee",
            "arguments",
          ],
          "CatchClause": [
            "param",
            "body",
          ],
          "ChainExpression": [
            "expression",
          ],
          "ClassBody": [
            "body",
          ],
          "ClassDeclaration": [
            "id",
            "superClass",
            "body",
          ],
          "ClassExpression": [
            "id",
            "superClass",
            "body",
          ],
          "ConditionalExpression": [
            "test",
            "consequent",
            "alternate",
          ],
          "ContinueStatement": [
            "label",
          ],
          "DebuggerStatement": [],
          "DoWhileStatement": [
            "body",
            "test",
          ],
          "EmptyStatement": [],
          "ExperimentalRestProperty": [
            "argument",
          ],
          "ExperimentalSpreadProperty": [
            "argument",
          ],
          "ExportAllDeclaration": [
            "exported",
            "source",
          ],
          "ExportDefaultDeclaration": [
            "declaration",
          ],
          "ExportNamedDeclaration": [
            "declaration",
            "specifiers",
            "source",
          ],
          "ExportSpecifier": [
            "exported",
            "local",
          ],
          "ExpressionStatement": [
            "expression",
          ],
          "ForInStatement": [
            "left",
            "right",
            "body",
          ],
          "ForOfStatement": [
            "left",
            "right",
            "body",
          ],
          "ForStatement": [
            "init",
            "test",
            "update",
            "body",
          ],
          "FunctionDeclaration": [
            "id",
            "params",
            "body",
          ],
          "FunctionExpression": [
            "id",
            "params",
            "body",
          ],
          "Identifier": [],
          "IfStatement": [
            "test",
            "consequent",
            "alternate",
          ],
          "ImportDeclaration": [
            "specifiers",
            "source",
          ],
          "ImportDefaultSpecifier": [
            "local",
          ],
          "ImportExpression": [
            "source",
          ],
          "ImportNamespaceSpecifier": [
            "local",
          ],
          "ImportSpecifier": [
            "imported",
            "local",
          ],
          "JSXAttribute": [
            "name",
            "value",
          ],
          "JSXClosingElement": [
            "name",
          ],
          "JSXClosingFragment": [],
          "JSXElement": [
            "openingElement",
            "children",
            "closingElement",
          ],
          "JSXEmptyExpression": [],
          "JSXExpressionContainer": [
            "expression",
          ],
          "JSXFragment": [
            "openingFragment",
            "children",
            "closingFragment",
          ],
          "JSXIdentifier": [],
          "JSXMemberExpression": [
            "object",
            "property",
          ],
          "JSXNamespacedName": [
            "namespace",
            "name",
          ],
          "JSXOpeningElement": [
            "name",
            "attributes",
          ],
          "JSXOpeningFragment": [],
          "JSXSpreadAttribute": [
            "argument",
          ],
          "JSXSpreadChild": [
            "expression",
          ],
          "JSXText": [],
          "LabeledStatement": [
            "label",
            "body",
          ],
          "Literal": [],
          "LogicalExpression": [
            "left",
            "right",
          ],
          "MemberExpression": [
            "object",
            "property",
          ],
          "MetaProperty": [
            "meta",
            "property",
          ],
          "MethodDefinition": [
            "key",
            "value",
          ],
          "NewExpression": [
            "callee",
            "arguments",
          ],
          "ObjectExpression": [
            "properties",
          ],
          "ObjectPattern": [
            "properties",
          ],
          "PrivateIdentifier": [],
          "Program": [
            "body",
          ],
          "Property": [
            "key",
            "value",
          ],
          "PropertyDefinition": [
            "key",
            "value",
          ],
          "RestElement": [
            "argument",
          ],
          "ReturnStatement": [
            "argument",
          ],
          "SequenceExpression": [
            "expressions",
          ],
          "SpreadElement": [
            "argument",
          ],
          "StaticBlock": [
            "body",
          ],
          "Super": [],
          "SwitchCase": [
            "test",
            "consequent",
          ],
          "SwitchStatement": [
            "discriminant",
            "cases",
          ],
          "TaggedTemplateExpression": [
            "tag",
            "quasi",
          ],
          "TemplateElement": [],
          "TemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "ThisExpression": [],
          "ThrowStatement": [
            "argument",
          ],
          "TryStatement": [
            "block",
            "handler",
            "finalizer",
          ],
          "UnaryExpression": [
            "argument",
          ],
          "UpdateExpression": [
            "argument",
          ],
          "VariableDeclaration": [
            "declarations",
          ],
          "VariableDeclarator": [
            "id",
            "init",
          ],
          "WhileStatement": [
            "test",
            "body",
          ],
          "WithStatement": [
            "object",
            "body",
          ],
          "YAMLAlias": [],
          "YAMLAnchor": [],
          "YAMLDirective": [],
          "YAMLDocument": [
            "directives",
            "content",
          ],
          "YAMLMapping": [
            "pairs",
          ],
          "YAMLPair": [
            "key",
            "value",
          ],
          "YAMLScalar": [],
          "YAMLSequence": [
            "entries",
          ],
          "YAMLTag": [],
          "YAMLWithMeta": [
            "anchor",
            "tag",
            "value",
          ],
          "YieldExpression": [
            "argument",
          ],
        },
        "getStaticYAMLValue": [Function],
        "meta": {
          "name": "yaml-eslint-parser",
          "version": "1.3.0",
        },
        "name": "yaml-eslint-parser",
        "parseForESLint": [Function],
        "parseYAML": [Function],
        "traverseNodes": [Function],
      },
    },
    "rules": {
      "no-irregular-whitespace": "off",
      "no-unused-vars": "off",
      "spaced-comment": "off",
    },
  },
  {
    "rules": {
      "yml/block-mapping-colon-indicator-newline": "off",
      "yml/block-mapping-question-indicator-newline": "off",
      "yml/block-sequence-hyphen-indicator-newline": "off",
      "yml/flow-mapping-curly-newline": "off",
      "yml/flow-mapping-curly-spacing": "off",
      "yml/flow-sequence-bracket-newline": "off",
      "yml/flow-sequence-bracket-spacing": "off",
      "yml/indent": "off",
      "yml/key-spacing": "off",
      "yml/no-multiple-empty-lines": "off",
      "yml/no-trailing-zeros": "off",
      "yml/quotes": "off",
    },
  },
  {
    "files": [
      "*.yaml",
      "**/*.yaml",
      "*.yml",
      "**/*.yml",
      "**/*.vue",
    ],
    "ignores": [
      ".github/**",
    ],
    "name": "yml/sort-keys",
    "rules": {
      "yml/sort-keys": [
        "error",
        "asc",
      ],
    },
  },
]
`;
